name: E2E Standalone

on:
  workflow_dispatch:
    inputs:
      base_url:
        description: "Base URL"
        required: true
        type: string
        default: "http://127.0.0.1:8010"

jobs:
  e2e:
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }

      - name: Install Node deps
        run: |
          if (Test-Path "package-lock.json") { npm ci } elseif (Test-Path "package.json") { npm i }

      - name: Export env
        shell: pwsh
        run: |
          "BASE_URL=${{ github.event.inputs.base_url }}" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "ADMIN_USER=admin"                             | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "ADMIN_PASS=admin"                             | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Start Django (bg)
        shell: pwsh
        env:
          DJANGO_SETTINGS_MODULE: core.settings_maintenance
        run: |
          if (Test-Path "manage.py") {
            Start-Process -FilePath python -ArgumentList "manage.py","runserver","127.0.0.1:8010" -WindowStyle Hidden
            $deadline = [DateTime]::UtcNow.AddSeconds(60)
            while ([DateTime]::UtcNow -lt $deadline) {
              try {
                $c = New-Object Net.Sockets.TcpClient
                $iar = $c.BeginConnect("127.0.0.1",8010,$null,$null)
                $ok = $iar.AsyncWaitHandle.WaitOne(1000)
                if ($ok -and $c.Connected) { $c.Close(); break }
                $c.Close()
              } catch {}
              Start-Sleep -Milliseconds 500
            }
          }

      - name: Tolerant smoke
        shell: pwsh
        run: |
          try {
            $r = iwr "${{ github.event.inputs.base_url }}" -MaximumRedirection 0 -ErrorAction Stop
            "SMOKE $($r.StatusCode)" | Write-Host
          } catch {
            $code = [int]$_.Exception.Response.StatusCode
            if ($code -in 301,302,303,307,308) { "SMOKE Redirect $code (OK)" | Write-Host } else { throw }
          }

      - name: Build tasks (ensure tasks.json)
        shell: pwsh
        run: |
          if (Test-Path "scripts/build-tasks.js") {
            node scripts/build-tasks.js
          } else {
            New-Item -Force -ItemType Directory -Path build | Out-Null
            $json = @"
{ "meta": {"generatedAt":"$(Get-Date -Format s)","source":"fallback"},
  "jobs":[{"id":"ADMIN_SMOKE","title":"Admin login smoke",
           "steps":[{"action":"goto","url":"/admin/login/"}]}] }
"@
            $json | Set-Content tasks.json -Encoding UTF8
            Copy-Item tasks.json build/tasks.json -Force
          }

      - name: Verify tasks.json
        shell: pwsh
        run: |
          if (!(Test-Path tasks.json) -and !(Test-Path build/tasks.json)) { throw "tasks.json yok" }
          "tasks.json hazÄ±r" | Write-Host

      - name: Run Playwright tests
        run: |
          npx playwright install --with-deps
          npx playwright test --reporter line,html

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: warn