name: PR Maintenance
on:
  workflow_dispatch: {}
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled]
  schedule:
    - cron: "*/15 * * * *"

permissions:
  contents: write
  pull-requests: write

jobs:
  maintain:
    runs-on: ubuntu-latest
    steps:
      - name: Django migrate + seed admin
        shell: pwsh
        env:
          DJANGO_SETTINGS_MODULE: "core.settings_maintenance"
        run: |
          if (Test-Path "manage.py") {
            python -m pip install --upgrade pip
            if (Test-Path "requirements.txt") { pip install -r requirements.txt }
            python manage.py migrate --settings=core.settings_maintenance
            $u = "${env:ADMIN_USER}"; if (-not $u) { $u="admin" }
            $p = "${env:ADMIN_PASS}"; if (-not $p) { $p="Admin!2345" }
            python manage.py shell --settings=core.settings_maintenance -c "from django.contrib.auth import get_user_model as G; U=G(); u,created=U.objects.get_or_create(username='$u', defaults={'email':'admin@example.com','is_staff':True,'is_superuser':True}); u.is_staff=True; u.is_superuser=True; u.set_password('$p'); u.save(); print('created' if created else 'updated')"
          }      - uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Set git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Install GitHub CLI
        uses: cli/cli@v2
        with:
          version: latest

      # PR event'inde sadece ilgili PR
      - name: Update single PR (PR event)
        if: ${{ github.event_name == 'pull_request' }}
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          $pr = ${{ github.event.pull_request.number }}
          $slug = "${{ github.repository }}"
          try {
            $sha  = gh pr view $pr --json headRefOid --jq .headRefOid
            gh api -X PUT "repos/$slug/pulls/$pr/update-branch" `
              -F expected_head_sha=$sha `
              -H "Accept: application/vnd.github+json" 2>$null | Out-Null
          } catch {}
          ./ops/rebase_auto.ps1 -PrNumber $pr
          gh pr review $pr --approve 2>$null
          gh pr merge  $pr --squash --auto

      # dispatch/schedule'da tüm açık PR'lar
      - name: Update all open PRs (dispatch/schedule)
        if: ${{ github.event_name != 'pull_request' }}
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          $slug = "${{ github.repository }}"
          $open = gh pr list --state open --json number --jq '.[].number'
          foreach ($pr in $open) {
            try {
              $sha = gh pr view $pr --json headRefOid --jq .headRefOid
              gh api -X PUT "repos/$slug/pulls/$pr/update-branch" `
                -F expected_head_sha=$sha `
                -H "Accept: application/vnd.github+json" 2>$null | Out-Null
            } catch {}
            ./ops/rebase_auto.ps1 -PrNumber $pr
            gh pr review $pr --approve 2>$null
            gh pr merge  $pr --squash --auto
          }
