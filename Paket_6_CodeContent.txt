### DOSYA BAŞLANGIÇ: .\\maintenance\management\commands\seed_calibration_next.py
# REV: 1.1 | 2025-09-25 | Hash: 8dd154fb | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-Q39NYKQ7
# -*- coding: utf-8 -*-
from __future__ import annotations

import random
# <<< BLOK SONU: ID:PY-IMP-Q39NYKQ7
# >>> BLOK: COMMAND | Komut | ID:PY-COM-SGZCGYTS
from datetime import date, timedelta

from django.core.management.base import BaseCommand
from django.db.models import OuterRef, Subquery, DateField

from maintenance.models import CalibrationAsset, CalibrationRecord


class Command(BaseCommand):
    help = (
        "Gelecek tarihli demo kalibrasyon kayıtları üretir.\n"
        "Varsayılan: sadece eksik/geride olanlara, bugün+10..90 gün arası next_calibration oluşturur.\n"
        "Örnek:\n"
        "  python manage.py seed_calibration_next --settings=core.settings_maintenance\n"
        "  python manage.py seed_calibration_next --days-min 7 --days-max 120 --force --settings=core.settings_maintenance\n"
    )

    def add_arguments(self, parser):
        parser.add_argument("--days-min", type=int, default=10, help="Next calibration en az gün (vars: 10)")
        parser.add_argument("--days-max", type=int, default=90, help="Next calibration en çok gün (vars: 90)")
        parser.add_argument(
            "--force",
            action="store_true",
            help="Tüm aktif cihazlara yeni kayıt ekler (mevcutta geleceğe dönük olsa bile).",
        )

    def handle(self, *args, **opts):
        dmin = max(1, int(opts["days_min"]))
        dmax = max(dmin, int(opts["days_max"]))
        force = bool(opts["force"])

        today = date.today()

        latest_next = CalibrationRecord.objects.filter(
            asset_id=OuterRef("pk")
        ).order_by("-next_calibration").values("next_calibration")[:1]

        assets = (
            CalibrationAsset.objects.filter(is_active=True)
            .annotate(next_cal=Subquery(latest_next, output_field=DateField()))
            .order_by("asset_code")
        )

        created = 0
        for a in assets:
            if not force and a.next_cal and a.next_cal >= today:
                # Zaten geleceğe dönük bir next_calibration var
                continue

            # last: geçen 100..400 gün önce
            last_days_ago = random.randint(100, 400)
            last = today - timedelta(days=last_days_ago)
            # next: dmin..dmax gün sonra
            nxt = today + timedelta(days=random.randint(dmin, dmax))

            CalibrationRecord.objects.create(
                asset=a,
                last_calibration=last,
                next_calibration=nxt,
                result="OK",
                notes="Demo seed (seed_calibration_next)",
            )
            created += 1

        self.stdout.write(self.style.SUCCESS(f"Oluşturulan kalibrasyon kaydı: {created}"))
# <<< BLOK SONU: ID:PY-COM-SGZCGYTS
### DOSYA BİTİŞ: seed_calibration_next.py

### DOSYA BAŞLANGIÇ: .\\maintenance\migrations\0001_initial.py
# REV: 1.0 | 2025-09-25 | Hash: 1cbb210e | Parça: 1/1
# Generated by Django 5.2.6 on 2025-09-03 19:05

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('area', models.CharField(blank=True, max_length=120)),
                ('discipline', models.CharField(choices=[('ELEC', 'Elektrik'), ('MECH', 'Mekanik'), ('PNEU', 'Pnömatik')], default='MECH', max_length=4)),
                ('criticality', models.PositiveSmallIntegerField(default=3, help_text='1=En kritik, 5=En az kritik')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='CalibrationRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_calibration', models.DateField(blank=True, null=True)),
                ('next_calibration', models.DateField(blank=True, null=True)),
                ('result', models.CharField(blank=True, max_length=120)),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='maintenance.equipment')),
            ],
        ),
        migrations.CreateModel(
            name='MaintenanceChecklistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('is_mandatory', models.BooleanField(default=True)),
                ('frequency', models.CharField(choices=[('DAILY', 'Günlük'), ('WEEKLY', 'Haftalık'), ('MONTHLY', 'Aylık'), ('QTR', '3 Aylık'), ('YEARLY', 'Yıllık')], default='MONTHLY', max_length=10)),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='maintenance.equipment')),
            ],
        ),
        migrations.CreateModel(
            name='MaintenanceOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_type', models.CharField(choices=[('PLN', 'Planlı'), ('PRD', 'Kestirimci'), ('BRK', 'Arızi')], default='PLN', max_length=3)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('technician', models.CharField(blank=True, max_length=120)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('SCHEDULED', 'Planlandı'), ('COMPLETED', 'Tamamlandı'), ('OVERDUE', 'Gecikmiş')], default='SCHEDULED', max_length=12)),
                ('duration_hours', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('cost_total', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='maintenance.equipment')),
            ],
            options={
                'ordering': ['-due_date', '-id'],
            },
        ),
        migrations.CreateModel(
            name='SparePart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('is_critical', models.BooleanField(default=False)),
                ('stock_qty', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('min_qty', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('equipment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='maintenance.equipment')),
            ],
        ),
    ]
### DOSYA BİTİŞ: 0001_initial.py

### DOSYA BAŞLANGIÇ: .\\maintenance\forms.py
# REV: 1.1 | 2025-09-25 | Hash: 544f9096 | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-Z7B1GP9H
# -*- coding: utf-8 -*-
from __future__ import annotations
from django import forms
from .models import MaintenanceChecklistItem

# <<< BLOK SONU: ID:PY-IMP-Z7B1GP9H
# >>> BLOK: FORMS | Formlar | ID:PY-FOR-RXA5WRDF
class MaintenanceChecklistItemForm(forms.ModelForm):
    class Meta:
        model = MaintenanceChecklistItem
        fields = [
            "department",        # Bulunduğu Bölüm
            "machine_no",        # Makine No
            "machine_name",      # Makine Adı
            "manufacturer",      # Üretici Firma
            "frequency",         # Bakım / Kontrol Periyodu (dropdown)
            "name",              # Bakım / Kontrol Tanımı (kısa başlık)
            "description",       # Açıklama (opsiyonel, uzun)
            "equipment",         # (İsteğe bağlı) mevcut makine ile bağla
            "is_mandatory",      # Zorunlu işaretle
        ]
        widgets = {
            "department": forms.TextInput(attrs={"placeholder": "Örn: Pres Atölyesi"}),
            "machine_no": forms.TextInput(attrs={"placeholder": "Örn: MC-001"}),
            "machine_name": forms.TextInput(attrs={"placeholder": "Örn: Hat 1 Pres Makinesi"}),
            "manufacturer": forms.TextInput(attrs={"placeholder": "Örn: ABC Makina"}),
            "name": forms.TextInput(attrs={"placeholder": "Kontrol/Bakım adını giriniz"}),
            "description": forms.Textarea(attrs={"rows": 3, "placeholder": "İş adımının detaylı tanımı"}),
        }
        help_texts = {
            "frequency": "Plan üretimi için güvenli kodlarla kullanılacak periyot.",
            "equipment": "İstersen mevcut bir makineyi seçebilirsin; seçilmezse yukarıdaki bilgilerle yeni kayıt mantığına temel oluşturur.",
            "is_mandatory": "İş emrinde mutlaka yapılması gereken kritik bir adım ise işaretleyin.",
        }
# <<< BLOK SONU: ID:PY-FOR-RXA5WRDF
### DOSYA BİTİŞ: forms.py

### DOSYA BAŞLANGIÇ: .\\maintenance\bootreport.py
# REV: 1.1 | 2025-09-25 | Hash: 5d345cf0 | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-E9M949JJ
# -*- coding: utf-8 -*-
from __future__ import annotations

import json
import os
import platform
import sys
import hashlib
import shutil
import glob
from datetime import datetime
# <<< BLOK SONU: ID:PY-IMP-E9M949JJ
# >>> BLOK: HELPERS | Yardimci fonksiyonlar | ID:PY-HEL-WBMVJXKH
from typing import Any, Dict, List

import django
from django.conf import settings
from django.apps import apps as dj_apps
from django.urls import get_resolver, URLPattern, URLResolver
from django.contrib.auth import get_user_model


def safe_write_boot_report() -> None:
    """
    Açılışta güvenli şekilde rapor üretir ve var/ içine yazar.
    - JSON & TXT dosyalarını OLUŞTURUR/GÜNCELLER.
    - Yazmadan ÖNCE mevcut dosyaları timestamp'li şekilde AYNI klasöre YEDEKLER.
    - Eski yedekleri (varsayılan 20 adetten fazlasını) siler.
    BOOTREPORT_DEBUG=1 ise istisna detaylarını stdout'a basar.
    """
    try:
        data = _collect_boot_data()
        _write_files(data)
    except Exception as e:
        if os.environ.get("BOOTREPORT_DEBUG") == "1" or bool(getattr(settings, "DEBUG", False)):
            try:
                import traceback
                print("[bootreport] ERROR:", repr(e))
                traceback.print_exc()
            except Exception:
                pass
        # Sessizce geç
        return


def _collect_boot_data() -> Dict[str, Any]:
    now = datetime.now()
    base_dir = str(getattr(settings, "BASE_DIR", os.getcwd()))

    info: Dict[str, Any] = {
        "generated_at": now.isoformat(timespec="seconds"),
        "tz": str(getattr(settings, "TIME_ZONE", "")),
        "python": {
            "version": sys.version,
            "implementation": platform.python_implementation(),
        },
        "django": {
            "version": django.get_version(),
            "debug": bool(getattr(settings, "DEBUG", False)),
        },
        "project": {
            "base_dir": base_dir,
            "root_urlconf": getattr(settings, "ROOT_URLCONF", ""),
            "allowed_hosts": list(getattr(settings, "ALLOWED_HOSTS", [])),
            "secret_key_masked": _mask(getattr(settings, "SECRET_KEY", "")),
            "language_code": getattr(settings, "LANGUAGE_CODE", ""),
            "use_tz": bool(getattr(settings, "USE_TZ", True)),
        },
        "paths": {
            "static_url": getattr(settings, "STATIC_URL", ""),
            "static_root": str(getattr(settings, "STATIC_ROOT", "")),
            "staticfiles_dirs": [str(p) for p in getattr(settings, "STATICFILES_DIRS", []) or []],
            "media_url": getattr(settings, "MEDIA_URL", ""),
            "media_root": str(getattr(settings, "MEDIA_ROOT", "")),
            "template_dirs": _template_dirs(),
        },
        "apps": {
            "installed_apps": [str(x) for x in getattr(settings, "INSTALLED_APPS", [])],
            "middleware": [str(x) for x in getattr(settings, "MIDDLEWARE", [])],
            "auth_user_model": _user_model_path(),
        },
        "database": _db_summary(),
        "urls": _list_all_urls(),
        "models": _introspect_models(),
        "hr_lms_focus": _hr_lms_focus_section(),
        "signature": {},
    }

    # İmza — tüm değerleri JSON-uyumlu hale getir
    sig_payload = {
        "installed_apps": [str(x) for x in info["apps"]["installed_apps"]],
        "middleware": [str(x) for x in info["apps"]["middleware"]],
        "database": {k: {kk: str(vv) for kk, vv in info["database"][k].items()} for k in info["database"]},
        "urls": [str(u.get("route", "")) for u in info["urls"]],
        "models": {m["model_label"]: [str(f["name"]) for f in m["fields"]] for m in info["models"]},
    }
    signature_src = json.dumps(sig_payload, ensure_ascii=False, sort_keys=True, default=str).encode("utf-8")
    info["signature"] = {
        "sha256": hashlib.sha256(signature_src).hexdigest(),
        "short": hashlib.sha256(signature_src).hexdigest()[:12],
    }
    return info


def _mask(value: str, keep: int = 6) -> str:
    if not value:
        return ""
    if len(value) <= keep:
        return "*" * len(value)
    return value[:keep] + "*" * (len(value) - keep)


def _template_dirs() -> List[str]:
    dirs: List[str] = []
    for cfg in getattr(settings, "TEMPLATES", []):
        for d in cfg.get("DIRS", []):
            dirs.append(str(d))
    return dirs


def _db_summary() -> Dict[str, Any]:
    out: Dict[str, Any] = {}
    dbs = getattr(settings, "DATABASES", {})
    for alias, cfg in dbs.items():
        # Path nesneleri dahil tümünü stringe zorla
        engine = str(cfg.get("ENGINE", ""))
        name = str(cfg.get("NAME", ""))
        out[alias] = {"engine": engine, "name": name}
    return out


def _user_model_path() -> str:
    try:
        User = get_user_model()
        return f"{User._meta.app_label}.{User.__name__}"
    except Exception:
        return ""


def _list_all_urls() -> List[Dict[str, Any]]:
    resolver = get_resolver()
    flat: List[Dict[str, Any]] = []

    def _walk(patterns, prefix=""):
        for p in patterns:
            if isinstance(p, URLPattern):
                route = str(p.pattern)
                name = p.name
                callback = getattr(p.callback, "__module__", "") + "." + getattr(p.callback, "__name__", "")
                flat.append({"route": prefix + route, "name": name, "callback": callback})
            elif isinstance(p, URLResolver):
                route = str(p.pattern)
                _walk(p.url_patterns, prefix + route)
            else:
                flat.append({"route": str(p.pattern), "name": getattr(p, "name", None), "callback": ""})

    _walk(resolver.url_patterns)
    return flat


def _introspect_models() -> List[Dict[str, Any]]:
    models_info: List[Dict[str, Any]] = []
    for model in dj_apps.get_models():
        try:
            fields = []
            for f in model._meta.get_fields():
                field_info = {
                    "name": f.name,
                    "type": f.__class__.__name__,
                    "is_relation": f.is_relation,
                    "many_to_many": getattr(f, "many_to_many", False),
                    "related_model": f.related_model._meta.label if getattr(f, "related_model", None) else None,
                }
                for attr in ("null", "blank", "db_index", "primary_key", "unique", "choices"):
                    if hasattr(f, attr):
                        val = getattr(f, attr)
                        if attr == "choices" and val:
                            try:
                                val = [str(c[0]) for c in val]
                            except Exception:
                                val = str(val)
                        field_info[attr] = val
                fields.append(field_info)

            models_info.append(
                {
                    "app_label": model._meta.app_label,
                    "model_name": model.__name__,
                    "model_label": model._meta.label,
                    "db_table": model._meta.db_table,
                    "fields": fields,
                }
            )
        except Exception:
            continue
    models_info.sort(key=lambda m: m["model_label"])
    return models_info


def _hr_lms_focus_section() -> Dict[str, Any]:
    out: Dict[str, Any] = {"training_plan": None, "training_plan_attendee": None}
    try:
        TP = dj_apps.get_model("trainings", "TrainingPlan")
    except Exception:
        TP = None
    if TP:
        out["training_plan"] = {"model_label": TP._meta.label, "fields": [f.name for f in TP._meta.get_fields()]}
    try:
        TPA = dj_apps.get_model("trainings", "TrainingPlanAttendee")
    except Exception:
        TPA = None
    if TPA:
        out["training_plan_attendee"] = {"model_label": TPA._meta.label, "fields": [f.name for f in TPA._meta.get_fields()]}
    return out


def _write_files(data: Dict[str, Any]) -> None:
    """
    - var/ klasörünü garanti oluşturur
    - Mevcut JSON/TXT dosyalarını timestamp'li .bak olarak yedekler
    - Yeni içerikleri yazar
    - Yedekleri sınırlar (KEEP=20)
    """
    base_dir = str(getattr(settings, "BASE_DIR", os.getcwd()))
    var_dir = os.path.join(base_dir, "var")
    os.makedirs(var_dir, exist_ok=True)

    json_path = os.path.join(var_dir, "bootreport.json")
    txt_path  = os.path.join(var_dir, "bootreport.txt")

    # Önce yedekle
    _backup_existing(json_path, keep=int(os.environ.get("BOOTREPORT_KEEP", "20")))
    _backup_existing(txt_path,  keep=int(os.environ.get("BOOTREPORT_KEEP", "20")))

    # Sonra yaz
    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2, default=str)

    with open(txt_path, "w", encoding="utf-8") as f:
        f.write(_summarize(data))


def _backup_existing(path: str, keep: int = 20) -> None:
    """
    path mevcutsa, aynı klasöre `<name>.<YYYYmmdd-HHMMSS><ext>.bak` kopyası oluştur.
    Ardından aynı pattern'deki en yeni keep adet dışındakileri sil.
    """
    if not os.path.exists(path):
        return
    d = os.path.dirname(path)
    base = os.path.basename(path)
    name, ext = os.path.splitext(base)
    ts = datetime.now().strftime("%Y%m%d-%H%M%S")
    bak_name = f"{name}.{ts}{ext}.bak"
    bak_path = os.path.join(d, bak_name)

    try:
        shutil.copy2(path, bak_path)
    except Exception as e:
        if os.environ.get("BOOTREPORT_DEBUG") == "1":
            print(f"[bootreport] BACKUP COPY ERROR for {path} -> {e!r}")

    # Retention: aynı isim için üretilmiş yedekleri bul ve sınırla
    pattern = os.path.join(d, f"{name}.*{ext}.bak")
    backups = sorted(glob.glob(pattern), reverse=True)  # en yeni başta
    if len(backups) > keep:
        for old in backups[keep:]:
            try:
                os.remove(old)
            except Exception as e:
                if os.environ.get("BOOTREPORT_DEBUG") == "1":
                    print(f"[bootreport] BACKUP PRUNE ERROR for {old} -> {e!r}")


def _summarize(d: Dict[str, Any]) -> str:
    lines: List[str] = []
    push = lines.append

    push(f"Generated: {d.get('generated_at')}  TZ={d.get('tz')}")
    py = d.get("python", {}).get("version", "")
    push(f"Python: {d.get('python', {}).get('implementation','')} {py.split()[0] if py else ''}")
    push(f"Django: {d.get('django', {}).get('version','')}  DEBUG={d.get('django', {}).get('debug')}")
    proj = d.get("project", {})
    push(f"Project: BASE_DIR={proj.get('base_dir','')}  ROOT_URLCONF={proj.get('root_urlconf','')}")
    push(f"Paths: STATIC_ROOT={d.get('paths',{}).get('static_root','')}  MEDIA_ROOT={d.get('paths',{}).get('media_root','')}")
    tdirs = d.get("paths", {}).get("template_dirs", []) or []
    push(f"Templates: {', '.join(tdirs) or '-'}")
    push(f"Auth User Model: {d.get('apps',{}).get('auth_user_model','')}")
    push(f"Installed Apps: {len(d.get('apps',{}).get('installed_apps', []))} items")
    push(f"Middleware   : {len(d.get('apps',{}).get('middleware', []))} items")
    push("Databases:")
    for alias, cfg in (d.get("database") or {}).items():
        push(f"  - {alias}: {cfg.get('engine','')}  name={cfg.get('name','')}")
    urls = d.get("urls") or []
    push(f"URL Patterns: {len(urls)} items")
    for u in urls[:50]:
        nm = u.get("name") or "-"
        push(f"  - {u.get('route','')}  (name={nm})")
    if len(urls) > 50:
        push(f"  ... (+{len(urls)-50} more)")

    hl = d.get("hr_lms_focus", {})
    tp = hl.get("training_plan")
    tpa = hl.get("training_plan_attendee")
    push("HR-LMS Focus:")
    if tp:
        push(f"  TrainingPlan: {tp['model_label']}  fields={', '.join(tp['fields'])}")
    else:
        push("  TrainingPlan: -")
    if tpa:
        push(f"  TrainingPlanAttendee: {tpa['model_label']}  fields={', '.join(tpa['fields'])}")
    else:
        push("  TrainingPlanAttendee: -")

    sig = d.get("signature", {})
    push(f"Signature: sha256={sig.get('sha256','')[:12]}…  short={sig.get('short','')}")

    return "\n".join(lines)
# <<< BLOK SONU: ID:PY-HEL-WBMVJXKH
### DOSYA BİTİŞ: bootreport.py

### DOSYA BAŞLANGIÇ: .\\maintenance\init.py
# REV: 1.1 | 2025-09-25 | Hash: b3b636c7 | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-JD8S433X
# YENİ DOSYA: maintenance/migrations/__init__.py
# <<< BLOK SONU: ID:PY-IMP-JD8S433X
# >>> BLOK: HELPERS | Yardimci fonksiyonlar | ID:PY-HEL-6JD3Z6V7
# <<< BLOK SONU: ID:PY-HEL-6JD3Z6V7
### DOSYA BİTİŞ: init.py

### DOSYA BAŞLANGIÇ: .\\maintenance\views.py
# REV: 1.1 | 2025-09-25 | Hash: 049d1bb7 | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-45M6B23F
# -*- coding: utf-8 -*-
from __future__ import annotations

import csv
import io
from datetime import date
# <<< BLOK SONU: ID:PY-IMP-45M6B23F
# >>> BLOK: VIEWS | Gorunumler | ID:PY-VIE-8DM3AFDK
from typing import Dict, List, Tuple, Iterable

from django.contrib.admin.views.decorators import staff_member_required
from django.contrib.auth.decorators import permission_required
from django.core.exceptions import ValidationError
from django.db.models import OuterRef, Subquery, DateField
from django.http import HttpRequest, HttpResponse
from django.shortcuts import render
from django.utils.dateparse import parse_date

from .models import CalibrationAsset, CalibrationRecord

# ---------------------------
# Yardımcılar
# ---------------------------

def _safe_str(val):
    return "" if val is None else str(val).strip()

def _parse_bool(val) -> bool:
    s = _safe_str(val).lower()
    if s in ("1", "true", "evet", "yes", "y", "on", "aktif"):
        return True
    if s in ("0", "false", "hayır", "hayir", "no", "n", "off", "pasif"):
        return False
    return True  # boş ise aktif varsayalım

def _parse_date_any(val):
    if isinstance(val, date):
        return val
    s = _safe_str(val)
    if not s:
        return None
    # YYYY-MM-DD gibi formatları yakalar
    d = parse_date(s)
    if d:
        return d
    # Gün/Ay/Yıl varyasyonlarını kaba şekilde ele al
    for sep in (".", "/", "-"):
        parts = s.split(sep)
        if len(parts) == 3:
            # dene: DD MM YYYY ya da YYYY MM DD
            a, b, c = parts
            # YYYY-first
            d = parse_date(f"{a.zfill(4)}-{b.zfill(2)}-{c.zfill(2)}")
            if d:
                return d
            # DD-first
            d = parse_date(f"{c.zfill(4)}-{b.zfill(2)}-{a.zfill(2)}")
            if d:
                return d
    return None

# Sütun->Model alan haritası (varsayılan eşleşme isimleri)
DEFAULT_FIELD_MAP = {
    "asset_code": ["cihaz kodu", "asset code", "code", "kodu"],
    "asset_name": ["cihaz adı", "adı", "name", "equipment"],
    "location": ["lokasyon", "konum", "location", "bölüm", "hat"],
    "brand": ["marka", "brand"],
    "model": ["model", "tip"],
    "serial_no": ["seri no", "serino", "serial", "serial no", "serial number"],
    "measure_range": ["ölçüm aralığı", "aralık", "range", "measure range"],
    "resolution": ["çözünürlük", "resolution"],
    "unit": ["birim", "unit"],
    "accuracy": ["doğruluk", "accuracy", "hassasiyet"],
    "uncertainty": ["belirsizlik", "uncertainty"],
    "acceptance_criteria": ["kabul kriteri", "acceptance", "acceptance criteria", "limit"],
    "calibration_method": ["yöntem", "prosedür", "metod", "method", "procedure"],
    "standard_device": ["referans cihaz", "standart cihaz", "standard device", "reference"],
    "standard_id": ["standart id", "standard id", "referans id"],
    "owner": ["sorumlu", "owner", "kullanıcı"],
    "responsible_email": ["e-posta", "email", "mail", "responsible email"],
    "is_active": ["aktif", "durum", "active", "status"],
}

IMPORTABLE_FIELDS = list(DEFAULT_FIELD_MAP.keys())

def _auto_guess_mapping(headers: List[str]) -> Dict[str, str]:
    """
    headers: dosyadaki sütun adları (lowercase olabilir)
    dönen: {model_field: header_name_lower}
    """
    mapping: Dict[str, str] = {}
    low_headers = {h.lower(): h.lower() for h in headers}  # değerleri de lower saklıyoruz
    for field, aliases in DEFAULT_FIELD_MAP.items():
        for alias in aliases:
            if alias in low_headers:
                mapping[field] = low_headers[alias]
                break
        if field not in mapping:
            if field in low_headers:
                mapping[field] = low_headers[field]
    return mapping

def _read_csv_preview(f) -> Tuple[List[str], List[List[str]]]:
    data = f.read()
    if isinstance(data, bytes):
        data = data.decode("utf-8-sig", errors="ignore")
    reader = csv.reader(io.StringIO(data))
    rows = list(reader)
    headers = rows[0] if rows else []
    preview = rows[1:21]  # ilk 20 satır
    return headers, preview

def _read_xlsx_preview(f) -> Tuple[List[str], List[List[str]]]:
    try:
        import openpyxl  # type: ignore
    except Exception:
        raise ValidationError("'.xlsx' okumak için 'openpyxl' kurulu olmalı: pip install openpyxl")
    wb = openpyxl.load_workbook(f, read_only=True, data_only=True)
    ws = wb.active
    rows = list(ws.iter_rows(values_only=True))
    headers = [(_safe_str(c)) for c in (rows[0] or [])] if rows else []
    preview = [[_safe_str(c) for c in r] for r in rows[1:21]]
    return headers, preview

def _iter_csv_rows(f) -> Iterable[Dict[str, str]]:
    data = f.read()
    if isinstance(data, bytes):
        data = data.decode("utf-8-sig", errors="ignore")
    reader = csv.DictReader(io.StringIO(data))
    for row in reader:
        yield {k: _safe_str(v) for k, v in row.items()}

def _iter_xlsx_rows(f) -> Iterable[Dict[str, str]]:
    try:
        import openpyxl  # type: ignore
    except Exception:
        raise ValidationError("'.xlsx' okumak için 'openpyxl' kurulu olmalı: pip install openpyxl")
    wb = openpyxl.load_workbook(f, read_only=True, data_only=True)
    ws = wb.active
    # başlık satırı
    headers = [(_safe_str(c)) for c in next(ws.iter_rows(values_only=True))]
    for row in ws.iter_rows(values_only=True):
        vals = [(_safe_str(c)) for c in row]
        yield dict(zip(headers, vals))

def _apply_mapping(row: Dict[str, str], mapping: Dict[str, str]) -> Dict[str, str]:
    """Dosya satırını model alanlarına projekte et."""
    m = {}
    for field in IMPORTABLE_FIELDS:
        header = mapping.get(field, "")
        m[field] = row.get(header, "")
    return m

def _upsert_asset(mapped: Dict[str, str]) -> Tuple[str, CalibrationAsset, bool]:
    """asset_code zorunlu; varsa update, yoksa create. returns: (status, obj, created)"""
    code = _safe_str(mapped.get("asset_code"))
    name = _safe_str(mapped.get("asset_name"))
    if not code:
        return ("SKIPPED_NO_CODE", None, False)  # type: ignore
    defaults = dict(
        asset_name=name or code,
        location=_safe_str(mapped.get("location")),
        brand=_safe_str(mapped.get("brand")),
        model=_safe_str(mapped.get("model")),
        serial_no=_safe_str(mapped.get("serial_no")),
        measure_range=_safe_str(mapped.get("measure_range")),
        resolution=_safe_str(mapped.get("resolution")),
        unit=_safe_str(mapped.get("unit")),
        accuracy=_safe_str(mapped.get("accuracy")),
        uncertainty=_safe_str(mapped.get("uncertainty")),
        acceptance_criteria=_safe_str(mapped.get("acceptance_criteria")),
        calibration_method=_safe_str(mapped.get("calibration_method")),
        standard_device=_safe_str(mapped.get("standard_device")),
        standard_id=_safe_str(mapped.get("standard_id")),
        owner=_safe_str(mapped.get("owner")),
        responsible_email=_safe_str(mapped.get("responsible_email")),
        is_active=_parse_bool(mapped.get("is_active")),
    )
    obj, created = CalibrationAsset.objects.update_or_create(asset_code=code, defaults=defaults)
    return ("CREATED" if created else "UPDATED", obj, created)

# ---------------------------
# Tablo + (isteğe bağlı) Sihirbaz
# ---------------------------

@staff_member_required
def calibration_full_table(request: HttpRequest) -> HttpResponse:
    """
    /calibration/table/  -> normal tablo
    /calibration/table/?import=1 -> içe aktarma sihirbazı
    """
    if request.GET.get("import") == "1":
        return calibration_import_wizard(request)

    # Son/gelecek tarih anotasyonları (Subquery ile)
    latest_last = CalibrationRecord.objects.filter(
        asset_id=OuterRef("pk")
    ).order_by("-last_calibration").values("last_calibration")[:1]
    latest_next = CalibrationRecord.objects.filter(
        asset_id=OuterRef("pk")
    ).order_by("-next_calibration").values("next_calibration")[:1]

    assets = (
        CalibrationAsset.objects.all()
        .annotate(last_cal=Subquery(latest_last, output_field=DateField()))
        .annotate(next_cal=Subquery(latest_next, output_field=DateField()))
        .order_by("asset_code")
    )

    ctx = {"assets": assets}
    return render(request, "maintenance/calibration_table.html", ctx)

# ---------------------------
# İçe Aktarım Sihirbazı (aynı route altında)
# ---------------------------

@staff_member_required
@permission_required("maintenance.add_calibrationasset")
def calibration_import_wizard(request: HttpRequest) -> HttpResponse:
    """
    Adımlar:
      - GET: upload formu
      - POST action=preview: dosya başlıklarını ve ilk 20 satırı önizleme + otomatik eşleme
      - POST action=import : mapping ile içe aktar ve özet döndür
    """
    ctx = {
        "headers": [],
        "preview": [],
        "mapping": {},
        "importable_fields": IMPORTABLE_FIELDS,
        "guessed": {},
        "ui_map": [],  # <— şablon için: [{'field': 'asset_code', 'selected': 'asset code'}, ...]
        "result": None,
        "error": None,
    }

    if request.method == "GET":
        return render(request, "maintenance/import_wizard.html", ctx)

    action = request.POST.get("action", "preview")
    upfile = request.FILES.get("file")

    if not upfile:
        ctx["error"] = "Lütfen bir .xlsx veya .csv dosyası seçin."
        return render(request, "maintenance/import_wizard.html", ctx)

    filename = (upfile.name or "").lower()
    is_xlsx = filename.endswith(".xlsx")
    is_csv = filename.endswith(".csv")

    try:
        # Aynı request yaşam döngüsünde dosyayı iki kez okuyabileceğimiz bir buffer
        mem = io.BytesIO(upfile.read())
        mem.seek(0)

        if action == "preview":
            if is_csv:
                headers, preview = _read_csv_preview(io.BytesIO(mem.getvalue()))
            elif is_xlsx:
                headers, preview = _read_xlsx_preview(io.BytesIO(mem.getvalue()))
            else:
                raise ValidationError("Yalnızca .xlsx veya .csv desteklenir.")

            # guessed: field -> header_lower
            guessed = _auto_guess_mapping([h.lower() for h in headers])
            ui_map = [{"field": f, "selected": guessed.get(f, "")} for f in IMPORTABLE_FIELDS]

            ctx.update({
                "headers": headers,
                "preview": preview,
                "guessed": guessed,
                "ui_map": ui_map,
            })
            return render(request, "maintenance/import_wizard.html", ctx)

        elif action == "import":
            # mapping alanlarını topla
            mapping = {}
            for field in IMPORTABLE_FIELDS:
                header = request.POST.get(f"map_{field}", "")
                if header:
                    mapping[field] = header
            if "asset_code" not in mapping:
                raise ValidationError("En azından 'asset_code' için bir sütun seçmelisiniz.")

            # satırları tara ve içe aktar
            created = updated = skipped = 0
            report: List[Tuple[str, str]] = []

            def _iter():
                if is_csv:
                    return _iter_csv_rows(io.BytesIO(mem.getvalue()))
                elif is_xlsx:
                    return _iter_xlsx_rows(io.BytesIO(mem.getvalue()))
                else:
                    raise ValidationError("Yalnızca .xlsx veya .csv desteklenir.")

            for row in _iter():
                mapped = _apply_mapping(row, mapping)
                status, obj, is_created = _upsert_asset(mapped)
                if status == "SKIPPED_NO_CODE":
                    skipped += 1
                    report.append(("SKIPPED", "asset_code boş"))
                else:
                    if is_created:
                        created += 1
                    else:
                        updated += 1
                    report.append((status, obj.asset_code))

            ctx["result"] = {
                "created": created,
                "updated": updated,
                "skipped": skipped,
                "report": report[:500],
            }
            return render(request, "maintenance/import_wizard.html", ctx)

        else:
            raise ValidationError("Bilinmeyen işlem.")

    except ValidationError as ve:
        ctx["error"] = str(ve)
        return render(request, "maintenance/import_wizard.html", ctx)
    except Exception as ex:
        ctx["error"] = f"İçe aktarma sırasında beklenmeyen hata: {ex}"
        return render(request, "maintenance/import_wizard.html", ctx)
# <<< BLOK SONU: ID:PY-VIE-8DM3AFDK
### DOSYA BİTİŞ: views.py

### DOSYA BAŞLANGIÇ: .\\maintenance\kpi_helpers.py
# REV: 1.1 | 2025-09-25 | Hash: 79d127ef | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-VER4SXB2
# -*- coding: utf-8 -*-
from __future__ import annotations
# <<< BLOK SONU: ID:PY-IMP-VER4SXB2
# >>> BLOK: HELPERS | Yardimci fonksiyonlar | ID:PY-HEL-CSMB3X32
from datetime import datetime, date, time, timedelta
from typing import Optional

from django.conf import settings
from django.db.models import Sum, Avg, Count, Q
from django.utils import timezone

from .models import MaintenanceOrder, CalibrationRecord

# ---- helpers ---------------------------------------------------------------

def _to_aware(dt: datetime) -> datetime:
    """
    Datetime'i timezone-aware hale getirir (USE_TZ=True iken).
    Zaten aware ise olduğu gibi döner.
    """
    if dt is None:
        return None
    if timezone.is_aware(dt):
        return dt
    return timezone.make_aware(dt, timezone.get_current_timezone())

def _date_to_aware_start(d: Optional[date]) -> Optional[datetime]:
    """
    Date -> aynı günün 00:00 aware datetime'ı.
    None gelirse None döner.
    """
    if d is None:
        return None
    dt = datetime.combine(d, time.min)
    return _to_aware(dt)

# ---- KPIs ------------------------------------------------------------------

def mtbf_hours(days: int = 180) -> float:
    """Arızalar arası ort. süre. Basit yaklaşım: tamamlanan BRK sayısına göre."""
    now = timezone.now()
    since = now - timedelta(days=days)
    # Tamamlanmış arızalar
    brk_cnt = (
        MaintenanceOrder.objects.filter(order_type="BRK", completed_at__isnull=False, completed_at__gte=since)
        .count()
    )
    if brk_cnt <= 1:
        return 0.0
    # Ölçüm penceresini saat olarak böl.
    hours = days * 24.0
    return round(hours / brk_cnt, 1)

def mttr_hours(days: int = 180) -> float:
    """
    Mean Time To Repair: (completed_at - start_date)
    start_date bir DateField olduğu için aware datetime'a dönüştürülür.
    """
    now = timezone.now()
    since = now - timedelta(days=days)
    qs = MaintenanceOrder.objects.filter(
        completed_at__isnull=False,
        completed_at__gte=since,
    ).only("completed_at", "start_date")
    total = 0.0
    n = 0
    for mo in qs:
        start_dt = _date_to_aware_start(mo.start_date)
        end_dt = _to_aware(mo.completed_at)
        if start_dt and end_dt and end_dt >= start_dt:
            total += (end_dt - start_dt).total_seconds() / 3600.0
            n += 1
    return round(total / n, 1) if n else 0.0

def schedule_compliance(days: int = 90) -> float:
    """Planlı işlerin zamanında tamamlama oranı (örnek basit hesap)."""
    now = timezone.now().date()
    since = now - timedelta(days=days)
    planned = MaintenanceOrder.objects.filter(
        order_type="PLN", start_date__gte=since
    )
    total = planned.count()
    if total == 0:
        return 0.0
    ontime = planned.filter(
        status="COMPLETED", completed_at__isnull=False, due_date__isnull=False
    ).filter(
        completed_at__lte=_to_aware(datetime.combine(timezone.localdate(), time.max))
    ).count()
    return round(ontime * 100.0 / total, 1)

def pdm_hit_rate(days: int = 90) -> float:
    """Kestirimci işlerin isabet oranı (placeholder)."""
    now = timezone.now().date()
    since = now - timedelta(days=days)
    qs = MaintenanceOrder.objects.filter(order_type="PRD", start_date__gte=since)
    total = qs.count()
    if total == 0:
        return 0.0
    # Örnek metrik: tamamlanan / toplam
    hit = qs.filter(status="COMPLETED").count()
    return round(hit * 100.0 / total, 1)

def breakdown_ratio(days: int = 90) -> float:
    """Arızi işlerin, toplam işlere oranı."""
    now = timezone.now().date()
    since = now - timedelta(days=days)
    total = MaintenanceOrder.objects.filter(start_date__gte=since).count()
    if total == 0:
        return 0.0
    brk = MaintenanceOrder.objects.filter(order_type="BRK", start_date__gte=since).count()
    return round(brk * 100.0 / total, 1)

def calibration_compliance(days: int = 365) -> float:
    """Kalibrasyon kayıtlarında gelecek/son 1 yılda uyum oranı (placeholder)."""
    now = timezone.localdate()
    start = now - timedelta(days=days)
    end = now + timedelta(days=days)
    qs = CalibrationRecord.objects.filter(next_calibration__gte=start, next_calibration__lte=end)
    total = qs.count()
    if total == 0:
        return 0.0
    ok = qs.filter(result__iexact="OK").count()
    return round(ok * 100.0 / total, 1)

def cost_summary(days: int = 180) -> dict:
    """Toplam/ortalama maliyet ve süre, iş emri adedi."""
    now = timezone.now().date()
    since = now - timedelta(days=days)
    agg = MaintenanceOrder.objects.filter(start_date__gte=since).aggregate(
        total_cost=Sum("cost_total"),
        avg_cost=Avg("cost_total"),
        total_duration=Sum("duration_hours"),
        total_orders=Count("id"),
    )
    # None güvenliği
    for k in ("total_cost", "avg_cost", "total_duration", "total_orders"):
        agg[k] = agg[k] or 0
    return agg
# <<< BLOK SONU: ID:PY-HEL-CSMB3X32
### DOSYA BİTİŞ: kpi_helpers.py

### DOSYA BAŞLANGIÇ: .\\maintenance\apps.py
# REV: 1.1 | 2025-09-25 | Hash: 30143910 | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-PTSYESDH
from django.apps import AppConfig

# <<< BLOK SONU: ID:PY-IMP-PTSYESDH
# >>> BLOK: HELPERS | Yardimci fonksiyonlar | ID:PY-HEL-WP1RFCNE
class MaintenanceConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "maintenance"
    verbose_name = "Bakım Modülü"

    def ready(self):
        try:
            from .bootreport import safe_write_boot_report
            safe_write_boot_report()
        except Exception:
            pass
# <<< BLOK SONU: ID:PY-HEL-WP1RFCNE
### DOSYA BİTİŞ: apps.py

### DOSYA BAŞLANGIÇ: .\\core\wsgi.py
# REV: 1.1 | 2025-09-25 | Hash: aa64b9dc | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-BA97B7DG
# <<< BLOK SONU: ID:PY-IMP-BA97B7DG
# >>> BLOK: HELPERS | Yardimci fonksiyonlar | ID:PY-HEL-2Z10B8Z7
"""
WSGI config for core project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

application = get_wsgi_application()
# <<< BLOK SONU: ID:PY-HEL-2Z10B8Z7
### DOSYA BİTİŞ: wsgi.py

### DOSYA BAŞLANGIÇ: .\\core\__init__.py
# REV: 1.1 | 2025-09-25 | Hash: f54bf048 | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-F03ETBFX
# <<< BLOK SONU: ID:PY-IMP-F03ETBFX
# >>> BLOK: HELPERS | Yardimci fonksiyonlar | ID:PY-HEL-06FSQ89J
# <<< BLOK SONU: ID:PY-HEL-06FSQ89J
### DOSYA BİTİŞ: __init__.py

### DOSYA BAŞLANGIÇ: .\\core\settings_email_smtp.py
# REV: 1.1 | 2025-09-25 | Hash: d652bc60 | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-YRK6V5KM
# -*- coding: utf-8 -*-
from __future__ import annotations

import os
from .settings_maintenance import *  # noqa

# UTF-8 AUTH LOGIN destekleyen backend
# <<< BLOK SONU: ID:PY-IMP-YRK6V5KM
# >>> BLOK: SETTINGS | Proje ayarlari | ID:PY-SET-F3WT5MEH
EMAIL_BACKEND = "core.email_backend_utf8.Utf8EmailBackend"

SMTP_HOST = os.environ.get("SMTP_HOST", "smtp.office365.com")
SMTP_PORT = int(os.environ.get("SMTP_PORT", "587"))
SMTP_USER = os.environ.get("SMTP_USER", "")
SMTP_PASS = os.environ.get("SMTP_PASS", "")

_use_ssl = os.environ.get("SMTP_SSL", "0").lower() in ("1", "true", "yes", "on")
_use_tls = os.environ.get("SMTP_TLS", "1").lower() in ("1", "true", "yes", "on") and not _use_ssl

EMAIL_HOST = SMTP_HOST
EMAIL_PORT = SMTP_PORT
EMAIL_HOST_USER = SMTP_USER
EMAIL_HOST_PASSWORD = SMTP_PASS
EMAIL_USE_SSL = _use_ssl
EMAIL_USE_TLS = _use_tls
EMAIL_TIMEOUT = int(os.environ.get("SMTP_TIMEOUT", "30"))

DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", SMTP_USER or "noreply@example.com")
SERVER_EMAIL = DEFAULT_FROM_EMAIL
# <<< BLOK SONU: ID:PY-SET-F3WT5MEH
### DOSYA BİTİŞ: settings_email_smtp.py

### DOSYA BAŞLANGIÇ: .\\maintenance\management\commands\bootreport_doctor.py
# REV: 1.1 | 2025-09-25 | Hash: cb94ad93 | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-1QVHDB8X
# -*- coding: utf-8 -*-
from __future__ import annotations
import os
import json
import traceback
from django.core.management.base import BaseCommand
from django.conf import settings

# <<< BLOK SONU: ID:PY-IMP-1QVHDB8X
# >>> BLOK: COMMAND | Komut | ID:PY-COM-4A13QPRK
class Command(BaseCommand):
    help = "Bootreport teşhis komutu: adım adım çalıştırır, klasörleri oluşturur, ayrıntılı çıktı verir."

    def handle(self, *args, **opts):
        base_dir = str(getattr(settings, "BASE_DIR", os.getcwd()))
        var_dir = os.path.join(base_dir, "var")
        json_path = os.path.join(var_dir, "bootreport.json")
        txt_path  = os.path.join(var_dir, "bootreport.txt")

        self.stdout.write(self.style.NOTICE(f"[1/5] BASE_DIR = {base_dir}"))
        self.stdout.write(self.style.NOTICE(f"[2/5] VAR DIR  = {var_dir} (oluşturulacak)"))

        try:
            os.makedirs(var_dir, exist_ok=True)
            self.stdout.write(self.style.SUCCESS(f"  -> OK: {var_dir}"))
        except Exception as e:
            self.stderr.write(f"  -> ERROR mkdir: {e!r}")
            self.stderr.write("  -> Çıkılıyor.")
            return

        self.stdout.write(self.style.NOTICE("[3/5] safe_write_boot_report() çağrılıyor"))
        try:
            from maintenance.bootreport import safe_write_boot_report
        except Exception as e:
            self.stderr.write(f"IMPORT ERROR: maintenance.bootreport -> {e!r}")
            traceback.print_exc()
            return

        # Debug bayrağı aç
        os.environ["BOOTREPORT_DEBUG"] = "1"

        try:
            safe_write_boot_report()
            self.stdout.write(self.style.SUCCESS("  -> safe_write_boot_report() çağrısı tamamlandı"))
        except Exception as e:
            self.stderr.write(f"RUN ERROR: {e!r}")
            traceback.print_exc()
            return

        self.stdout.write(self.style.NOTICE("[4/5] Dosya var mı kontrol"))
        ok_json = os.path.exists(json_path)
        ok_txt  = os.path.exists(txt_path)
        self.stdout.write(f"  JSON exists: {ok_json}  -> {json_path}")
        self.stdout.write(f"  TXT  exists: {ok_txt}   -> {txt_path}")

        if not (ok_json and ok_txt):
            self.stderr.write("  -> Dosyalar oluşmadı. Bootreport içinde bir istisna yakalanıp yutulmuş olabilir.")
            self.stderr.write("  -> Yukarıda traceback görmediysen BOOTREPORT_DEBUG=1 ile tekrar dene veya dosyayı kontrol et.")
            return

        self.stdout.write(self.style.NOTICE("[5/5] Kısa özet"))
        try:
            with open(json_path, "r", encoding="utf-8") as f:
                data = json.load(f)
            py = data.get("python", {}).get("version", "")
            dj = data.get("django", {}).get("version", "")
            root = data.get("project", {}).get("root_urlconf", "")
            apps = len(data.get("apps", {}).get("installed_apps", []))
            urls = len(data.get("urls", []))
            models = len(data.get("models", []))
            sig = data.get("signature", {}).get("short", "")
            self.stdout.write(self.style.SUCCESS(
                f"OK: Python={py.split()[0] if py else '-'} Django={dj} Apps={apps} Urls={urls} Models={models} Sig={sig}"
            ))
        except Exception as e:
            self.stderr.write(f"READ JSON ERROR: {e!r}")
            traceback.print_exc()
# <<< BLOK SONU: ID:PY-COM-4A13QPRK
### DOSYA BİTİŞ: bootreport_doctor.py

### DOSYA BAŞLANGIÇ: .\\core\asgi.py
# REV: 1.1 | 2025-09-25 | Hash: b04a2229 | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-Y1X1MS06
# <<< BLOK SONU: ID:PY-IMP-Y1X1MS06
# >>> BLOK: HELPERS | Yardimci fonksiyonlar | ID:PY-HEL-QZ5YNE7P
"""
ASGI config for core project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

application = get_asgi_application()
# <<< BLOK SONU: ID:PY-HEL-QZ5YNE7P
### DOSYA BİTİŞ: asgi.py

### DOSYA BAŞLANGIÇ: .\\core\email_backend_utf8.py
# REV: 1.1 | 2025-09-25 | Hash: ff6475bc | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-09RC30Y6
# -*- coding: utf-8 -*-
from __future__ import annotations

import base64
import smtplib
# <<< BLOK SONU: ID:PY-IMP-09RC30Y6
# >>> BLOK: HELPERS | Yardimci fonksiyonlar | ID:PY-HEL-CMHKV681
from django.core.mail.backends.smtp import EmailBackend as DjangoEmailBackend


class Utf8EmailBackend(DjangoEmailBackend):
    """
    SMTP AUTH LOGIN sırasında kullanıcı/parolayı UTF-8 ile base64'leyip gönderir.
    smtplib.login() ASCII dayatmasına takılmamak için LOGIN akışını elle yapıyoruz.
    """

    def open(self):
        if self.connection:
            return False

        try:
            if self.use_ssl:
                self.connection = smtplib.SMTP_SSL(
                    self.host, self.port, timeout=self.timeout
                )
            else:
                self.connection = smtplib.SMTP(
                    self.host, self.port, timeout=self.timeout
                )

            self.connection.ehlo()
            if self.use_tls:
                self.connection.starttls()
                self.connection.ehlo()

            if self.username and self.password:
                self._login_utf8(self.username, self.password)

            return True
        except Exception:
            if self.connection:
                try:
                    self.connection.quit()
                except Exception:
                    pass
            self.connection = None
            raise

    def _login_utf8(self, username: str, password: str) -> None:
        # AUTH LOGIN
        code, resp = self.connection.docmd("AUTH", "LOGIN")
        if code != 334:
            raise smtplib.SMTPAuthenticationError(code, resp)

        # Username (utf-8 -> base64 -> ascii string)
        u = base64.b64encode(username.encode("utf-8")).decode("ascii")
        code, resp = self.connection.docmd(u)
        if code != 334:
            raise smtplib.SMTPAuthenticationError(code, resp)

        # Password (utf-8 -> base64 -> ascii string)
        p = base64.b64encode(password.encode("utf-8")).decode("ascii")
        code, resp = self.connection.docmd(p)
        if code != 235:
            raise smtplib.SMTPAuthenticationError(code, resp)
# <<< BLOK SONU: ID:PY-HEL-CMHKV681
### DOSYA BİTİŞ: email_backend_utf8.py

### DOSYA BAŞLANGIÇ: .\\manage.py
# REV: 1.1 | 2025-09-25 | Hash: 1cc1418a | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-XX3Z0KQ7
#!/usr/bin/env python
# <<< BLOK SONU: ID:PY-IMP-XX3Z0KQ7
# >>> BLOK: HELPERS | Yardimci fonksiyonlar | ID:PY-HEL-JNKMP1V0
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
# <<< BLOK SONU: ID:PY-HEL-JNKMP1V0
### DOSYA BİTİŞ: manage.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\manage.py
# REV: 1.1 | 2025-09-25 | Hash: 1cc1418a | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-XX3Z0KQ7
#!/usr/bin/env python
# <<< BLOK SONU: ID:PY-IMP-XX3Z0KQ7
# >>> BLOK: HELPERS | Yardimci fonksiyonlar | ID:PY-HEL-JNKMP1V0
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
# <<< BLOK SONU: ID:PY-HEL-JNKMP1V0
### DOSYA BİTİŞ: manage.py

### DOSYA BAŞLANGIÇ: .\\scripts\django_check.ps1
# REV: 1.3 | 2025-09-24 | Hash: b9028e1a | Parça: 1/1
# Her dosya başında revizyon bilgisi sistemi olacak.
# >>> BLOK: DJCHECK | manage.py check (soft destekli) | ID:PS1-DJC-7M4N2Q9X
Param(
  [string]$Settings = "core.settings",
  [switch]$Soft
)
$ErrorActionPreference = "Stop"

if (!(Test-Path ".\manage.py")) {
  Write-Host "manage.py yok; atlandi."
  exit 0
}

$here = (Get-Location).Path
$env:PYTHONPATH = "$here"
$env:DJANGO_SETTINGS_MODULE = $Settings

try {
  python -c "import sys; print('Python OK', sys.version)"
  python -c "import django; print('Django OK', django.get_version())"
  python manage.py check -v 2 --traceback
  Write-Host "Django check OK"
} catch {
  Write-Host "Django check FAILED:"
  Write-Host $_
  if ($Soft) { exit 0 } else { throw }
}
# <<< BLOK SONU: ID:PS1-DJC-7M4N2Q9X
### DOSYA BİTİŞ: django_check.ps1

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\scripts\django_check.ps1
# REV: 1.3 | 2025-09-24 | Hash: b9028e1a | Parça: 1/1
# Her dosya başında revizyon bilgisi sistemi olacak.
# >>> BLOK: DJCHECK | manage.py check (soft destekli) | ID:PS1-DJC-7M4N2Q9X
Param(
  [string]$Settings = "core.settings",
  [switch]$Soft
)
$ErrorActionPreference = "Stop"

if (!(Test-Path ".\manage.py")) {
  Write-Host "manage.py yok; atlandi."
  exit 0
}

$here = (Get-Location).Path
$env:PYTHONPATH = "$here"
$env:DJANGO_SETTINGS_MODULE = $Settings

try {
  python -c "import sys; print('Python OK', sys.version)"
  python -c "import django; print('Django OK', django.get_version())"
  python manage.py check -v 2 --traceback
  Write-Host "Django check OK"
} catch {
  Write-Host "Django check FAILED:"
  Write-Host $_
  if ($Soft) { exit 0 } else { throw }
}
# <<< BLOK SONU: ID:PS1-DJC-7M4N2Q9X
### DOSYA BİTİŞ: django_check.ps1

### DOSYA BAŞLANGIÇ: .\\scripts\open_mail_draft.ps1
# REV: 1.0 | 2025-09-24 | Hash: 611925f3 | Parça: 1/1
# scripts/open_mail_draft.ps1

param(
  [string[]] $To,
  [string[]] $Cc,
  [string[]] $Bcc,

  [Parameter(Mandatory = $true)]
  [string]   $Subject,

  [Parameter(Mandatory = $true)]
  [string]   $BodyText,

  [string[]] $Attachments,     # Varsayılanı gövdede vereceğiz
  [switch]   $AsHtml,          # HTML gövde isterse
  [string]   $FromAccount      # Outlook profilindeki gönderen hesap
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

# Varsayılanlar
if (-not $Attachments) { $Attachments = @() }
$asHtmlFlag = $PSBoundParameters.ContainsKey('AsHtml') -and $AsHtml.IsPresent

function Get-OutlookApp {
  try { [Runtime.InteropServices.Marshal]::GetActiveObject('Outlook.Application') }
  catch { New-Object -ComObject Outlook.Application }
}

$ol = Get-OutlookApp
$mail = $ol.CreateItem(0)  # olMailItem

# Gönderen hesabı (varsa)
if ($FromAccount) {
  $acct = @($ol.Session.Accounts) | Where-Object { $_.SmtpAddress -ieq $FromAccount }
  if ($acct) { $mail.SendUsingAccount = $acct }
  else { Write-Warning "Outlook profilinde bu gönderici hesabı yok: $FromAccount" }
}

# Alıcılar
if ($To)  { $mail.To  = ($To  -join '; ') }
if ($Cc)  { $mail.CC  = ($Cc  -join '; ') }
if ($Bcc) { $mail.BCC = ($Bcc -join '; ') }

# Konu
$mail.Subject = $Subject

# Gövde
if ($asHtmlFlag) {
  Add-Type -AssemblyName System.Web
  $enc = [System.Web.HttpUtility]::HtmlEncode($BodyText)
  $mail.HTMLBody = "<pre style='font-family:Segoe UI Emoji, Segoe UI, Arial; font-size:11pt; white-space:pre-wrap;'>$enc</pre>"
} else {
  $mail.Body = $BodyText
}

# Ekler
foreach ($a in $Attachments) {
  if ([string]::IsNullOrWhiteSpace($a)) { continue }
  if (-not (Test-Path $a)) {
    Write-Warning "Ek bulunamadı: $a"
    continue
  }
  $mail.Attachments.Add((Resolve-Path $a).Path) | Out-Null
}

# Taslağı aç
$mail.Display() | Out-Null
### DOSYA BİTİŞ: open_mail_draft.ps1

### DOSYA BAŞLANGIÇ: .\\scripts\register_task.ps1
# REV: 1.0 | 2025-09-24 | Hash: 96858568 | Parça: 1/1
<#
  Windows Task Scheduler kaydı (PowerShell ScheduledTasks modülü ile)
  Çalışma klasörü, tetikleyici ve haklar düzgün ayarlanır.
#>

$ProjectRoot = "C:\dev\bakim_kalibrasyon"
$CmdPath     = Join-Path $ProjectRoot "scripts\calibration_reminders.cmd"
$TaskName    = "bk_calibration_reminders"
$Hour        = 9     # 09:00
$Minute      = 0

# Erişim: Mevcut kullanıcı ile en yüksek ayrıcalık
$Principal = New-ScheduledTaskPrincipal -UserId $env:USERNAME -LogonType Interactive -RunLevel Highest

# GÜNLÜK tetikleyici (09:00)
$Trigger   = New-ScheduledTaskTrigger -Daily -At ([datetime]::Today.AddHours($Hour).AddMinutes($Minute).TimeOfDay)

# Eylem: .cmd sarmalayıcıyı çalıştır
$Action    = New-ScheduledTaskAction -Execute $CmdPath

# Görev tanımı
$Settings  = New-ScheduledTaskSettingsSet -Compatibility Win8 -AllowStartIfOnBatteries -StartWhenAvailable
$Task      = New-ScheduledTask -Action $Action -Principal $Principal -Trigger $Trigger -Settings $Settings

# Var ise sil (force) ve yeniden oluştur
if (Get-ScheduledTask -TaskName $TaskName -ErrorAction SilentlyContinue) {
  Unregister-ScheduledTask -TaskName $TaskName -Confirm:$false
}
Register-ScheduledTask -TaskName $TaskName -InputObject $Task | Out-Null

Write-Host "OK -> Task '$TaskName' registered to run daily at $Hour:$('{0:00}' -f $Minute)."
### DOSYA BİTİŞ: register_task.ps1

### DOSYA BAŞLANGIÇ: .\\scripts\list-changes.ps1
# REV: 1.0 | 2025-09-24 | Hash: 76692279 | Parça: 1/1
param(
  [Parameter(Mandatory=$true)] [string]$Root,
  [Parameter(Mandatory=$true)] [string]$Start,
  [Parameter(Mandatory=$true)] [string]$End
)

# ---- Yardimci: bircok formati tolere eden tarih parse ----
function Parse-Dt([string]$Text) {
  $formats = @(
    'dd.MM.yyyy HH:mm','yyyy-MM-dd HH:mm','dd/MM/yyyy HH:mm',
    'dd.MM.yyyy HH:mm:ss','yyyy-MM-dd HH:mm:ss','dd/MM/yyyy HH:mm:ss'
  )
  foreach ($f in $formats) {
    try {
      return [datetime]::ParseExact($Text, $f, [Globalization.CultureInfo]::InvariantCulture)
    } catch {}
  }
  try { return [datetime]::Parse($Text, [Globalization.CultureInfo]::InvariantCulture) } catch {
    throw "Tarih/saat formati hatali: '$Text'. Ornek: '31.08.2025 10:00' veya '2025-08-31 10:00'"
  }
}

$startDt = Parse-Dt $Start
$endDt   = Parse-Dt $End

Write-Host "[INFO] KOK: $Root"
Write-Host "[INFO] TARiH: $($startDt.ToString('yyyy-MM-dd HH:mm')) -> $($endDt.ToString('yyyy-MM-dd HH:mm'))"

# ---- Filtreler ----
$excludeDirs = @('\.git\','\venv\','\__pycache__\','\node_modules\','\var\','.pytest_cache\','.mypy_cache\')
$includeExt  = @('.py','.html','.css','.js','.ts','.tsx','.json','.yml','.yaml','.toml','.ini',
                 '.cfg','.md','.sql','.ps1','.bat')

# ---- Dosyalari topla ----
$all = Get-ChildItem -Path $Root -Recurse -File -ErrorAction SilentlyContinue

# Dizin filtreleme
$filtered = $all | Where-Object {
  $p = $_.FullName
  -not ($excludeDirs | Where-Object { $p -match [regex]::Escape($_) })
}

# Zaman araligi
$changed = $filtered | Where-Object {
  ($_.LastWriteTime -ge $startDt) -and ($_.LastWriteTime -le $endDt)
}

# Sadece belirli uzantilar (binary karmasini engeller)
$changed = $changed | Where-Object { $includeExt -contains $_.Extension.ToLower() }

# ---- Cikti ----
"=== EN TAZE KODLAR / DEGİSEN-DOSYALAR ==="
"Root        : $Root"
"Interval    : $($startDt.ToString('yyyy-MM-dd HH:mm')) -> $($endDt.ToString('yyyy-MM-dd HH:mm'))"
"Generated   : $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
""
"{0,-20}  {1,10}  {2}" -f "LastWriteTime","Size(KB)","RelativePath"
"{0,-20}  {1,10}  {2}" -f "-------------------","---------","------------------------------"

$rootFixed = (Resolve-Path $Root).Path
$changed | Sort-Object LastWriteTime | ForEach-Object {
  $rel = $_.FullName.Substring($rootFixed.Length).TrimStart('\','/')
  $kb  = [Math]::Round(($_.Length/1KB),2)
  "{0,-20}  {1,10}  {2}" -f ($_.LastWriteTime.ToString('yyyy-MM-dd HH:mm')), $kb, $rel
}

# Toplam sayi
""
"Toplam dosya: {0}" -f ($changed | Measure-Object | Select-Object -ExpandProperty Count)
### DOSYA BİTİŞ: list-changes.ps1

### DOSYA BAŞLANGIÇ: .\\scripts\calibration_reminder.ps1
# REV: 1.0 | 2025-09-24 | Hash: 504d2bb6 | Parça: 1/1
param(
  [string]$Days = "30,60,90",
  [string]$Roles = "Bakım Yöneticisi",
  [ValidateSet("csv","xlsx","both")][string]$Attach = "both",
  [switch]$DryRun,
  [string]$Settings = "core.settings_maintenance"  # <— yeni: hangi settings kullanılacak
)

$ErrorActionPreference = "Stop"

& "$env:WINDIR\System32\chcp.com" 65001 > $null
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
[Console]::InputEncoding  = [System.Text.Encoding]::UTF8
$env:PYTHONIOENCODING = "utf-8"

$proj = "C:\dev\bakim_kalibrasyon"
if (-not (Test-Path $proj)) { Write-Error "[ERR] Proje klasörü yok: $proj"; exit 1 }
Set-Location $proj

$venv = ".\venv\Scripts\Activate.ps1"
if (-not (Test-Path $venv)) { Write-Error "[ERR] venv bulunamadı: $venv"; exit 1 }
. $venv

# günler
$daysList = @()
foreach ($p in $Days.Split(",")) { $p2 = $p.Trim(); if ($p2 -match '^\d+$') { $daysList += [int]$p2 } }
if ($daysList.Count -eq 0) { $daysList = @(30) }

$rolesArg  = $Roles
$attachArg = $Attach
$extraArgs = ""
if ($DryRun) { $extraArgs = "--dry-run --no-asset-emails" }

$cmd = "python manage.py calibration_reminder --days " + ($daysList -join ' ') + `
       " --roles `"${rolesArg}`" --attach $attachArg --settings=$Settings $extraArgs"

Write-Host "[INFO] Çalıştırılıyor: $cmd"
cmd /c $cmd
$ec = $LASTEXITCODE
Write-Host "[INFO] ExitCode=$ec"
exit $ec
### DOSYA BİTİŞ: calibration_reminder.ps1

### DOSYA BAŞLANGIÇ: .\\scripts\bootreport_on_activate.ps1
# REV: 1.0 | 2025-09-24 | Hash: d37abaeb | Parça: 1/1
# Bootreport'ı venv aktivasyonunda üretir. Logu var\bootreport-activate-YYYYmmdd-HHMMSS.log'a yazar.
param()

$PRJ = Split-Path -Parent $MyInvocation.MyCommand.Path
# dosya konumumuz /scripts ise proje kökü bir üst dizin
$PRJ = Split-Path -Parent $PRJ

$PY  = Join-Path $PRJ "venv\Scripts\python.exe"
$DT  = Get-Date -Format "yyyyMMdd-HHmmss"
$LOGDIR = Join-Path $PRJ "var"
New-Item -ItemType Directory -Force -Path $LOGDIR | Out-Null
$LOG = Join-Path $LOGDIR "bootreport-activate-$DT.log"

# Ortam
$env:BOOTREPORT_DEBUG = "0"

# settings_maintenance ile çalıştır
& $PY "$PRJ\manage.py" bootreport_dump --settings=core.settings_maintenance *>> $LOG
### DOSYA BİTİŞ: bootreport_on_activate.ps1

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\scripts\open_mail_draft.ps1
# REV: 1.0 | 2025-09-24 | Hash: 611925f3 | Parça: 1/1
# scripts/open_mail_draft.ps1

param(
  [string[]] $To,
  [string[]] $Cc,
  [string[]] $Bcc,

  [Parameter(Mandatory = $true)]
  [string]   $Subject,

  [Parameter(Mandatory = $true)]
  [string]   $BodyText,

  [string[]] $Attachments,     # Varsayılanı gövdede vereceğiz
  [switch]   $AsHtml,          # HTML gövde isterse
  [string]   $FromAccount      # Outlook profilindeki gönderen hesap
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

# Varsayılanlar
if (-not $Attachments) { $Attachments = @() }
$asHtmlFlag = $PSBoundParameters.ContainsKey('AsHtml') -and $AsHtml.IsPresent

function Get-OutlookApp {
  try { [Runtime.InteropServices.Marshal]::GetActiveObject('Outlook.Application') }
  catch { New-Object -ComObject Outlook.Application }
}

$ol = Get-OutlookApp
$mail = $ol.CreateItem(0)  # olMailItem

# Gönderen hesabı (varsa)
if ($FromAccount) {
  $acct = @($ol.Session.Accounts) | Where-Object { $_.SmtpAddress -ieq $FromAccount }
  if ($acct) { $mail.SendUsingAccount = $acct }
  else { Write-Warning "Outlook profilinde bu gönderici hesabı yok: $FromAccount" }
}

# Alıcılar
if ($To)  { $mail.To  = ($To  -join '; ') }
if ($Cc)  { $mail.CC  = ($Cc  -join '; ') }
if ($Bcc) { $mail.BCC = ($Bcc -join '; ') }

# Konu
$mail.Subject = $Subject

# Gövde
if ($asHtmlFlag) {
  Add-Type -AssemblyName System.Web
  $enc = [System.Web.HttpUtility]::HtmlEncode($BodyText)
  $mail.HTMLBody = "<pre style='font-family:Segoe UI Emoji, Segoe UI, Arial; font-size:11pt; white-space:pre-wrap;'>$enc</pre>"
} else {
  $mail.Body = $BodyText
}

# Ekler
foreach ($a in $Attachments) {
  if ([string]::IsNullOrWhiteSpace($a)) { continue }
  if (-not (Test-Path $a)) {
    Write-Warning "Ek bulunamadı: $a"
    continue
  }
  $mail.Attachments.Add((Resolve-Path $a).Path) | Out-Null
}

# Taslağı aç
$mail.Display() | Out-Null
### DOSYA BİTİŞ: open_mail_draft.ps1

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\scripts\register_task.ps1
# REV: 1.0 | 2025-09-24 | Hash: 96858568 | Parça: 1/1
<#
  Windows Task Scheduler kaydı (PowerShell ScheduledTasks modülü ile)
  Çalışma klasörü, tetikleyici ve haklar düzgün ayarlanır.
#>

$ProjectRoot = "C:\dev\bakim_kalibrasyon"
$CmdPath     = Join-Path $ProjectRoot "scripts\calibration_reminders.cmd"
$TaskName    = "bk_calibration_reminders"
$Hour        = 9     # 09:00
$Minute      = 0

# Erişim: Mevcut kullanıcı ile en yüksek ayrıcalık
$Principal = New-ScheduledTaskPrincipal -UserId $env:USERNAME -LogonType Interactive -RunLevel Highest

# GÜNLÜK tetikleyici (09:00)
$Trigger   = New-ScheduledTaskTrigger -Daily -At ([datetime]::Today.AddHours($Hour).AddMinutes($Minute).TimeOfDay)

# Eylem: .cmd sarmalayıcıyı çalıştır
$Action    = New-ScheduledTaskAction -Execute $CmdPath

# Görev tanımı
$Settings  = New-ScheduledTaskSettingsSet -Compatibility Win8 -AllowStartIfOnBatteries -StartWhenAvailable
$Task      = New-ScheduledTask -Action $Action -Principal $Principal -Trigger $Trigger -Settings $Settings

# Var ise sil (force) ve yeniden oluştur
if (Get-ScheduledTask -TaskName $TaskName -ErrorAction SilentlyContinue) {
  Unregister-ScheduledTask -TaskName $TaskName -Confirm:$false
}
Register-ScheduledTask -TaskName $TaskName -InputObject $Task | Out-Null

Write-Host "OK -> Task '$TaskName' registered to run daily at $Hour:$('{0:00}' -f $Minute)."
### DOSYA BİTİŞ: register_task.ps1

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\scripts\list-changes.ps1
# REV: 1.0 | 2025-09-24 | Hash: 76692279 | Parça: 1/1
param(
  [Parameter(Mandatory=$true)] [string]$Root,
  [Parameter(Mandatory=$true)] [string]$Start,
  [Parameter(Mandatory=$true)] [string]$End
)

# ---- Yardimci: bircok formati tolere eden tarih parse ----
function Parse-Dt([string]$Text) {
  $formats = @(
    'dd.MM.yyyy HH:mm','yyyy-MM-dd HH:mm','dd/MM/yyyy HH:mm',
    'dd.MM.yyyy HH:mm:ss','yyyy-MM-dd HH:mm:ss','dd/MM/yyyy HH:mm:ss'
  )
  foreach ($f in $formats) {
    try {
      return [datetime]::ParseExact($Text, $f, [Globalization.CultureInfo]::InvariantCulture)
    } catch {}
  }
  try { return [datetime]::Parse($Text, [Globalization.CultureInfo]::InvariantCulture) } catch {
    throw "Tarih/saat formati hatali: '$Text'. Ornek: '31.08.2025 10:00' veya '2025-08-31 10:00'"
  }
}

$startDt = Parse-Dt $Start
$endDt   = Parse-Dt $End

Write-Host "[INFO] KOK: $Root"
Write-Host "[INFO] TARiH: $($startDt.ToString('yyyy-MM-dd HH:mm')) -> $($endDt.ToString('yyyy-MM-dd HH:mm'))"

# ---- Filtreler ----
$excludeDirs = @('\.git\','\venv\','\__pycache__\','\node_modules\','\var\','.pytest_cache\','.mypy_cache\')
$includeExt  = @('.py','.html','.css','.js','.ts','.tsx','.json','.yml','.yaml','.toml','.ini',
                 '.cfg','.md','.sql','.ps1','.bat')

# ---- Dosyalari topla ----
$all = Get-ChildItem -Path $Root -Recurse -File -ErrorAction SilentlyContinue

# Dizin filtreleme
$filtered = $all | Where-Object {
  $p = $_.FullName
  -not ($excludeDirs | Where-Object { $p -match [regex]::Escape($_) })
}

# Zaman araligi
$changed = $filtered | Where-Object {
  ($_.LastWriteTime -ge $startDt) -and ($_.LastWriteTime -le $endDt)
}

# Sadece belirli uzantilar (binary karmasini engeller)
$changed = $changed | Where-Object { $includeExt -contains $_.Extension.ToLower() }

# ---- Cikti ----
"=== EN TAZE KODLAR / DEGİSEN-DOSYALAR ==="
"Root        : $Root"
"Interval    : $($startDt.ToString('yyyy-MM-dd HH:mm')) -> $($endDt.ToString('yyyy-MM-dd HH:mm'))"
"Generated   : $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
""
"{0,-20}  {1,10}  {2}" -f "LastWriteTime","Size(KB)","RelativePath"
"{0,-20}  {1,10}  {2}" -f "-------------------","---------","------------------------------"

$rootFixed = (Resolve-Path $Root).Path
$changed | Sort-Object LastWriteTime | ForEach-Object {
  $rel = $_.FullName.Substring($rootFixed.Length).TrimStart('\','/')
  $kb  = [Math]::Round(($_.Length/1KB),2)
  "{0,-20}  {1,10}  {2}" -f ($_.LastWriteTime.ToString('yyyy-MM-dd HH:mm')), $kb, $rel
}

# Toplam sayi
""
"Toplam dosya: {0}" -f ($changed | Measure-Object | Select-Object -ExpandProperty Count)
### DOSYA BİTİŞ: list-changes.ps1

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\scripts\bootreport_on_activate.ps1
# REV: 1.0 | 2025-09-24 | Hash: d37abaeb | Parça: 1/1
# Bootreport'ı venv aktivasyonunda üretir. Logu var\bootreport-activate-YYYYmmdd-HHMMSS.log'a yazar.
param()

$PRJ = Split-Path -Parent $MyInvocation.MyCommand.Path
# dosya konumumuz /scripts ise proje kökü bir üst dizin
$PRJ = Split-Path -Parent $PRJ

$PY  = Join-Path $PRJ "venv\Scripts\python.exe"
$DT  = Get-Date -Format "yyyyMMdd-HHmmss"
$LOGDIR = Join-Path $PRJ "var"
New-Item -ItemType Directory -Force -Path $LOGDIR | Out-Null
$LOG = Join-Path $LOGDIR "bootreport-activate-$DT.log"

# Ortam
$env:BOOTREPORT_DEBUG = "0"

# settings_maintenance ile çalıştır
& $PY "$PRJ\manage.py" bootreport_dump --settings=core.settings_maintenance *>> $LOG
### DOSYA BİTİŞ: bootreport_on_activate.ps1

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\scripts\calibration_reminder.ps1
# REV: 1.0 | 2025-09-24 | Hash: 504d2bb6 | Parça: 1/1
param(
  [string]$Days = "30,60,90",
  [string]$Roles = "Bakım Yöneticisi",
  [ValidateSet("csv","xlsx","both")][string]$Attach = "both",
  [switch]$DryRun,
  [string]$Settings = "core.settings_maintenance"  # <— yeni: hangi settings kullanılacak
)

$ErrorActionPreference = "Stop"

& "$env:WINDIR\System32\chcp.com" 65001 > $null
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
[Console]::InputEncoding  = [System.Text.Encoding]::UTF8
$env:PYTHONIOENCODING = "utf-8"

$proj = "C:\dev\bakim_kalibrasyon"
if (-not (Test-Path $proj)) { Write-Error "[ERR] Proje klasörü yok: $proj"; exit 1 }
Set-Location $proj

$venv = ".\venv\Scripts\Activate.ps1"
if (-not (Test-Path $venv)) { Write-Error "[ERR] venv bulunamadı: $venv"; exit 1 }
. $venv

# günler
$daysList = @()
foreach ($p in $Days.Split(",")) { $p2 = $p.Trim(); if ($p2 -match '^\d+$') { $daysList += [int]$p2 } }
if ($daysList.Count -eq 0) { $daysList = @(30) }

$rolesArg  = $Roles
$attachArg = $Attach
$extraArgs = ""
if ($DryRun) { $extraArgs = "--dry-run --no-asset-emails" }

$cmd = "python manage.py calibration_reminder --days " + ($daysList -join ' ') + `
       " --roles `"${rolesArg}`" --attach $attachArg --settings=$Settings $extraArgs"

Write-Host "[INFO] Çalıştırılıyor: $cmd"
cmd /c $cmd
$ec = $LASTEXITCODE
Write-Host "[INFO] ExitCode=$ec"
exit $ec
### DOSYA BİTİŞ: calibration_reminder.ps1

### DOSYA BAŞLANGIÇ: .\\run_maintenance_dev.ps1
# REV: 1.0 | 2025-09-24 | Hash: ca844bfd | Parça: 1/1
#Requires -Version 5.1
param(
  [switch]$Seed,     # örn: .\run_maintenance_dev.ps1 -Seed
  [switch]$Doctor    # örn: .\run_maintenance_dev.ps1 -Doctor
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

function Info($msg){ Write-Host "[INFO] $msg" -ForegroundColor Cyan }
function Ok($msg){ Write-Host "[OK]   $msg" -ForegroundColor Green }
function Warn($msg){ Write-Host "[WARN] $msg" -ForegroundColor Yellow }
function Err($msg){ Write-Host "[ERR]  $msg" -ForegroundColor Red }

function Run-Py([string]$Code, [string]$Label = "python") {
  $tmp = [System.IO.Path]::GetTempFileName()
  $py  = [System.IO.Path]::ChangeExtension($tmp, ".py")
  Set-Content -Path $py -Value $Code -Encoding UTF8
  & python $py
  $ec = $LASTEXITCODE
  Remove-Item -Force $py,$tmp -ErrorAction SilentlyContinue
  if ($ec -ne 0) { throw "$Label failed (exitcode=$ec)" }
}

# 1) Proje klasörüne geç
$proj = "C:\dev\bakim_kalibrasyon"
if (-not (Test-Path $proj)) { Err "Proje klasoru yok: $proj"; Read-Host "Kapatmak için Enter"; exit 1 }
Set-Location $proj

# 2) venv kontrol
$act = ".\venv\Scripts\Activate.ps1"
if (-not (Test-Path $act)) {
  Err "venv bulunamadi: $act"
  Write-Host "[TIP] Olusturmak icin:  python -m venv venv" -ForegroundColor Yellow
  Read-Host "Kapatmak için Enter"
  exit 1
}

# 3) venv aktif et
. $act
if (-not $env:VIRTUAL_ENV) { Err "venv aktive edilemedi"; Read-Host "Kapatmak için Enter"; exit 1 }

# 4) Django ayari (maintenance profili)
$env:DJANGO_SETTINGS_MODULE = "core.settings_maintenance"
$env:DATABASE_URL = ""
$env:PYTHONIOENCODING = "utf-8"

# ⭐ 4.1) Proje kökünü Python yoluna ekle (core modülünü bulsun)
$env:PYTHONPATH = $proj

# 5) Hangi Python ve settings?  (GEÇİCİ .py ile)
$codeInfo = @'
import sys, os
print("PYTHON:", sys.executable)
print("CWD:", os.getcwd())
print("PYTHONPATH has proj?:", any(p.replace("\\\\","\\") == os.getcwd() for p in sys.path))
'@
Run-Py $codeInfo "python info"

$codeDjango = @'
import os, sys
# Emniyet: çalışma dizinini sys.path'e öne ekle
sys.path.insert(0, os.getcwd())
import django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", os.environ.get("DJANGO_SETTINGS_MODULE","core.settings_maintenance"))
django.setup()
from django.conf import settings
print("SETTINGS:", settings.SETTINGS_MODULE)
print("DB ENGINE:", settings.DATABASES["default"]["ENGINE"])
'@
Run-Py $codeDjango "django setup"

# 6) migrate (idempotent)
Info "migrate calisiyor..."
& python manage.py migrate --settings=$env:DJANGO_SETTINGS_MODULE
if ($LASTEXITCODE -ne 0) { throw "migrate hatasi (exitcode=$LASTEXITCODE)" }

# 7) (opsiyonel) demo veri
if ($Seed) {
  Info "seed_demo calisiyor..."
  & python manage.py seed_demo --settings=$env:DJANGO_SETTINGS_MODULE --count 80
  if ($LASTEXITCODE -ne 0) { Warn "seed_demo basarisiz (exitcode=$LASTEXITCODE)" }
}

# 8) (opsiyonel) bootreport dogrulama
if ($Doctor) {
  Info "bootreport_doctor calisiyor..."
  & python manage.py bootreport_doctor --settings=$env:DJANGO_SETTINGS_MODULE
}

# 9) server
Ok "http://127.0.0.1:8003/ adresinde baslatiliyor..."
& python manage.py runserver 127.0.0.1:8003 --settings=$env:DJANGO_SETTINGS_MODULE --noreload
### DOSYA BİTİŞ: run_maintenance_dev.ps1

