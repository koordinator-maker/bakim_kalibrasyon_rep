import { test, expect } from '@playwright/test';

const BASE = process.env.BASE_URL || 'http://127.0.0.1:8010';

test('E104 - Equipment oluştur ve sil (temizlik)', async ({ page }) => {
  await page.goto(`${BASE}/admin/maintenance/equipment/`, { waitUntil: 'domcontentloaded' });

  /* ensure logged in (fallback) */
  if (/\/admin\/login\//.test(page.url())) {
    const uVal = process.env.ADMIN_USER ?? "admin";
    const pVal = process.env.ADMIN_PASS ?? "admin";

    let u = page.locator('#id_username, input[name="username"], input[name="email"], input#id_user, input[name="user"]').first();
    const uByPh = page.getByPlaceholder(/kullanıcı adı|kullanici adi|email|e-?posta|username/i).first();
    const uByLb = page.getByLabel(/kullanıcı adı|kullanici adi|username|email|e-?posta/i).first();
    if (!(await u.isVisible().catch(()=>false))) u = (await uByPh.isVisible().catch(()=>false)) ? uByPh : uByLb;

    let p = page.locator('#id_password, input[name="password"], input[type="password"]').first();
    const pByPh = page.getByPlaceholder(/parola|şifre|sifre|password/i).first();
    const pByLb = page.getByLabel(/parola|şifre|sifre|password/i).first();
    if (!(await p.isVisible().catch(()=>false))) p = (await pByPh.isVisible().catch(()=>false)) ? pByPh : pByLb;

    try { await u.fill(uVal, { timeout: 10000 }); } catch {}
    try { await p.fill(pVal, { timeout: 10000 }); } catch {}

    const btn = page.getByRole('button', { name: /log in|giriş|oturum|sign in|submit|login/i }).first();
    if (await btn.isVisible().catch(()=>false)) { await btn.click(); }
    else {
      const submit = page.locator('input[type="submit"], button[type="submit"]').first();
      if (await submit.isVisible().catch(()=>false)) { await submit.click(); }
      else { await p.press('Enter').catch(()=>{}); }
    }
    await page.waitForLoadState('domcontentloaded').catch(()=>{});
  }
  /* end ensure logged in (fallback) */

  // "Ekle" sayfasına git
  await page.goto(`${BASE}/admin/maintenance/equipment/add/`, { waitUntil: 'domcontentloaded' });

  // İsim alanını doldur
  const name = `PW-AUTO-${Date.now()}`;
  const nameField =
    page.getByLabel(/Ekipman Adı|Ekipman Adi|Equipment Name|Name/i).first()
      .or(page.locator('#id_name, [name="name"]').first());
  await nameField.fill(name);

  // Kaydet
  const saveBtn = page.getByRole('button', { name: /kaydet|save/i }).first()
    .or(page.locator('input[type="submit"], button[type="submit"]').first());
  await saveBtn.click();

  // Liste sayfasında göründüğünü doğrula
  await expect(page.getByText(name)).toBeVisible({ timeout: 5000 });

  // Silme akışı (detay sayfasına veya listeden)
  const rowLink = page.getByRole('link', { name: new RegExp(name) }).first();
  if (await rowLink.isVisible().catch(()=>false)) {
    await rowLink.click();
  }

  // "Sil" düğmesi/bağlantısı
  const del = page.getByRole('link', { name: /delete|sil/i }).first()
    .or(page.getByRole('button', { name: /delete|sil/i }).first());
  await del.click().catch(()=>{}); // bazı adminlerde linktir

  // Onay
  const confirm = page.getByRole('button', { name: /yes|evet|confirm|ok/i }).first()
    .or(page.locator('input[type="submit"][value*="Yes" i], input[type="submit"][value*="Evet" i]').first());
  await confirm.click().catch(()=>{});

  // Artık listede görünmemeli (best-effort)
  await page.goto(`${BASE}/admin/maintenance/equipment/`, { waitUntil: 'domcontentloaded' });
  await expect(page.getByText(name)).toHaveCount(0);
});
