import { test, expect } from '@playwright/test';

const BASE = process.env.BASE_URL || 'http://127.0.0.1:8010';

test('E104 - Equipment oluştur ve sil (temizlik)', async ({ page }) => {
  // Add formuna git
  await page.goto(`${BASE}/admin/maintenance/equipment/add/`, { waitUntil: 'domcontentloaded' });

  /* ensure logged in (fallback) */
  if (/\/admin\/login\//.test(page.url())) {
    const uVal = process.env.ADMIN_USER ?? "admin";
    const pVal = process.env.ADMIN_PASS ?? "admin";

    let u = page.locator('#id_username, input[name="username"], input[name="email"], input#id_user, input[name="user"]').first();
    const uByPh = page.getByPlaceholder(/kullanıcı adı|kullanici adi|email|e-?posta|username/i).first();
    const uByLb = page.getByLabel(/kullanıcı adı|kullanici adi|username|email|e-?posta/i).first();
    if (!(await u.isVisible().catch(()=>false))) u = (await uByPh.isVisible().catch(()=>false)) ? uByPh : uByLb;

    let p = page.locator('#id_password, input[name="password"], input[type="password"]').first();
    const pByPh = page.getByPlaceholder(/parola|şifre|sifre|password/i).first();
    const pByLb = page.getByLabel(/parola|şifre|sifre|password/i).first();
    if (!(await p.isVisible().catch(()=>false))) p = (await pByPh.isVisible().catch(()=>false)) ? pByPh : pByLb;

    try { await u.fill(uVal, { timeout: 10000 }); } catch {}
    try { await p.fill(pVal, { timeout: 10000 }); } catch {}

    const btn = page.getByRole('button', { name: /log in|giriş|oturum|sign in|submit|login/i }).first();
    if (await btn.isVisible().catch(()=>false)) { await btn.click(); }
    else {
      const submit = page.locator('input[type="submit"], button[type="submit"]').first();
      if (await submit.isVisible().catch(()=>false)) { await submit.click(); }
      else { await p.press('Enter').catch(()=>{}); }
    }
    await page.waitForLoadState('domcontentloaded').catch(()=>{});
  }
  /* end ensure logged in (fallback) */

  // Form kapsamı
  await expect(page).toHaveURL(/\/admin\/maintenance\/equipment\/add\/.*/);
  const form = page.locator('form').first();

  // Zorunlu alan: İsim
  const name = `PW-AUTO-${Date.now()}`;
  let nameInput = page.getByLabel(/Ekipman Adı|Ekipman Adi|Equipment Name|Name/i).first();
  if (!(await nameInput.count())) {
    nameInput = form.locator('#id_name, [name="name"]').first();
  }
  await nameInput.fill(name);

  // Kaydet (sağlam seçim)
  const saveCandidates = [
    form.locator('.submit-row input[name="_save"]').first(),
    form.getByRole('button', { name: /^save$|^kaydet$/i }).first(),
    form.locator('input[type="submit"], button[type="submit"]').first(),
  ];
  let clicked = false;
  for (const c of saveCandidates) {
    const cnt = await c.count().catch(() => 0);
    if (cnt) {
      await c.scrollIntoViewIfNeeded().catch(()=>{});
      await c.click();
      clicked = true;
      break;
    }
  }
  if (!clicked) {
    // Son çare: form.submit()
    await form.evaluate(f => f.submit());
  }

  // Başarı işareti: ya change sayfasına yönlenir ya da success mesajı çıkar
  await Promise.race([
    page.waitForURL(/\/change\/$/, { timeout: 8000 }).catch(() => {}),
    page.waitForSelector('.messagelist .success, .messages .success, #container .success', { timeout: 8000 }).catch(() => {}),
  ]);

  // Değişiklik sayfasında değilsek listeden nesneye gir
  let onChange = /\/change\/$/.test(page.url());
  if (!onChange) {
    const link = page.getByRole('link', { name: new RegExp(name) }).first();
    if (await link.isVisible().catch(()=>false)) {
      await link.click();
      await expect(page).toHaveURL(/\/change\/$/);
      onChange = true;
    }
  }

  // Silme
  if (onChange) {
    const delLink = page.locator('a.deletelink, .object-tools a[href$="/delete/"]').first();
    if (await delLink.count()) {
      await delLink.click();
      const confirm = page.getByRole('button', { name: /yes|evet|eminim|ok/i }).first()
        .or(page.locator('input[type="submit"][value*="Yes" i], input[type="submit"][value*="Evet" i], input[type="submit"][value*="eminim" i]').first());
      await confirm.click().catch(()=>{});
      await expect(page).toHaveURL(/\/admin\/maintenance\/equipment\/$/);
      await expect(page.getByText(name)).toHaveCount(0);
    } else {
      // Listeye dön ve oradan sil
      await page.goto(`${BASE}/admin/maintenance/equipment/`, { waitUntil: 'domcontentloaded' });
      const row = page.getByRole('link', { name: new RegExp(name) }).first();
      if (await row.count()) {
        await row.click();
        const del2 = page.locator('a.deletelink').first();
        if (await del2.count()) {
          await del2.click();
          await page.locator('input[type="submit"]').first().click().catch(()=>{});
        }
      }
    }
  }
});
