### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\dump_admin_names.py
import os, sys, django
from itertools import islice
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.urls import get_resolver
from django.contrib import admin
from maintenance.models import Equipment

res = get_resolver()
names = []
for k in res.reverse_dict.keys():
    if isinstance(k, str) and ("admin" in k or "maintenance" in k):
        names.append(k)

print("~ İlk 50 isim ~")
for n in islice(sorted(set(names)), 50):
    print(n)

# Ayrıca model bazlı isimleri üret ve tersine çevir
from django.contrib.admin.templatetags.admin_urls import admin_urlname
nm_cl = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
print("nm_cl:", nm_cl)
print("nm_add:", nm_add)

from django.urls import reverse
print("reverse(cl):", reverse(nm_cl))
print("reverse(add):", reverse(nm_add))
### DOSYA BİTİŞ: dump_admin_names.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\check_admin_tuple.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
tpl = admin.site.urls  # (urlpatterns, app_name, namespace)
print("app_name:", tpl[1], "| namespace:", tpl[2])
### DOSYA BİTİŞ: check_admin_tuple.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\check_admin_tuple.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
tpl = admin.site.urls  # (urlpatterns, app_name, namespace)
print("app_name:", tpl[1], "| namespace:", tpl[2])
### DOSYA BİTİŞ: check_admin_tuple.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\check_admin_tuple.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
tpl = admin.site.urls  # (urlpatterns, app_name, namespace)
print("app_name:", tpl[1], "| namespace:", tpl[2])
### DOSYA BİTİŞ: check_admin_tuple.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\admin_auth_probe_after_reset.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.test import Client
c = Client()

# login sayfasına yönlendirme beklenen (302)
r = c.get("/admin/")
print("GET /admin/ ->", r.status_code)

# giriş yap
resp = c.post("/admin/login/?next=/admin/", {
    "username":"admin", "password":"admin123!",
    "this_is_the_login_form":1, "next":"/admin/"
}, follow=True)
print("login final status:", resp.status_code)

# model sayfaları artık 200 olmalı
r1 = c.get("/admin/maintenance/equipment/")
r2 = c.get("/admin/maintenance/equipment/add/")
print("CL status:", r1.status_code)
print("ADD status:", r2.status_code)
### DOSYA BİTİŞ: admin_auth_probe_after_reset.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_auth_probe_after_reset.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.test import Client
c = Client()

# login sayfasına yönlendirme beklenen (302)
r = c.get("/admin/")
print("GET /admin/ ->", r.status_code)

# giriş yap
resp = c.post("/admin/login/?next=/admin/", {
    "username":"admin", "password":"admin123!",
    "this_is_the_login_form":1, "next":"/admin/"
}, follow=True)
print("login final status:", resp.status_code)

# model sayfaları artık 200 olmalı
r1 = c.get("/admin/maintenance/equipment/")
r2 = c.get("/admin/maintenance/equipment/add/")
print("CL status:", r1.status_code)
print("ADD status:", r2.status_code)
### DOSYA BİTİŞ: admin_auth_probe_after_reset.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\admin_auth_probe_after_reset.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.test import Client
c = Client()

# login sayfasına yönlendirme beklenen (302)
r = c.get("/admin/")
print("GET /admin/ ->", r.status_code)

# giriş yap
resp = c.post("/admin/login/?next=/admin/", {
    "username":"admin", "password":"admin123!",
    "this_is_the_login_form":1, "next":"/admin/"
}, follow=True)
print("login final status:", resp.status_code)

# model sayfaları artık 200 olmalı
r1 = c.get("/admin/maintenance/equipment/")
r2 = c.get("/admin/maintenance/equipment/add/")
print("CL status:", r1.status_code)
print("ADD status:", r2.status_code)
### DOSYA BİTİŞ: admin_auth_probe_after_reset.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_reverse_check_fixed.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse, NoReverseMatch
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from maintenance.models import Equipment

print("Registered in default admin site:", Equipment in admin.site._registry)

name_changelist = admin_urlname(Equipment._meta, "changelist")   # Örn: "admin:maintenance_equipment_changelist"
name_add        = admin_urlname(Equipment._meta, "add")          # Örn: "admin:maintenance_equipment_add"
print("Names ->", name_changelist, ",", name_add)

try:
    # DİKKAT: Burada ekstra "admin:" EKLEMİYORUZ
    print("Reverse CL :", reverse(name_changelist))
    print("Reverse ADD:", reverse(name_add))
except NoReverseMatch as e:
    print("NoReverseMatch:", e)
### DOSYA BİTİŞ: admin_reverse_check_fixed.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\admin_reverse_check_fixed.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse, NoReverseMatch
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from maintenance.models import Equipment

print("Registered in default admin site:", Equipment in admin.site._registry)

name_changelist = admin_urlname(Equipment._meta, "changelist")   # Örn: "admin:maintenance_equipment_changelist"
name_add        = admin_urlname(Equipment._meta, "add")          # Örn: "admin:maintenance_equipment_add"
print("Names ->", name_changelist, ",", name_add)

try:
    # DİKKAT: Burada ekstra "admin:" EKLEMİYORUZ
    print("Reverse CL :", reverse(name_changelist))
    print("Reverse ADD:", reverse(name_add))
except NoReverseMatch as e:
    print("NoReverseMatch:", e)
### DOSYA BİTİŞ: admin_reverse_check_fixed.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\admin_reverse_check_fixed.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse, NoReverseMatch
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from maintenance.models import Equipment

print("Registered in default admin site:", Equipment in admin.site._registry)

name_changelist = admin_urlname(Equipment._meta, "changelist")   # Örn: "admin:maintenance_equipment_changelist"
name_add        = admin_urlname(Equipment._meta, "add")          # Örn: "admin:maintenance_equipment_add"
print("Names ->", name_changelist, ",", name_add)

try:
    # DİKKAT: Burada ekstra "admin:" EKLEMİYORUZ
    print("Reverse CL :", reverse(name_changelist))
    print("Reverse ADD:", reverse(name_add))
except NoReverseMatch as e:
    print("NoReverseMatch:", e)
### DOSYA BİTİŞ: admin_reverse_check_fixed.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\probe_admin_500.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.test import Client
c = Client()
r = c.get("/admin/")
print("status:", r.status_code)
print((r.content[:800]).decode("utf-8","ignore"))
### DOSYA BİTİŞ: probe_admin_500.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\probe_admin_500.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.test import Client
c = Client()
r = c.get("/admin/")
print("status:", r.status_code)
print((r.content[:800]).decode("utf-8","ignore"))
### DOSYA BİTİŞ: probe_admin_500.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\probe_admin_500.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.test import Client
c = Client()
r = c.get("/admin/")
print("status:", r.status_code)
print((r.content[:800]).decode("utf-8","ignore"))
### DOSYA BİTİŞ: probe_admin_500.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_auth_probe.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.test import Client

c = Client()

# 1) login sayfasına yönlendirme var mı?
r = c.get("/admin/")
print("GET /admin/ ->", r.status_code)  # 302 beklenir (login'e)

# 2) admin kullanıcısı ile giriş
resp = c.post("/admin/login/?next=/admin/", {
    "username":"admin", "password":"admin123!",
    "this_is_the_login_form":1, "next":"/admin/"
}, follow=True)
print("login final status:", resp.status_code)

# 3) artık changelist/add kaç dönüyor?
r1 = c.get("/admin/maintenance/equipment/")
r2 = c.get("/admin/maintenance/equipment/add/")
print("CL status:", r1.status_code)   # 200 beklenir
print("ADD status:", r2.status_code)  # 200 beklenir
### DOSYA BİTİŞ: admin_auth_probe.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\admin_auth_probe.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.test import Client

c = Client()

# 1) login sayfasına yönlendirme var mı?
r = c.get("/admin/")
print("GET /admin/ ->", r.status_code)  # 302 beklenir (login'e)

# 2) admin kullanıcısı ile giriş
resp = c.post("/admin/login/?next=/admin/", {
    "username":"admin", "password":"admin123!",
    "this_is_the_login_form":1, "next":"/admin/"
}, follow=True)
print("login final status:", resp.status_code)

# 3) artık changelist/add kaç dönüyor?
r1 = c.get("/admin/maintenance/equipment/")
r2 = c.get("/admin/maintenance/equipment/add/")
print("CL status:", r1.status_code)   # 200 beklenir
print("ADD status:", r2.status_code)  # 200 beklenir
### DOSYA BİTİŞ: admin_auth_probe.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\admin_auth_probe.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.test import Client

c = Client()

# 1) login sayfasına yönlendirme var mı?
r = c.get("/admin/")
print("GET /admin/ ->", r.status_code)  # 302 beklenir (login'e)

# 2) admin kullanıcısı ile giriş
resp = c.post("/admin/login/?next=/admin/", {
    "username":"admin", "password":"admin123!",
    "this_is_the_login_form":1, "next":"/admin/"
}, follow=True)
print("login final status:", resp.status_code)

# 3) artık changelist/add kaç dönüyor?
r1 = c.get("/admin/maintenance/equipment/")
r2 = c.get("/admin/maintenance/equipment/add/")
print("CL status:", r1.status_code)   # 200 beklenir
print("ADD status:", r2.status_code)  # 200 beklenir
### DOSYA BİTİŞ: admin_auth_probe.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\admin_reverse_check.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse, NoReverseMatch
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from maintenance.models import Equipment

print("Registered in default admin site:", Equipment in admin.site._registry)

name_changelist = admin_urlname(Equipment._meta, "changelist")   # ör: "maintenance_equipment_changelist"
name_add        = admin_urlname(Equipment._meta, "add")          # ör: "maintenance_equipment_add"
print("Names ->", name_changelist, ",", name_add)

try:
    print("Reverse CL :", reverse(f"admin:{name_changelist}"))
    print("Reverse ADD:", reverse(f"admin:{name_add}"))
except NoReverseMatch as e:
    print("NoReverseMatch:", e)
### DOSYA BİTİŞ: admin_reverse_check.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_reverse_check.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse, NoReverseMatch
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from maintenance.models import Equipment

print("Registered in default admin site:", Equipment in admin.site._registry)

name_changelist = admin_urlname(Equipment._meta, "changelist")   # ör: "maintenance_equipment_changelist"
name_add        = admin_urlname(Equipment._meta, "add")          # ör: "maintenance_equipment_add"
print("Names ->", name_changelist, ",", name_add)

try:
    print("Reverse CL :", reverse(f"admin:{name_changelist}"))
    print("Reverse ADD:", reverse(f"admin:{name_add}"))
except NoReverseMatch as e:
    print("NoReverseMatch:", e)
### DOSYA BİTİŞ: admin_reverse_check.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\admin_reverse_check.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse, NoReverseMatch
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from maintenance.models import Equipment

print("Registered in default admin site:", Equipment in admin.site._registry)

name_changelist = admin_urlname(Equipment._meta, "changelist")   # ör: "maintenance_equipment_changelist"
name_add        = admin_urlname(Equipment._meta, "add")          # ör: "maintenance_equipment_add"
print("Names ->", name_changelist, ",", name_add)

try:
    print("Reverse CL :", reverse(f"admin:{name_changelist}"))
    print("Reverse ADD:", reverse(f"admin:{name_add}"))
except NoReverseMatch as e:
    print("NoReverseMatch:", e)
### DOSYA BİTİŞ: admin_reverse_check.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\check_admin_urls.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.contrib import admin
from django.urls import reverse
from maintenance.models import Equipment
print("Registered:", Equipment in admin.site._registry)
print("CL :", reverse(f"admin:{Equipment._meta.app_label}_{Equipment._meta.model_name}_changelist"))
print("ADD:", reverse(f"admin:{Equipment._meta.app_label}_{Equipment._meta.model_name}_add"))
### DOSYA BİTİŞ: check_admin_urls.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\check_admin_urls.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.contrib import admin
from django.urls import reverse
from maintenance.models import Equipment
print("Registered:", Equipment in admin.site._registry)
print("CL :", reverse(f"admin:{Equipment._meta.app_label}_{Equipment._meta.model_name}_changelist"))
print("ADD:", reverse(f"admin:{Equipment._meta.app_label}_{Equipment._meta.model_name}_add"))
### DOSYA BİTİŞ: check_admin_urls.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\check_admin_urls.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.contrib import admin
from django.urls import reverse
from maintenance.models import Equipment
print("Registered:", Equipment in admin.site._registry)
print("CL :", reverse(f"admin:{Equipment._meta.app_label}_{Equipment._meta.model_name}_changelist"))
print("ADD:", reverse(f"admin:{Equipment._meta.app_label}_{Equipment._meta.model_name}_add"))
### DOSYA BİTİŞ: check_admin_urls.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\ensure_superuser.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.contrib.auth import get_user_model
User = get_user_model()
u, _ = User.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True
u.set_password("admin123!")
u.save()
print("ok ->", u.username, u.is_superuser, u.is_staff)
### DOSYA BİTİŞ: ensure_superuser.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\ensure_superuser.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.contrib.auth import get_user_model
User = get_user_model()
u, _ = User.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True
u.set_password("admin123!")
u.save()
print("ok ->", u.username, u.is_superuser, u.is_staff)
### DOSYA BİTİŞ: ensure_superuser.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\ensure_superuser.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.contrib.auth import get_user_model
User = get_user_model()
u, _ = User.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True
u.set_password("admin123!")
u.save()
print("ok ->", u.username, u.is_superuser, u.is_staff)
### DOSYA BİTİŞ: ensure_superuser.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\resolve_admin_urls.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.urls import resolve, Resolver404
for p in ["/admin/","/admin/maintenance/equipment/","/admin/maintenance/equipment/add/"]:
    try:
        m = resolve(p)
        print(p, "-> OK:", m.func.__module__)
    except Resolver404:
        print(p, "-> 404 (pattern yok)")
### DOSYA BİTİŞ: resolve_admin_urls.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\resolve_admin_urls.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.urls import resolve, Resolver404
for p in ["/admin/","/admin/maintenance/equipment/","/admin/maintenance/equipment/add/"]:
    try:
        m = resolve(p)
        print(p, "-> OK:", m.func.__module__)
    except Resolver404:
        print(p, "-> 404 (pattern yok)")
### DOSYA BİTİŞ: resolve_admin_urls.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\resolve_admin_urls.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.urls import resolve, Resolver404
for p in ["/admin/","/admin/maintenance/equipment/","/admin/maintenance/equipment/add/"]:
    try:
        m = resolve(p)
        print(p, "-> OK:", m.func.__module__)
    except Resolver404:
        print(p, "-> 404 (pattern yok)")
### DOSYA BİTİŞ: resolve_admin_urls.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\diag_dupes.py
import os, sys, django
ROOT = os.path.abspath(".")
if ROOT not in sys.path: sys.path.insert(0, ROOT)
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.db.models import Count
from maintenance.models import Equipment

dupes = (Equipment.objects
         .values("serial_number")
         .annotate(c=Count("id"))
         .filter(c__gt=1))
print("Kalan duplike sayısı:", dupes.count())
print(list(dupes[:20]))
### DOSYA BİTİŞ: diag_dupes.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\diag_dupes.py
import os, sys, django
ROOT = os.path.abspath(".")
if ROOT not in sys.path: sys.path.insert(0, ROOT)
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.db.models import Count
from maintenance.models import Equipment

dupes = (Equipment.objects
         .values("serial_number")
         .annotate(c=Count("id"))
         .filter(c__gt=1))
print("Kalan duplike sayısı:", dupes.count())
print(list(dupes[:20]))
### DOSYA BİTİŞ: diag_dupes.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\diag_dupes.py
import os, sys, django
ROOT = os.path.abspath(".")
if ROOT not in sys.path: sys.path.insert(0, ROOT)
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.db.models import Count
from maintenance.models import Equipment

dupes = (Equipment.objects
         .values("serial_number")
         .annotate(c=Count("id"))
         .filter(c__gt=1))
print("Kalan duplike sayısı:", dupes.count())
print(list(dupes[:20]))
### DOSYA BİTİŞ: diag_dupes.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\fix_serial_dupes_runner.py
import os, sys, django

# --- PROJE KÖKÜNÜ sys.path'E EKLE ---
HERE = os.path.abspath(os.path.dirname(__file__))
ROOT = os.path.abspath(os.path.join(HERE, ".."))
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)

os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.db import transaction
from maintenance.models import Equipment

MAX_LEN = 120
SUFFIX_DUP = "__DUP__{id}"
SUFFIX_EMPTY = "__EMPTY__{id}"

def safe_unique_value(original: str, suffix: str) -> str:
    room = MAX_LEN - len(suffix)
    base = (original or "")[:room] if room > 0 else ""
    return (base + suffix)[:MAX_LEN]

# 1) Duplikeleri grupla (case-insensitive). Boş/whitespace -> özel anahtar.
by_norm = {}
for e in Equipment.objects.all().order_by("id"):
    raw = e.serial_number
    s = (raw or "")
    norm = s.strip().lower()
    key = norm if norm != "" else "__EMPTY__"
    by_norm.setdefault(key, []).append((e.id, s))

dupe_groups = {k:v for k,v in by_norm.items() if len(v) > 1}
print("Duplike grup sayısı:", len(dupe_groups))

changed = 0
with transaction.atomic():
    for key, rows in dupe_groups.items():
        keeper_id, keeper_val = rows[0]  # ilk kaydı koru
        for (pk, val) in rows[1:]:
            if key == "__EMPTY__":
                new_val = safe_unique_value("", SUFFIX_EMPTY.format(id=pk))
            else:
                new_val = safe_unique_value(val, SUFFIX_DUP.format(id=pk))
            # ekstra güvenlik: yine çakışırsa hafif varyasyon
            q = Equipment.objects.filter(serial_number=new_val).exclude(pk=pk)
            if q.exists():
                new_val = safe_unique_value(val, (SUFFIX_DUP.format(id=pk) + "_X"))
            Equipment.objects.filter(pk=pk).update(serial_number=new_val)
            changed += 1

print("Güncellenen kayıt:", changed)
### DOSYA BİTİŞ: fix_serial_dupes_runner.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\fix_serial_dupes_runner.py
import os, sys, django

# --- PROJE KÖKÜNÜ sys.path'E EKLE ---
HERE = os.path.abspath(os.path.dirname(__file__))
ROOT = os.path.abspath(os.path.join(HERE, ".."))
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)

os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.db import transaction
from maintenance.models import Equipment

MAX_LEN = 120
SUFFIX_DUP = "__DUP__{id}"
SUFFIX_EMPTY = "__EMPTY__{id}"

def safe_unique_value(original: str, suffix: str) -> str:
    room = MAX_LEN - len(suffix)
    base = (original or "")[:room] if room > 0 else ""
    return (base + suffix)[:MAX_LEN]

# 1) Duplikeleri grupla (case-insensitive). Boş/whitespace -> özel anahtar.
by_norm = {}
for e in Equipment.objects.all().order_by("id"):
    raw = e.serial_number
    s = (raw or "")
    norm = s.strip().lower()
    key = norm if norm != "" else "__EMPTY__"
    by_norm.setdefault(key, []).append((e.id, s))

dupe_groups = {k:v for k,v in by_norm.items() if len(v) > 1}
print("Duplike grup sayısı:", len(dupe_groups))

changed = 0
with transaction.atomic():
    for key, rows in dupe_groups.items():
        keeper_id, keeper_val = rows[0]  # ilk kaydı koru
        for (pk, val) in rows[1:]:
            if key == "__EMPTY__":
                new_val = safe_unique_value("", SUFFIX_EMPTY.format(id=pk))
            else:
                new_val = safe_unique_value(val, SUFFIX_DUP.format(id=pk))
            # ekstra güvenlik: yine çakışırsa hafif varyasyon
            q = Equipment.objects.filter(serial_number=new_val).exclude(pk=pk)
            if q.exists():
                new_val = safe_unique_value(val, (SUFFIX_DUP.format(id=pk) + "_X"))
            Equipment.objects.filter(pk=pk).update(serial_number=new_val)
            changed += 1

print("Güncellenen kayıt:", changed)
### DOSYA BİTİŞ: fix_serial_dupes_runner.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\fix_serial_dupes_runner.py
import os, sys, django

# --- PROJE KÖKÜNÜ sys.path'E EKLE ---
HERE = os.path.abspath(os.path.dirname(__file__))
ROOT = os.path.abspath(os.path.join(HERE, ".."))
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)

os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.db import transaction
from maintenance.models import Equipment

MAX_LEN = 120
SUFFIX_DUP = "__DUP__{id}"
SUFFIX_EMPTY = "__EMPTY__{id}"

def safe_unique_value(original: str, suffix: str) -> str:
    room = MAX_LEN - len(suffix)
    base = (original or "")[:room] if room > 0 else ""
    return (base + suffix)[:MAX_LEN]

# 1) Duplikeleri grupla (case-insensitive). Boş/whitespace -> özel anahtar.
by_norm = {}
for e in Equipment.objects.all().order_by("id"):
    raw = e.serial_number
    s = (raw or "")
    norm = s.strip().lower()
    key = norm if norm != "" else "__EMPTY__"
    by_norm.setdefault(key, []).append((e.id, s))

dupe_groups = {k:v for k,v in by_norm.items() if len(v) > 1}
print("Duplike grup sayısı:", len(dupe_groups))

changed = 0
with transaction.atomic():
    for key, rows in dupe_groups.items():
        keeper_id, keeper_val = rows[0]  # ilk kaydı koru
        for (pk, val) in rows[1:]:
            if key == "__EMPTY__":
                new_val = safe_unique_value("", SUFFIX_EMPTY.format(id=pk))
            else:
                new_val = safe_unique_value(val, SUFFIX_DUP.format(id=pk))
            # ekstra güvenlik: yine çakışırsa hafif varyasyon
            q = Equipment.objects.filter(serial_number=new_val).exclude(pk=pk)
            if q.exists():
                new_val = safe_unique_value(val, (SUFFIX_DUP.format(id=pk) + "_X"))
            Equipment.objects.filter(pk=pk).update(serial_number=new_val)
            changed += 1

print("Güncellenen kayıt:", changed)
### DOSYA BİTİŞ: fix_serial_dupes_runner.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\dedupe_serials.py
from django.db import transaction
from maintenance.models import Equipment

dupe_ids = []
seen = set()

qs = Equipment.objects.all().order_by('id')
for e in qs:
    sn = (e.serial_number or '').strip()
    if not sn:
        continue
    key = sn.lower()
    if key in seen:
        dupe_ids.append(e.id)
    else:
        seen.add(key)

with transaction.atomic():
    for pk in dupe_ids:
        Equipment.objects.filter(pk=pk).update(serial_number=None)

print("Deduped:", len(dupe_ids), "records set to NULL")
### DOSYA BİTİŞ: dedupe_serials.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\dedupe_serials.py
from django.db import transaction
from maintenance.models import Equipment

dupe_ids = []
seen = set()

qs = Equipment.objects.all().order_by('id')
for e in qs:
    sn = (e.serial_number or '').strip()
    if not sn:
        continue
    key = sn.lower()
    if key in seen:
        dupe_ids.append(e.id)
    else:
        seen.add(key)

with transaction.atomic():
    for pk in dupe_ids:
        Equipment.objects.filter(pk=pk).update(serial_number=None)

print("Deduped:", len(dupe_ids), "records set to NULL")
### DOSYA BİTİŞ: dedupe_serials.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\dedupe_serials.py
from django.db import transaction
from maintenance.models import Equipment

dupe_ids = []
seen = set()

qs = Equipment.objects.all().order_by('id')
for e in qs:
    sn = (e.serial_number or '').strip()
    if not sn:
        continue
    key = sn.lower()
    if key in seen:
        dupe_ids.append(e.id)
    else:
        seen.add(key)

with transaction.atomic():
    for pk in dupe_ids:
        Equipment.objects.filter(pk=pk).update(serial_number=None)

print("Deduped:", len(dupe_ids), "records set to NULL")
### DOSYA BİTİŞ: dedupe_serials.py

### DOSYA BAŞLANGIÇ: .\\maintenance\migrations\0009_alter_equipment_options_remove_equipment_department_and_more.py
# Generated by Django 5.2.6 on 2025-10-04 21:15

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('maintenance', '0008_department_remove_calibrationrecord_asset_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='equipment',
            options={},
        ),
        migrations.RemoveField(
            model_name='equipment',
            name='department',
        ),
        migrations.RemoveField(
            model_name='equipment',
            name='inventory_code',
        ),
        migrations.RemoveField(
            model_name='equipment',
            name='location',
        ),
        migrations.RemoveField(
            model_name='equipment',
            name='purchase_date',
        ),
        migrations.AlterField(
            model_name='department',
            name='name',
            field=models.CharField(max_length=100, unique=True, verbose_name='Departman AdÃƒÆ’Ã¢â‚¬Â\x9eÃƒâ€šÃ‚Â±'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='name',
            field=models.CharField(max_length=200, verbose_name='Ekipman AdÃƒÆ’Ã¢â‚¬Â\x9eÃƒâ€šÃ‚Â±'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='serial_number',
            field=models.CharField(blank=True, max_length=120, null=True, unique=True),
        ),
    ]
### DOSYA BİTİŞ: 0009_alter_equipment_options_remove_equipment_department_and_more.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-192603\maintenance\models.py
from django.db import models
from django.utils.translation import gettext_lazy as _

class Department(models.Model):
    """Departman modelini tanÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±mlar."""
    name = models.CharField(_("Departman AdÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±"), max_length=100, unique=True)
    
    class Meta:
        verbose_name = _("Departman")
        verbose_name_plural = _("Departmanlar")

    def __str__(self):
        return self.name

class Equipment(models.Model):
    """BakÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±m ve kalibrasyon takibi yapÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±lacak ekipmanlarÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â± tanÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±mlar."""
    
    # Zorunlu alanlar
    name = models.CharField(_("Ekipman AdÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±"), max_length=200)
    
    # DÃƒÆ’Ã†â€™Ãƒâ€¦Ã¢â‚¬Å“ZELTÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â°LDÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â°: unique=True kÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±sÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±tlamasÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±, gÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¶ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â§ hatasÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±nÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â± ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¶nlemek iÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â§in kaldÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±rÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±ldÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±.
    serial_number = models.CharField(max_length=120, unique=True, blank=True, null=True)
### DOSYA BİTİŞ: models.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\maintenance\models.py
from django.db import models
from django.utils.translation import gettext_lazy as _

class Department(models.Model):
    """Departman modelini tanÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±mlar."""
    name = models.CharField(_("Departman AdÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±"), max_length=100, unique=True)
    
    class Meta:
        verbose_name = _("Departman")
        verbose_name_plural = _("Departmanlar")

    def __str__(self):
        return self.name

class Equipment(models.Model):
    """BakÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±m ve kalibrasyon takibi yapÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±lacak ekipmanlarÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â± tanÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±mlar."""
    
    # Zorunlu alanlar
    name = models.CharField(_("Ekipman AdÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±"), max_length=200)
    
    # DÃƒÆ’Ã†â€™Ãƒâ€¦Ã¢â‚¬Å“ZELTÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â°LDÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â°: unique=True kÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±sÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±tlamasÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±, gÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¶ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â§ hatasÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±nÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â± ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¶nlemek iÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â§in kaldÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±rÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±ldÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±.
    serial_number = models.CharField(max_length=120, unique=True, blank=True, null=True)
### DOSYA BİTİŞ: models.py

