### DOSYA BAŞLANGIÇ: .\\debug_form.js
const { chromium } = require("playwright");

(async () => {
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext({ storageState: "storage/user.json" });
  const page = await context.newPage();
  
  await page.goto("http://127.0.0.1:8010/admin/maintenance/equipment/add/");
  await page.waitForLoadState("networkidle");
  
  // Tüm input field'larını bul
  const inputs = await page.evaluate(() => {
    return Array.from(document.querySelectorAll('input, select, textarea'))
      .map(el => ({
        tag: el.tagName,
        id: el.id,
        name: el.name,
        type: el.type,
        label: el.labels?.[0]?.textContent?.trim() || ''
      }));
  });
  
  console.log("\n📋 Form Field'ları:");
  console.table(inputs);
  
  // Screenshot
  await page.screenshot({ path: "equipment_form_debug.png", fullPage: true });
  console.log("\n✅ Screenshot: equipment_form_debug.png");
  
  await browser.close();
})();
### DOSYA BİTİŞ: debug_form.js

### DOSYA BAŞLANGIÇ: .\\debug_admin.js
const { chromium } = require("playwright");

(async () => {
   const browser = await chromium.launch({ headless: false }); // Başlıklı modda çalışır
   const context = await browser.newContext({ storageState: "storage/user.json" });
   const page = await context.newPage();

   const urlToTest = "http://127.0.0.1:8010/admin/"; // Kök Admin Sayfası
   console.log("?? URL:", urlToTest);

   await page.goto(urlToTest);
   await page.waitForLoadState("networkidle");

   console.log("?? Title:", await page.title());

   // Tüm HTML'i kaydet
   const html = await page.content();
   require("fs").writeFileSync("debug_admin_root.html", html, "utf8");
   console.log("✅ HTML kaydedildi: debug_admin_root.html");

   // Screenshot al
   await page.screenshot({ path: "debug_admin_root.png", fullPage: true });
   console.log("✅ Screenshot kaydedildi: debug_admin_root.png");

   // Sayfadaki tüm linkleri (URL'leri) bul ve yazdır
   console.log("\n?? Admin Sayfasındaki Tüm Linkler:");
   const links = await page.$$eval("a", anchors => anchors.map(a => a.href));
   
   // Sadece "/admin/" ile başlayanları filtrele
   const adminLinks = links.filter(link => link.includes('/admin/') && !link.endsWith('/admin/')).slice(0, 10);
   
   adminLinks.forEach(link => console.log(link));

   await browser.close();
})();
### DOSYA BİTİŞ: debug_admin.js

### DOSYA BAŞLANGIÇ: .\\check_heading.js
const { chromium } = require("playwright");

(async () => {
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext({ storageState: "storage/user.json" });
  const page = await context.newPage();
  
  await page.goto("http://127.0.0.1:8010/admin/maintenance/equipment/");
  await page.waitForLoadState("networkidle");
  
  // Tüm h1'leri bul
  const h1Texts = await page.locator("h1").allTextContents();
  console.log("📌 Sayfadaki H1 başlıklar:", h1Texts);
  
  // Tüm başlıkları bul
  const allHeadings = await page.evaluate(() => {
    return Array.from(document.querySelectorAll('h1, h2, h3'))
      .map(el => ({ tag: el.tagName, text: el.textContent.trim() }));
  });
  console.log("📋 Tüm başlıklar:", allHeadings);
  
  await page.screenshot({ path: "equipment_page.png", fullPage: true });
  console.log("✅ Screenshot: equipment_page.png");
  
  await browser.close();
})();
### DOSYA BİTİŞ: check_heading.js

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\scripts\build-tasks.js
const fs = require("fs");
const path = require("path");
const csv = require("csv-parse/sync");

const csvPath = path.resolve("tasks_template.csv");
const outPath = path.resolve("build", "tasks.json");

if (!fs.existsSync(csvPath)) {
  console.error("[ERROR] tasks_template.csv bulunamadı!");
  process.exit(1);
}

let csvContent = fs.readFileSync(csvPath, "utf8");
// BOM temizle
if (csvContent.charCodeAt(0) === 0xFEFF) {
  csvContent = csvContent.slice(1);
}

const records = csv.parse(csvContent, {
  columns: true,
  skip_empty_lines: true,
  trim: true,
});

fs.mkdirSync(path.dirname(outPath), { recursive: true });
fs.writeFileSync(outPath, JSON.stringify(records, null, 2), "utf8");

console.log(`[BUILD] ${records.length} görev yazıldı.`);
### DOSYA BİTİŞ: build-tasks.js

### DOSYA BAŞLANGIÇ: .\\scripts\build-tasks.js
const fs = require("fs");
const path = require("path");
const csv = require("csv-parse/sync");

const csvPath = path.resolve("tasks_template.csv");
const outPath = path.resolve("build", "tasks.json");

if (!fs.existsSync(csvPath)) {
  console.error("[ERROR] tasks_template.csv bulunamadı!");
  process.exit(1);
}

let csvContent = fs.readFileSync(csvPath, "utf8");
// BOM temizle
if (csvContent.charCodeAt(0) === 0xFEFF) {
  csvContent = csvContent.slice(1);
}

const records = csv.parse(csvContent, {
  columns: true,
  skip_empty_lines: true,
  trim: true,
});

fs.mkdirSync(path.dirname(outPath), { recursive: true });
fs.writeFileSync(outPath, JSON.stringify(records, null, 2), "utf8");

console.log(`[BUILD] ${records.length} görev yazıldı.`);
### DOSYA BİTİŞ: build-tasks.js

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\scripts\build-tasks.js
const fs = require("fs");
const path = require("path");
const csv = require("csv-parse/sync");

const csvPath = path.resolve("tasks_template.csv");
const outPath = path.resolve("build", "tasks.json");

if (!fs.existsSync(csvPath)) {
  console.error("[ERROR] tasks_template.csv bulunamadı!");
  process.exit(1);
}

let csvContent = fs.readFileSync(csvPath, "utf8");
// BOM temizle
if (csvContent.charCodeAt(0) === 0xFEFF) {
  csvContent = csvContent.slice(1);
}

const records = csv.parse(csvContent, {
  columns: true,
  skip_empty_lines: true,
  trim: true,
});

fs.mkdirSync(path.dirname(outPath), { recursive: true });
fs.writeFileSync(outPath, JSON.stringify(records, null, 2), "utf8");

console.log(`[BUILD] ${records.length} görev yazıldı.`);
### DOSYA BİTİŞ: build-tasks.js

### DOSYA BAŞLANGIÇ: .\\reporters\quarantine-reporter.js
// reporters/quarantine-reporter.js (Karantina ve AI Kuyruk Yöneticisi - TAM İMPLEMENTASYON)
const fs = require('fs');
const path = require('path');

const QUARANTINE_FILE = path.join(process.cwd(), 'quarantine.json');
const AI_QUEUE_FILE = path.join(process.cwd(), 'ai_queue', 'failed_tests.jsonl');

class QuarantineReporter {
     constructor(options) {
          this.quarantine = {};
          this.loadQuarantine();
     }

     loadQuarantine() {
          if (fs.existsSync(QUARANTINE_FILE)) {
               try {
                    this.quarantine = JSON.parse(fs.readFileSync(QUARANTINE_FILE, 'utf8'));
                    console.log(`[REPORTER] Karantina durumu yüklendi: ${Object.keys(this.quarantine).length} öğe.`);
               } catch (e) {
                    console.error('[REPORTER HATA] Karantina dosyasını okurken hata oluştu, sıfırdan başlatılıyor.', e.message);
                    this.quarantine = {};
               }
          }
     }

     onTestEnd(test, result) {
          const testId = `${path.basename(test.location.file)} - ${test.title}`;

          if (result.status === 'failed' || result.status === 'timedOut') {
               this.quarantine[testId] = (this.quarantine[testId] || 0) + 1;

               const errorMsg = result.errors[0]?.message || result.error?.message || 'Tanımsız veya süre aşımı hatası';
               const aiReport = {
                    id: testId,
                    status: result.status,
                    error: errorMsg.split('\n')[0],
                    timestamp: new Date().toISOString()
               };
               fs.appendFileSync(AI_QUEUE_FILE, JSON.stringify(aiReport) + '\n');

               if (this.quarantine[testId] >= 3) {
                    console.log(`[KARANTİNA] Görev ${testId} 3. kez başarısız oldu ve karantinaya alındı.`);
               }
          } else if (result.status === 'passed' && this.quarantine[testId] && this.quarantine[testId] < 3) {
               delete this.quarantine[testId];
          }
     }

     onEnd(result) {
          fs.writeFileSync(QUARANTINE_FILE, JSON.stringify(this.quarantine, null, 2));
          console.log(`[RAPOR] Karantina durumu güncellendi. Başarısızlık sayısı: ${result.failures}.`);
     }
}

module.exports = QuarantineReporter;
### DOSYA BİTİŞ: quarantine-reporter.js

### DOSYA BAŞLANGIÇ: .\\auth.setup.js
// Rev: 2025-10-02 12:20 r1
// auth.setup.js
const { chromium } = require('@playwright/test');
const fs = require('fs');
const path = require('path');

module.exports = async () => {
  const STORAGE_PATH = path.join(__dirname, 'storage', 'user.json');
  const baseURL = process.env.BASE_URL || 'http://127.0.0.1:8010';

  // storage klasörü garanti
  fs.mkdirSync(path.dirname(STORAGE_PATH), { recursive: true });

  const browser = await chromium.launch();
  const page = await browser.newPage();

  // LOGIN AKIŞI — kendi uygulamana göre selector/URL uyarlayabilirsin
  await page.goto(`${baseURL}/admin/login/`, { waitUntil: 'domcontentloaded' });
  await page.fill('#id_username', process.env.ADMIN_USER || 'hp');
  await page.fill('#id_password', process.env.ADMIN_PASS || 'admin');
  await Promise.all([
    page.waitForNavigation({ waitUntil: 'networkidle' }),
    page.click('text=/Log in|Giriş|Oturum Aç/i'),
  ]);

  // Oturum durumunu kaydet
  await page.context().storageState({ path: STORAGE_PATH });
  await browser.close();
};
### DOSYA BİTİŞ: auth.setup.js

### DOSYA BAŞLANGIÇ: .\\maintenance\urls.py
from django.urls import path

# Bu uygulama için URL'ler şu an boş bırakılabilir
urlpatterns = [
    
]
### DOSYA BİTİŞ: urls.py

### DOSYA BAŞLANGIÇ: .\\core\admin_utils.py
# Bu dosya, toplu admin aksiyonları için gereken yardımcı fonksiyonları içerir.
def make_active(modeladmin, request, queryset):
    """Seçili objeleri toplu olarak aktif yapar."""
    queryset.update(is_active=True)
make_active.short_description = "Seçili öğeleri aktif yap"

def make_inactive(modeladmin, request, queryset):
    """Seçili objeleri toplu olarak pasif yapar."""
    queryset.update(is_active=False)
make_inactive.short_description = "Seçili öğeleri pasif yap"
### DOSYA BİTİŞ: admin_utils.py

### DOSYA BAŞLANGIÇ: .\\ops\run_backlog.ps1
param(
    [string]$FlowsDir = "flows",
    [string]$Filter = "*",
    [string]$BaseUrl = "http://127.0.0.1:8010",
    [bool]$LinkSmoke = $false,
    [int]$SmokeDepth = 1,
    [int]$SmokeLimit = 200,
    [string]$ExtraArgs = ""
)

$ErrorActionPreference = "Stop"

Write-Host "[run] Filters: $Filter" -ForegroundColor Yellow

$flowFiles = Get-ChildItem -Path $FlowsDir -Filter "*_flow.json" -ErrorAction SilentlyContinue | Where-Object { $_.Name -like $Filter.Replace('*', '*') + "_flow.json" }

if ($flowFiles.Count -eq 0) {
    Write-Host "[run] Akış bulunamadı. Aranılan dizin: $FlowsDir" -ForegroundColor Red
    Write-Host "[DEBUG] Filtre: $Filter.Replace('*', '*') + '_flow.json'" -ForegroundColor DarkGray
    exit 1
}

Write-Host "[run] 0 adet akış bulundu. Başlatılıyor..." -ForegroundColor Green

foreach ($file in $flowFiles) {
    $flowPath = $file.FullName
    $id = $file.BaseName -replace '_flow$'

    Write-Host "--- Başlatılıyor: $id ($flowPath) ---" -ForegroundColor Cyan
    
    $args = @(
        "npx", 
        "playwright", 
        "flow", 
        "run", 
        "", 
        "--base-url", 
        ""
    )

    if ($LinkSmoke) {
        $args += @(
            "--extra-command", 
            "powershell -ExecutionPolicy Bypass -File ops/smoke_links.ps1 -TargetUrl "" -TargetFlow "" -SmokeDepth $SmokeDepth -SmokeLimit $SmokeLimit -OkRedirectTo /_direct/.*",
            "--log-file",
            "logs/$id_smoke_$(Get-Date -Format 'yyyyMMddHHmmss').log"
        )
    }

    if ($ExtraArgs) {
        $args += $ExtraArgs.Split(' ') | Where-Object { -not [string]::IsNullOrEmpty($_) }
    }

    $commandLine = $args -join ' '
    Write-Host "[DEBUG] Çalıştırılan Komut: $commandLine" -ForegroundColor DarkGray
    
    $process = Start-Process -FilePath "cmd.exe" -ArgumentList "/c $commandLine" -NoNewWindow -PassThru -Wait -RedirectStandardOutput "logs/$id_pw_$(Get-Date -Format 'yyyyMMddHHmmss').log" -RedirectStandardError "logs/$id_error_$(Get-Date -Format 'yyyyMMddHHmmss').log"
    
    if ($process.ExitCode -eq 0) {
        Write-Host "✅ Başarılı: $id" -ForegroundColor Green
    } else {
        Write-Host "❌ Başarısız: $id (Exit Kodu: $(.ExitCode))" -ForegroundColor Red
    }
}

Write-Host "--- Koşucu BİTTİ ---" -ForegroundColor Yellow
### DOSYA BİTİŞ: run_backlog.ps1

### DOSYA BAŞLANGIÇ: .\\ops\gen_from_backlog.ps1
param(
    [string]$BacklogPath = "ops/backlog.json",
    [string]$FlowsDir = "flows",
    [string]$FlowGenScript = "tools/pw_flow.py"
)

$ErrorActionPreference = "Stop"

if (-not (Test-Path $BacklogPath)) {
    Write-Error "Backlog dosyası bulunamadı: $BacklogPath"
    exit 1
}
if (-not (Test-Path $FlowsDir)) {
    New-Item -ItemType Directory -Path $FlowsDir | Out-Null
}
if (-not (Test-Path $FlowGenScript)) {
    Write-Error "Flow oluşturma betiği bulunamadı: $FlowGenScript"
    exit 1
}

Write-Host "[gen] Flow üretimi BAŞLADI." -ForegroundColor Yellow

try {
    $jsonContent = Get-Content $BacklogPath -Raw -Encoding UTF8
    $backlog = $jsonContent | ConvertFrom-Json -ErrorAction Stop
} catch {
    Write-Error "Backlog JSON dosyası okunamadı veya bozuk: "
    exit 1
}

$generatedCount = 0
foreach ($task in $backlog) {
    if (-not $task.id) {
        Write-Warning "Boş ID içeren görev atlandı."
        continue
    }

    $flowFileName = "_flow.json"
    $flowFilePath = Join-Path -Path $FlowsDir -ChildPath $flowFileName
    
    $tempTaskPath = "temp_task_.json" 
    (ConvertTo-Json $task -Depth 10) | Set-Content -Path $tempTaskPath -Encoding UTF8

    Write-Host "[DEBUG] Görev:  - Hedef dosya: $flowFilePath" -ForegroundColor DarkGray

    $pythonArgs = @(
        "-File", $FlowGenScript,
        "--task-file", $tempTaskPath,
        "--output", $flowFilePath
    )
    
    $result = python @($pythonArgs)
    
    if (-not (Test-Path $flowFilePath)) {
        Write-Warning "[WARN] $flowFileName oluşturulamadı. Python çıktısı: $result"
    } else {
        Write-Host "✅ $flowFileName başarıyla oluşturuldu." -ForegroundColor Green
        $generatedCount++
    }

    Remove-Item $tempTaskPath -ErrorAction SilentlyContinue
}

Write-Host "[gen] Flow üretimi TAMAMLANDI. Toplam üretilen: $generatedCount" -ForegroundColor Yellow

if ($generatedCount -gt 0) {
    exit 0
} else {
    exit 1
}
### DOSYA BİTİŞ: gen_from_backlog.ps1

### DOSYA BAŞLANGIÇ: .\\tools\tasks_from_csv.ps1
param(
    [Parameter(Mandatory=$true)]
    [string]$CsvPath,

    [string]$JsonPath = "plan/tasks.json"
)

$ErrorActionPreference = "Stop"

if (-not (Test-Path $CsvPath)) {
    Write-Error "CSV dosyası bulunamadı: $CsvPath"
    exit 1
}

if (-not (Test-Path "plan")) {
    New-Item -ItemType Directory -Path "plan" | Out-Null
}

Write-Host "--- TASK DÖNÜŞTÜRÜCÜ BAŞLADI (V4 - ONARIM) ---" -ForegroundColor Yellow

try {
    # 1. CSV'yi oku ve başlıkları temizle (V3'teki gibi)
    $rawContent = Get-Content $CsvPath -Encoding UTF8
    $headerLine = $rawContent[0].Trim()
    $cleanHeaderLine = ($headerLine -split ',') | ForEach-Object { $_.Trim() } -join ','
    $cleanContent = @($cleanHeaderLine) + $rawContent[1..($rawContent.Count - 1)]

    $tasks = $cleanContent | ConvertFrom-Csv -Delimiter ','
    $requiredHeaders = "id", "title", "type", "design_ref", "visual_threshold"
    
    $actualHeaders = $tasks[0].psobject.properties.Name
    $missingHeaders = $requiredHeaders | Where-Object { $actualHeaders -notcontains $_.ToLower() }

    if ($missingHeaders.Count -gt 0) {
        Write-Error "CSV'de zorunlu başlıklar eksik: "
        exit 1
    }

    # 2. JSON formatına dönüştür
    $output = @()
    foreach ($task in $tasks) {
        $id = $task.id.Trim()
        $title = $task.title.Trim()
        $type = $task.type.Trim()
        $design_ref = $task.design_ref.Trim()
        $visual_threshold_str = $task.visual_threshold.Trim()

        if ([string]::IsNullOrEmpty($id) -or [string]::IsNullOrEmpty($title)) {
            Write-Warning "Boş ID veya Title içeren satır atlandı."
            continue
        }
        
        # Olası kültür sorununu gidermek için: Virgülleri noktaya çevir, sonra dönüştür.
        $clean_threshold_str = $visual_threshold_str.Replace(',', '.')
        $visual_threshold = [double]::Parse($clean_threshold_str, [cultureinfo]::InvariantCulture)

        $taskObject = [PSCustomObject]@{
            id = $id
            title = $title
            type = $type
            design_ref = $design_ref
            visual_threshold = $visual_threshold
        }
        $output += $taskObject
    }

    # 3. JSON'a yaz
    $output | ConvertTo-Json -Depth 10 | Set-Content -Path $JsonPath -Encoding UTF8
    
    Write-Host "✅ Başarılı: 0 görev $JsonPath dosyasına kaydedildi." -ForegroundColor Green
    Write-Host "--- TASK DÖNÜŞTÜRÜCÜ BİTTİ ---" -ForegroundColor Yellow
}
catch {
    # Hatanın kendisini açıkça yazdır (Dönüşüm hatasını yakalamak için)
    Write-Error "Dönüştürme sırasında KRİTİK HATA oluştu: "
    exit 1
}
### DOSYA BİTİŞ: tasks_from_csv.ps1

### DOSYA BAŞLANGIÇ: .\\ops\error_summary.ps1
param(
    [string]$OutDir = "_otokodlama\out"
)

$ErrorActionPreference = "Continue"

Write-Host "
--- HATA ÖZETİ BAŞLADI ---" -ForegroundColor Cyan

$errorCount = 0
$files = Get-ChildItem -Path $OutDir -Filter "*.json" -ErrorAction SilentlyContinue

if (-not $files) {
    Write-Host "[WARN] $OutDir altında JSON dosya bulunamadı." -ForegroundColor Yellow
    exit 0
}

foreach ($file in $files) {
    $content = Get-Content $file.FullName -Raw -Encoding UTF8
    
    # 1. JSON'u parse etmeyi dene (hata yoksa)
    try {
        $data = $content | ConvertFrom-Json -ErrorAction Stop
        if ($data -and $data.error) {
            Write-Host "FAIL : " -ForegroundColor Red
            $errorCount++
        } elseif ($data -and $data.status -eq "PASS") {
            # Hata yok, başarılı
        } else {
            # Beklenmedik durum (boş JSON veya status yok)
            Write-Host "UNKNOW : Beklenmedik JSON formatı veya boş çıktı." -ForegroundColor DarkYellow
            $errorCount++
        }
    }
    # 2. JSON parse edilemezse (bozuk JSON, muhtemelen bir kilitlenme sonucu)
    catch {
        # Ham metin içinde hatayı ara (Playwright/Node hata metni)
        $match = [regex]::Match($content, "Error: ([^

]+)")
        if ($match.Success) {
            Write-Host "CRITICAL : [HAM HATA] " -ForegroundColor Magenta
            $errorCount++
        } else {
            # Çok nadir: JSON bozuk ama ham hata da bulunamadı
            Write-Host "CRITICAL : [HAM OKUNAMADI] JSON bozuk, kök hata bulunamadı." -ForegroundColor DarkRed
            $errorCount++
        }
    }
}

Write-Host "--- HATA ÖZETİ BİTTİ. Toplam Hata: $errorCount ---" -ForegroundColor Cyan

if ($errorCount -gt 0) {
    exit 2 # Kırmızı çıkış kodu
}
### DOSYA BİTİŞ: error_summary.ps1

### DOSYA BAŞLANGIÇ: .\\ops\run_backlog_beep.ps1
param(
  [string]$Filter = "*",
  [string]$ExtraArgs = ""
)

$ErrorActionPreference = "Stop"
$flow_dir = ".\ops\flows"
$out_dir = ".\_otokodlama\out"

# Çıktı dizininin varlığını kontrol et
if (-not (Test-Path $out_dir)) {
    New-Item -ItemType Directory -Path $out_dir -Force | Out-Null
}

$files = Get-ChildItem -Path $flow_dir -Filter "$Filter.flow" -ErrorAction Stop

foreach ($file in $files) {
  $flow_file = $file.FullName
  $json_file = Join-Path $out_dir "$($file.BaseName).json"

  Write-Host "==> Running: $($file.Name)" -ForegroundColor Yellow

  # Sadece temel adımlar ve opsiyonel ExtraArgs. Timeout yok, BaseUrl yok.
  $python_command = "python tools\pw_flow.py --steps '$flow_file' --out '$json_file'"

  if ($ExtraArgs) {
    $python_command += " $ExtraArgs"
  }

  Write-Host "[run_and_guard] $($python_command)"

  try {
    # Doğrudan python çağrısı
    Invoke-Expression $python_command
    $exitCode = $LASTEXITCODE
  }
  catch {
    Write-Host "Python çağrısında hata: $_" -ForegroundColor Red
    $exitCode = 1
  }

  Write-Host "[guard] wrote: $($json_file)" -ForegroundColor Magenta
  if ($exitCode -ne 0) {
    Write-Host "[err] $($file.Name) exit=$exitCode" -ForegroundColor Red
  }
}
### DOSYA BİTİŞ: run_backlog_beep.ps1

### DOSYA BAŞLANGIÇ: .\\ops\report_console.ps1
param(
  [string]$OutDir = ".\_otokodlama\out"
)

$ErrorActionPreference = "Stop"

$files = Get-ChildItem -Path $OutDir -Filter "*.json" -ErrorAction Stop
Write-Host ""
Write-Host "==================== PIPELINE ÖZET RAPORU ====================" -ForegroundColor Cyan
Write-Host "Dosya                     Sonuç    Detay"
Write-Host "--------------------------------------------------------------"

$totalPass = 0
$totalFail = 0
$totalError = 0

foreach ($file in $files) {
    $content = Get-Content $file.FullName -Raw | ConvertFrom-Json -ErrorAction SilentlyContinue
    $result = ""
    $detail = ""

    if (-not $content) {
        $result = "ERROR"
        $detail = "JSON Parse Hatası"
        $totalError++
    }
    elseif ($content.status -eq "PASS") {
        $result = "PASS"
        $totalPass++
    }
    elseif ($content.status -eq "FAIL") {
        $result = "FAIL"
        $detail = $content.error -replace '\r?\n.*', '' # İlk satırı al
        $totalFail++
    }
    else {
        $result = "UNKNOW"
        $totalError++
    }

    "{0,-30} {1,-8} {2}" -f $file.Name, $result, $detail
}

Write-Host "--------------------------------------------------------------"
Write-Host "PASS: $totalPass    FAIL: $totalFail    ERROR: $totalError" -ForegroundColor Green
Write-Host "==============================================================" -ForegroundColor Cyan
### DOSYA BİTİŞ: report_console.ps1

### DOSYA BAŞLANGIÇ: .\\tools\img_hash_compare.ps1
param(
  [Parameter(Mandatory=$true)][string]$A,
  [Parameter(Mandatory=$true)][string]$B
)
Add-Type -AssemblyName System.Drawing

function Get-ImageHash([string]$path) {
  if (!(Test-Path $path)) { throw "Image not found: $path" }
  $bmp = New-Object System.Drawing.Bitmap (Get-Item $path).FullName
  try {
    $thumb = New-Object System.Drawing.Bitmap 8,8
    $g = [System.Drawing.Graphics]::FromImage($thumb)
    $g.InterpolationMode = "HighQualityBicubic"
    $g.DrawImage($bmp, 0,0, 8,8)
    $g.Dispose()
    $vals = New-Object 'System.Collections.Generic.List[double]'
    for ($y=0;$y -lt 8;$y++) { for ($x=0;$x -lt 8;$x++) {
      $c = $thumb.GetPixel($x,$y)
      $vals.Add(0.299*$c.R + 0.587*$c.G + 0.114*$c.B)
    } }
    $avg = ($vals | Measure-Object -Average).Average
    $bits = New-Object 'System.Collections.Generic.List[int]'
    foreach ($v in $vals) { $bits.Add( [int]([double]$v - $avg -ge 0) ) }
    return ($bits -join '')
  } finally {
    $bmp.Dispose(); $thumb.Dispose()
  }
}

$h1 = Get-ImageHash $A
$h2 = Get-ImageHash $B
$dist = 0; for ($i=0;$i -lt 64;$i++) { if ($h1[$i] -ne $h2[$i]) { $dist++ } }
$sim = 1.0 - ($dist / 64.0)

$result = @{ a=$A; b=$B; similarity=[Math]::Round($sim,4) } | ConvertTo-Json -Compress
$result
if ($sim -ge 0.90) { exit 0 } else { exit 2 }
### DOSYA BİTİŞ: img_hash_compare.ps1

### DOSYA BAŞLANGIÇ: .\\tools\apply_runcard.ps1
param(
  [Parameter(Mandatory=$true)]
  [string]$Card,
  [switch]$NoConfirm
)
$ErrorActionPreference="Stop"

if (!(Test-Path $Card)) { throw "Runcard not found: $Card" }
$lines = Get-Content $Card

foreach ($raw in $lines) {
  $line = $raw.Trim()
  if ($line -eq '' -or $line.StartsWith('#')) { continue }

  if ($line -match '^\s*ps>\s*(.+)$') {
    $cmd = $Matches[1]
    Write-Host ">> $cmd"
    Invoke-Expression $cmd
    if ($LASTEXITCODE -ne $null -and $LASTEXITCODE -ne 0) {
      throw "Command failed (exit $LASTEXITCODE): $cmd"
    }
  } else {
    Write-Host "[SKIP] $line"
  }
}
Write-Host "[RUNCARD] done."
### DOSYA BİTİŞ: apply_runcard.ps1

### DOSYA BAŞLANGIÇ: .\\tools\apply_codepack.ps1
param(
  [Parameter(Mandatory=$true)]
  [string]$Pack
)
$ErrorActionPreference="Stop"

if (!(Test-Path $Pack)) { throw "Pack not found: $Pack" }
$content = Get-Content $Pack -Raw

$regex = [regex]'(?ms)^\s*###>\s*(?<path>.+?)\r?\n(?<body>.*?)(?:\r?\n)?###<'
$matches = $regex.Matches($content)
if ($matches.Count -eq 0) { throw "No blocks found. Use ###> <path> ... ###< delimiters." }

$root = Get-Location
$written = @()
foreach ($m in $matches) {
  $rel = $m.Groups['path'].Value.Trim()
  $body = $m.Groups['body'].Value
  $dest = Join-Path $root $rel
  $dir  = Split-Path $dest -Parent
  if ($dir -and !(Test-Path $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }
  [IO.File]::WriteAllText($dest, $body, [Text.UTF8Encoding]::new($false))
  $written += $rel
  Write-Host "[WRITE] $rel"
}
"[OK] Wrote $($written.Count) file(s)."
### DOSYA BİTİŞ: apply_codepack.ps1

### DOSYA BAŞLANGIÇ: .\\tools\pipeline_and_next.ps1
param(
  [string]$BindHost = "127.0.0.1",
  [int]$Port = 8010,
  [switch]$SkipFlows,
  [switch]$NonBlocking,
  [switch]$DryRun
)

$ErrorActionPreference = "Stop"

# --- Yol / klasörler ---
$repoRoot = Split-Path $PSCommandPath -Parent | Split-Path -Parent
$outDir   = Join-Path $repoRoot "_otokodlama\out"
$logFile  = Join-Path $repoRoot "_otokodlama\pipeline_last.log"
New-Item -ItemType Directory -Force -Path $outDir | Out-Null

# --- Yardımcılar ---
function Start-DjangoServer {
  param([string]$BindAddr, [int]$BindPort)   # $Host çakışması yok
  $args = @("manage.py","runserver","$BindAddr`:$BindPort","--settings=core.settings_maintenance","--noreload")
  $p = Start-Process -FilePath "python" -ArgumentList $args -PassThru -WorkingDirectory $repoRoot -WindowStyle Hidden
  return $p
}

function Wait-ServerUp {
  param([string]$Url, [int]$TimeoutSec = 90)
  $deadline = (Get-Date).AddSeconds($TimeoutSec)
  while((Get-Date) -lt $deadline){
    try {
      $r = Invoke-WebRequest -Uri $Url -UseBasicParsing -TimeoutSec 5
      if ($r.StatusCode -ge 200 -and $r.StatusCode -lt 500){ return $true }
    } catch { Start-Sleep -Milliseconds 500 }
  }
  return $false
}

function Stop-ProcessSafe {
  param([int]$ProcId)   # $PID çakışması yok
  try { if ($ProcId) { Stop-Process -Id $ProcId -Force -ErrorAction Stop } } catch {}
}

# --- Sunucu başlat ---
$server = Start-DjangoServer -BindAddr $BindHost -BindPort $Port
"[$(Get-Date -Format HH:mm:ss)] DEV server PID=$($server.Id)" | Tee-Object -FilePath $logFile -Append | Out-Null
Start-Sleep -Seconds 2

$baseUrl = "http://$BindHost`:$Port"

# *** KRİTİK: Playwright için BASE_URL ve Django settings ***
$env:BASE_URL = $baseUrl
$env:DJANGO_SETTINGS_MODULE = "core.settings_maintenance"
$env:PYTHONUNBUFFERED = "1"

if (-not (Wait-ServerUp -Url "$baseUrl/admin/login/" -TimeoutSec 90)) {
  Write-Warning "[SERVER] Ayağa kalkmadı ama NonBlocking mod akışı deneyecek."
}

# --- Flows çalıştır ---
$runFlows = Join-Path $repoRoot "tools\run_flows.ps1"
$flows_ok = $true
$flows_rc = $null
if (-not $SkipFlows -and (Test-Path $runFlows)) {
  if ($NonBlocking) {
    & powershell -NoProfile -ExecutionPolicy Bypass -File $runFlows -Soft
  } else {
    & powershell -NoProfile -ExecutionPolicy Bypass -File $runFlows -FailFast
  }
  $flows_rc = $LASTEXITCODE
  $flows_ok = ($NonBlocking) -or ($flows_rc -eq 0)
}

# --- Görsel gate (varsa) ---
$visual_ok = $true
$vg = Join-Path $repoRoot "tools\visual_gate.ps1"
if (Test-Path $vg) {
  & powershell -NoProfile -ExecutionPolicy Bypass -File $vg
  $visual_ok = ($LASTEXITCODE -eq 0)
}

# --- Layout acceptance (THROW YOK; asla patlatma) ---
$layout_json = Join-Path $outDir "layout_report.json"
$sim = 1.0
$layout_ok = $true
if (Test-Path $layout_json) {
  try {
    $lj = Get-Content $layout_json -Raw | ConvertFrom-Json
    if ($lj.similarity -ne $null) { $sim = [double]$lj.similarity }
    $layout_ok = $true
  } catch {
    Write-Warning "[NEXT] layout_report.json okunamadı; layout gate devre dışı."
    $sim = 1.0; $layout_ok = $true
  }
} else {
  Write-Warning "[NEXT] layout_report.json yok; layout gate devre dışı."
  $sim = 1.0; $layout_ok = $true
}

# --- NEXT kararı ---
if ($layout_ok -and $flows_ok -and $visual_ok) {
  Write-Host "[ACCEPT] mode=guided similarity=$sim target=target.png"
  Write-Host "[NEXT] OK (layout AND flows)."
  # ops/next_ok_runcard.txt çalıştır
  $card = Join-Path $repoRoot "ops\next_ok_runcard.txt"
  if (Test-Path $card) {
    if ($DryRun) {
      Write-Host "[DRY] tools\apply_runcard.ps1 -Card $card -NoConfirm"
    } else {
      $apply = Join-Path $repoRoot "tools\apply_runcard.ps1"
      if (Test-Path $apply) {
        & powershell -NoProfile -ExecutionPolicy Bypass -File $apply -Card $card -NoConfirm
      }
    }
  }
} else {
  Write-Warning "[NEXT] NOT satisfied. layout_ok=$layout_ok flows_ok=$flows_ok visual_ok=$visual_ok (sim=$sim)"
}

# --- Sunucuyu kapat ---
if ($server -and $server.Id) { Stop-ProcessSafe -ProcId $server.Id }

# Ortamı kirletmeyelim (isteğe bağlı)
Remove-Item Env:BASE_URL -ErrorAction SilentlyContinue
Remove-Item Env:DJANGO_SETTINGS_MODULE -ErrorAction SilentlyContinue
Remove-Item Env:PYTHONUNBUFFERED -ErrorAction SilentlyContinue

exit 0
### DOSYA BİTİŞ: pipeline_and_next.ps1

### DOSYA BAŞLANGIÇ: .\\tools\run_pipeline_venv.ps1
# REV: 1.0 | 2025-09-25 | Hash: a1f2c3d4 | Parça: 1/1
param()
$ErrorActionPreference = "Stop"
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$RepoRoot  = Resolve-Path (Join-Path $ScriptDir "..")
$VenvPy    = Join-Path $RepoRoot "venv\Scripts\python.exe"
if (!(Test-Path $VenvPy)) { throw "Venv bulunamadı: $VenvPy" }
$env:PATH                   = (Join-Path $RepoRoot "venv\Scripts") + ";" + $env:PATH
$env:PYTHONPATH             = $RepoRoot
$env:DJANGO_SETTINGS_MODULE = "core.settings"
& $VenvPy -c "import importlib.util,sys; sys.exit(0 if importlib.util.find_spec('playwright') else 1)"
if ($LASTEXITCODE -ne 0) {
  Write-Host "==> Playwright kuruluyor..."
  & $VenvPy -m pip install --disable-pip-version-check -q playwright
  if ($LASTEXITCODE -ne 0) { throw "pip install playwright başarısız." }
  & $VenvPy -m playwright install chromium
  if ($LASTEXITCODE -ne 0) { throw "playwright install chromium başarısız." }
}
Write-Host "==> pipeline.ps1 çalışıyor..."
. (Join-Path $RepoRoot "pipeline.ps1")
### DOSYA BİTİŞ: run_pipeline_venv.ps1

### DOSYA BAŞLANGIÇ: .\\tools\serve_then_pipeline.ps1
# REV: 1.0 | 2025-09-25 | Hash: 7b3e92ad | Parça: 1/1
param(
  [string]$BindHost = "127.0.0.1",
  [int]$Port = 8000
)
$ErrorActionPreference = "Stop"

# Yol/ortam
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$RepoRoot  = Resolve-Path (Join-Path $ScriptDir "..")
$VenvPy    = Join-Path $RepoRoot "venv\Scripts\python.exe"
if (!(Test-Path $VenvPy)) { throw "Venv bulunamadı: $VenvPy" }

$env:PATH                   = (Join-Path $RepoRoot "venv\Scripts") + ";" + $env:PATH
$env:PYTHONPATH             = $RepoRoot
$env:DJANGO_SETTINGS_MODULE = "core.settings"

# Config & hedef ekran görüntüsü
$cfgPath = Join-Path $RepoRoot "pipeline.config.json"
if (!(Test-Path $cfgPath)) { throw "pipeline.config.json yok: $cfgPath" }
try { $cfg = Get-Content $cfgPath -Raw | ConvertFrom-Json } catch { throw "pipeline.config.json geçersiz JSON." }

$targetPng = Join-Path $RepoRoot $cfg.target_screenshot
if (!(Test-Path $targetPng)) {
  $shotsDir = Join-Path $RepoRoot $cfg.screenshots_dir
  if (Test-Path $shotsDir) {
    $latest = Get-ChildItem $shotsDir -Filter *.png | Sort-Object LastWriteTime -Descending | Select-Object -First 1
    if ($latest) {
      New-Item -ItemType Directory -Force -Path (Split-Path $targetPng) | Out-Null
      Copy-Item $latest.FullName $targetPng -Force
      Write-Host "==> Target oluşturuldu: $targetPng"
    }
  }
}

# Sunucu
Write-Host "==> runserver başlatılıyor..."
$runArgs = @("manage.py","runserver","$BindHost`:$Port","--noreload")
$server  = Start-Process -FilePath $VenvPy -ArgumentList $runArgs -PassThru -WindowStyle Hidden -WorkingDirectory $RepoRoot

# Port bekleme
$ok = $false
for($i=1; $i -le 60; $i++){
  if (Test-NetConnection $BindHost -Port $Port -InformationLevel Quiet) { $ok = $true; break }
  Start-Sleep -Milliseconds 500
}
if(-not $ok){
  try { if($server -and !$server.HasExited){ $server | Stop-Process -Force } } catch {}
  throw "runserver portu (${BindHost}:$Port) açılmadı."
}

# Pipeline
Write-Host "==> pipeline"
. (Join-Path $RepoRoot "tools\run_pipeline_venv.ps1")

# Sunucuyu kapat
Write-Host "==> runserver kapatılıyor..."
try { if($server -and !$server.HasExited){ $server | Stop-Process -Force } } catch {}

# Son rapor
$outRoot = Join-Path $RepoRoot "_otokodlama\out"
if (Test-Path $outRoot) {
  $last = Get-ChildItem $outRoot -Directory | Sort-Object LastWriteTime -Descending | Select-Object -First 1
  if ($last) {
    $lay = Join-Path $last.FullName "layout_report.json"
    if (Test-Path $lay) {
      Write-Host "==> layout_report.json:"
      Get-Content $lay -Raw | Write-Host
    } else {
      Write-Host "layout_report.json bulunamadı."
    }
  } else {
    Write-Host "_otokodlama\out altında klasör yok."
  }
} else {
  Write-Host "_otokodlama\out bulunamadı."
}

Write-Host "[ALL DONE]"
### DOSYA BİTİŞ: serve_then_pipeline.ps1

### DOSYA BAŞLANGIÇ: .\\tools\run_flows.ps1
param(
  [switch],
  [switch]
)
\Continue = "Stop"

\ = Get-Location
\ = Join-Path \ "_otokodlama\out"
New-Item -ItemType Directory -Force -Path \ | Out-Null

# BASE_URL garanti olsun
if (-not \http://127.0.0.1:8010 -or [string]::IsNullOrWhiteSpace(\http://127.0.0.1:8010)) {
  \http://127.0.0.1:8010 = "http://127.0.0.1:8010"
}

# Koşturulacak flow listesi (klasörde varsa)
\ = @(
  "ops\flows\admin_home.flow",
  "ops\flows\admin_plan.flow",
  "ops\flows\admin_calibrations.flow",
  "ops\flows\admin_checklists.flow",
  "ops\flows\admin_equipment.flow",
  # Genel validatorlar:
  "ops\flows\admin_order_add_validate.flow",
  "ops\flows\admin_app_index_validate.flow"
) | Where-Object { Test-Path \ }

\ = @()
\ = \False

foreach (\# Admin > Equipment (click path; tolerate error pages)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
WAIT SELECTOR a[href="/admin/maintenance/equipment/"]
CLICK a[href="/admin/maintenance/equipment/"]
WAIT SELECTOR body
SCREENSHOT targets/screens/admin-equipment.png in \) {
  \ = [IO.Path]::GetFileName(\# Admin > Equipment (click path; tolerate error pages)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
WAIT SELECTOR a[href="/admin/maintenance/equipment/"]
CLICK a[href="/admin/maintenance/equipment/"]
WAIT SELECTOR body
SCREENSHOT targets/screens/admin-equipment.png)
  \ = [IO.Path]::GetFileNameWithoutExtension(\# Admin > Equipment (click path; tolerate error pages)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
WAIT SELECTOR a[href="/admin/maintenance/equipment/"]
CLICK a[href="/admin/maintenance/equipment/"]
WAIT SELECTOR body
SCREENSHOT targets/screens/admin-equipment.png)
  \ = Join-Path \ (\ + ".json")

  Write-Host "[FLOW] \# Admin > Equipment (click path; tolerate error pages)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
WAIT SELECTOR a[href="/admin/maintenance/equipment/"]
CLICK a[href="/admin/maintenance/equipment/"]
WAIT SELECTOR body
SCREENSHOT targets/screens/admin-equipment.png"
  & python tools\pw_flow.py --steps \# Admin > Equipment (click path; tolerate error pages)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
WAIT SELECTOR a[href="/admin/maintenance/equipment/"]
CLICK a[href="/admin/maintenance/equipment/"]
WAIT SELECTOR body
SCREENSHOT targets/screens/admin-equipment.png --out \
  \ = \1

  \ = \False
  \ = \
  if (Test-Path \) {
    try {
      \ = Get-Content \ -Raw | ConvertFrom-Json
      \ = [bool]\.ok
      if (-not \ -and \.results) {
        \ = (\.results | Where-Object { -not \.ok } | Select-Object -First 1)
      }
    } catch {
      \ = \False
      \ = @{ cmd="PARSE_JSON"; arg=\; url=""; error=\.Exception.Message }
    }
  } else {
    \ = \False
    \ = @{ cmd="NO_JSON"; arg=\; url=""; error="json üretilmedi (rc=\)" }
  }

  if (\) {
    Write-Host "[FLOW] PASSED: \"
  } else {
    Write-Warning "[FLOW] FAILED: \"
    \ = \True
    if (\ -and -not \) { break }
  }

  \ += [pscustomobject]@{
    name = \
    flow = \
    ok   = \
    out  = ".\_otokodlama\out\.json"
    first_error = \
  }
}

# flows_report.json: { "flows": [...] }
@{ flows = \ } | ConvertTo-Json -Depth 6 | Set-Content (Join-Path \ "flows_report.json") -Encoding utf8

if (\) {
  exit 0
} else {
  if (\) { exit 1 } else { exit 0 }
}
### DOSYA BİTİŞ: run_flows.ps1

### DOSYA BAŞLANGIÇ: .\\tools\visual_gate.ps1
param([string]$State="ops\state.json")
$ErrorActionPreference="Stop"

# Repo kökü: tools klasörünün bir üstü
$repoRoot = Split-Path $PSScriptRoot -Parent

# state.json mutlak değilse repo köküne göre çöz
if ([IO.Path]::IsPathRooted($State)) { $statePath = $State } else { $statePath = Join-Path $repoRoot $State }

$outD  = Join-Path $repoRoot "_otokodlama\out"
New-Item -ItemType Directory -Force -Path $outD | Out-Null

$report = @{ ok=$true; items=@(); state=$statePath }

if (!(Test-Path $statePath)) {
  Write-Host "[VISUAL] no state.json, skipping -> $statePath"
  $report | ConvertTo-Json -Depth 5 | Set-Content "$outD\visual_report.json"
  exit 0
}

$state = Get-Content $statePath -Raw | ConvertFrom-Json
$steps = @($state.steps)

if ($null -eq $steps -or $steps.Count -eq 0) {
  Write-Host "[VISUAL] no steps in state.json"
  $report | ConvertTo-Json -Depth 5 | Set-Content "$outD\visual_report.json"
  exit 0
}

function Resolve-Rel([string]$p) {
  if ([string]::IsNullOrWhiteSpace($p)) { return $null }
  if ([IO.Path]::IsPathRooted($p)) { return $p }
  return (Join-Path $repoRoot $p)
}

$allOk = $true
foreach ($s in $steps) {
  $id  = $s.id
  $url = $s.url
  $vis = $s.visual

  $hasVis = ($null -ne $vis) -and ($vis.PSObject.Properties.Count -gt 0)
  if (-not $hasVis) {
    $report.items += @{ id=$id; url=$url; ok=$true; note="no visual config (skipped)" }
    continue
  }

  $base = Resolve-Rel $vis.baseline
  $curr = Resolve-Rel $vis.actual
  $thr  = 0.90
  if ($vis.threshold) { $thr = [double]$vis.threshold }

  if ([string]::IsNullOrWhiteSpace($base) -or [string]::IsNullOrWhiteSpace($curr)) {
    $report.items += @{ id=$id; url=$url; ok=$false; error="visual.baseline/actual missing" }
    $allOk = $false
    continue
  }
  if (!(Test-Path $base)) {
    $report.items += @{ id=$id; url=$url; ok=$false; error="baseline not found: $base" }
    $allOk = $false
    continue
  }
  if (!(Test-Path $curr)) {
    $report.items += @{ id=$id; url=$url; ok=$false; error="actual not found: $curr" }
    $allOk = $false
    continue
  }

  $json = & powershell -NoProfile -ExecutionPolicy Bypass -File (Join-Path $PSScriptRoot "img_hash_compare.ps1") -A $base -B $curr
  $obj  = $json | ConvertFrom-Json
  $ok   = ([double]$obj.similarity -ge $thr)
  if (-not $ok) { $allOk = $false }

  $report.items += @{
    id=$id; url=$url; ok=$ok; similarity=$obj.similarity; threshold=$thr;
    baseline=$base; actual=$curr
  }
}

$report.ok = $allOk
$report | ConvertTo-Json -Depth 5 | Set-Content "$outD\visual_report.json"
if ($allOk) { Write-Host "[VISUAL] ALL PASSED"; exit 0 } else { Write-Warning "[VISUAL] SOME FAILED"; exit 1 }
### DOSYA BİTİŞ: visual_gate.ps1

### DOSYA BAŞLANGIÇ: .\\tools\run_all.ps1
param([string]$BindHost="127.0.0.1",[int]$Port=8000)
$ErrorActionPreference="Stop"

# Betiklerle aynı klasörde güvenli çağrı
$serve = Join-Path $PSScriptRoot 'serve_then_pipeline.ps1'
$accept = Join-Path $PSScriptRoot 'accept_visual.ps1'

powershell -ExecutionPolicy Bypass -File $serve -BindHost $BindHost -Port $Port
powershell -ExecutionPolicy Bypass -File $accept
### DOSYA BİTİŞ: run_all.ps1

### DOSYA BAŞLANGIÇ: .\\ops\smoke_links_wrapper.ps1
param(
  [string]$Base,
  [string]$Start,
  [string]$Out,
  [int]   $Depth,
  [int]   $Limit,
  [string]$PathPrefix,
  [int]   $Timeout,
  [string]$OkRedirectTo
)
& "$PSScriptRoot\smoke_links.ps1" `
  -Base $Base `
  -Start $Start `
  -Out $Out `
  -Depth $Depth `
  -Limit $Limit `
  -PathPrefix $PathPrefix `
  -Timeout $Timeout `
  -OkRedirectTo $OkRedirectTo
### DOSYA BİTİŞ: smoke_links_wrapper.ps1

### DOSYA BAŞLANGIÇ: .\\ops\state_tools.ps1
param(
  # Varsayılan yol, bu dosyanın (ops/) yanına state.json olarak ayarlanır
  [string]$StatePath = ""
)

$ErrorActionPreference = "Stop"

# --- Yol yardımcıları ---
$__ThisFile   = $MyInvocation.MyCommand.Path
$__ScriptRoot = Split-Path -Parent $__ThisFile
if ([string]::IsNullOrWhiteSpace($StatePath)) {
  $StatePath = Join-Path $__ScriptRoot "state.json"
}

function _Is-Hashtable { param($x) return ($x -is [hashtable]) }
function _Is-PSObj     { param($x) return ($x -is [pscustomobject]) }

function _Ensure-Dir {
  param([Parameter(Mandatory=$true)][string]$Path)
  $dir = Split-Path -Parent $Path
  if ($dir -and -not (Test-Path $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }
}

function _Ensure-Prop {
  param($Obj,[string]$Name,$Default=$null)
  if (_Is-Hashtable $Obj) { if (-not $Obj.ContainsKey($Name)) { $Obj[$Name]=$Default }; return }
  if (-not $Obj.PSObject.Properties[$Name]) { Add-Member -InputObject $Obj -MemberType NoteProperty -Name $Name -Value $Default }
}

function _Set-Prop {
  param($Obj,[string]$Name,$Value)
  if (_Is-Hashtable $Obj) { $Obj[$Name]=$Value; return }
  if (-not $Obj.PSObject.Properties[$Name]) { Add-Member -InputObject $Obj -MemberType NoteProperty -Name $Name -Value $Value }
  else { $Obj.$Name = $Value }
}

# Map benzeri alanlara anahtar/değer yaz (Hashtable veya PSCustomObject fark etmeksizin)
function _Map-Set {
  param($Map,[string]$Key,$Value)
  if (_Is-Hashtable $Map) { $Map[$Key] = $Value; return }
  if (-not $Map.PSObject.Properties[$Key]) { Add-Member -InputObject $Map -MemberType NoteProperty -Name $Key -Value $Value }
  else { $Map.$Key = $Value }
}

# Map benzeri alanın anahtarlarını döndür
function _Map-Keys {
  param($Map)
  if (_Is-Hashtable $Map) { return $Map.Keys }
  return ($Map.PSObject.Properties | Select-Object -ExpandProperty Name)
}

function Get-State {
  param([string]$Path = $StatePath)
  try {
    if (Test-Path $Path) {
      $s = Get-Content -LiteralPath $Path -Raw | ConvertFrom-Json
      _Ensure-Prop $s 'project' ''
      _Ensure-Prop $s 'repo' ''
      _Ensure-Prop $s 'pipeline' (@{ stage="validate_ui_pages"; history=@() })
      _Ensure-Prop $s 'tests'    (@{ results=@{}; summary=@{ passed=0; failed=0; last_run="" } })
      _Ensure-Prop $s 'pending_actions' @()
      _Ensure-Prop $s 'last_updated'    ""
      _Ensure-Prop $s.pipeline 'stage'   'validate_ui_pages'
      _Ensure-Prop $s.pipeline 'history' @()
      _Ensure-Prop $s.tests    'results' @{}
      _Ensure-Prop $s.tests    'summary' (@{ passed=0; failed=0; last_run="" })
      _Ensure-Prop $s.tests.summary 'passed'   0
      _Ensure-Prop $s.tests.summary 'failed'   0
      _Ensure-Prop $s.tests.summary 'last_run' ""
      return $s
    }
  } catch { }

  return [pscustomobject]@{
    project=""
    repo=""
    pipeline=@{ stage="validate_ui_pages"; history=@() }
    tests=@{ results=@{}; summary=@{ passed=0; failed=0; last_run="" } }
    pending_actions=@()
    last_updated=""
  }
}

function Save-State {
  param([Parameter(Mandatory=$true)]$State,[string]$Path=$StatePath)
  _Ensure-Prop $State 'last_updated' ""
  _Set-Prop    $State 'last_updated' ((Get-Date).ToString("s"))
  _Ensure-Dir  -Path $Path
  $json = $State | ConvertTo-Json -Depth 20
  [IO.File]::WriteAllText($Path,$json,[Text.UTF8Encoding]::new($false))
}

function Update-TestResult {
  param(
    [Parameter(Mandatory=$true)][string]$Key,
    [ValidateSet("PASSED","FAILED")][string]$Status,
    [hashtable]$Metrics,[hashtable]$Artifacts,
    [string]$StatePathParam = $StatePath
  )
  $st = Get-State -Path $StatePathParam
  _Ensure-Prop $st 'tests' (@{ results=@{}; summary=@{passed=0;failed=0;last_run=""} })
  _Ensure-Prop $st.tests 'results' @{}
  _Ensure-Prop $st.tests 'summary' (@{ passed=0; failed=0; last_run="" })
  if (-not $Metrics)   { $Metrics   = @{} }
  if (-not $Artifacts) { $Artifacts = @{} }

  $entry = @{
    status=$Status; metrics=$Metrics; artifacts=$Artifacts; ts=(Get-Date).ToString("s")
  }
  _Map-Set $st.tests.results $Key $entry

  $passed=0; $failed=0
  foreach($k in (_Map-Keys $st.tests.results)){
    $it = if (_Is-Hashtable $st.tests.results) { $st.tests.results[$k] } else { $st.tests.results.$k }
    if($it.status -eq "PASSED"){$passed++}else{$failed++}
  }
  _Set-Prop $st.tests.summary 'passed'   $passed
  _Set-Prop $st.tests.summary 'failed'   $failed
  _Set-Prop $st.tests.summary 'last_run' ((Get-Date).ToString("s"))

  Save-State -State $st -Path $StatePathParam
}

function Add-PendingAction {
  param(
    [Parameter(Mandatory=$true)][string]$Id,
    [Parameter(Mandatory=$true)][string]$Type,
    [Parameter(Mandatory=$true)][string]$Detail,
    [string]$DueStage="",
    [string]$StatePathParam = $StatePath
  )
  $st = Get-State -Path $StatePathParam
  _Ensure-Prop $st 'pending_actions' @()
  $st.pending_actions += @{ id=$Id; type=$Type; detail=$Detail; due_stage=$DueStage; ts=(Get-Date).ToString("s"); status="open" }
  Save-State -State $st -Path $StatePathParam
}

function Advance-Pipeline {
  param([Parameter(Mandatory=$true)][string]$ToStage,[string]$Hint="",[string]$StatePathParam=$StatePath)
  $st = Get-State -Path $StatePathParam
  _Ensure-Prop $st 'pipeline' (@{ stage="validate_ui_pages"; history=@() })
  _Ensure-Prop $st.pipeline 'stage' "validate_ui_pages"
  _Ensure-Prop $st.pipeline 'history' @()
  $st.pipeline.history += @{ from=$st.pipeline.stage; to=$ToStage; hint=$Hint; ts=(Get-Date).ToString("s") }
  _Set-Prop $st.pipeline 'stage' $ToStage
  Save-State -State $st -Path $StatePathParam
}
### DOSYA BİTİŞ: state_tools.ps1

### DOSYA BAŞLANGIÇ: .\\tools\accept_visual.ps1
# tools/accept_visual.ps1
# Görsel kabul (baseline güncelleme) otomasyonu
param()

$ErrorActionPreference = "Stop"
$RepoRoot = Split-Path -Parent $MyInvocation.MyCommand.Path | Split-Path

# 1) config oku
$cfgPath = Join-Path $RepoRoot "pipeline.config.json"
$cfg = Get-Content $cfgPath -Raw | ConvertFrom-Json
$mode = $cfg.acceptance.mode
$auto = $cfg.acceptance.auto_accept_if

# 2) layout_report.json nerede? (root veya _otokodlama/out altında)
$report = $null
$try1 = Join-Path $RepoRoot "layout_report.json"
if (Test-Path $try1) { $report = $try1 } else {
  $outDir = Join-Path $RepoRoot "_otokodlama\out"
  if (Test-Path $outDir) {
    $last = Get-ChildItem $outDir -Directory | Sort-Object LastWriteTime -Descending | Select-Object -First 1
    if ($last) {
      $try2 = Join-Path $last.FullName "layout_report.json"
      if (Test-Path $try2) { $report = $try2 }
    }
  }
}
if (-not $report) { Write-Host "[ACCEPT] layout_report.json bulunamadı." ; exit 0 }

$j = Get-Content $report -Raw | ConvertFrom-Json
$sim = [double]$j.similarity
$latest = Resolve-Path (Join-Path $RepoRoot $j.latest_screenshot)
$target = Resolve-Path (Join-Path $RepoRoot $j.target)

Write-Host "[ACCEPT] mode=$mode similarity=$sim target=$(Split-Path $target -Leaf)"

function Accept-Baseline {
  Copy-Item $latest $target -Force
  Write-Host "[ACCEPT] Baseline güncellendi -> $($target)"
}

switch ($mode) {
  "locked"  { Write-Host "[ACCEPT] locked modunda otomatik kabul yapılmaz." ; exit 0 }
  "rolling" { Accept-Baseline ; exit 0 }
  "guided"  {
    if ($sim -ge $auto) { Accept-Baseline ; exit 0 }
    else { Write-Host "[ACCEPT] guided: otomatik kabul eşiği tutmadı (>= $auto gerekli)." ; exit 0 }
  }
  default   { Write-Host "[ACCEPT] Bilinmeyen mode: $mode" ; exit 0 }
}
### DOSYA BİTİŞ: accept_visual.ps1

### DOSYA BAŞLANGIÇ: .\\ops\run_and_guard.ps1
param(
  [Parameter(Mandatory=$true)][string]$flow,         # .flow dosyasının tam yolu
  [Parameter(Mandatory=$true)][string]$outPath,      # JSON çıktı yolu
  [string]$BaseUrl = "http://127.0.0.1:8010",        # BASE_URL env
  [string]$ExtraArgs = ""                            # pw_flow.py'ye ham argümanlar ("--timeout 5000" gibi)
)

$ErrorActionPreference = "Stop"

# Ortam değişkenleri
$env:BASE_URL = $BaseUrl
$env:PYTHONUNBUFFERED = "1"

# Çıktı klasörünü garanti et
$op = Split-Path -Parent $outPath
if ($op -and -not (Test-Path $op)) { New-Item -ItemType Directory -Force -Path $op | Out-Null }

# Extra argümanları güvenli diziye çevir
$ea = @()
if ($ExtraArgs) {
  # whitespace'e göre böl (ör: "--timeout 5000")
  $ea = $ExtraArgs -split '\s+'
}

# Python çağrısı (doğrudan, güvenli)
Write-Host ("[run_and_guard] python tools\pw_flow.py --steps {0} --out {1} {2}" -f $flow, $outPath, ($ea -join " "))
& python -u "tools\pw_flow.py" --steps $flow --out $outPath @ea
$exitCode = $LASTEXITCODE

# Guard tarzı bilgi satırı (izleme kolaylığı için)
if (Test-Path $outPath) { Write-Host "[guard] wrote: $outPath" }

exit $exitCode
### DOSYA BİTİŞ: run_and_guard.ps1

### DOSYA BAŞLANGIÇ: .\\ops\report_crud.ps1
param(
  [string]$OutDir    = "_otokodlama\out",
  [string]$ReportDir = "_otokodlama\reports",
  [string]$Include   = "*.json",
  [int]   $MaxErrLen = 200
)

function New-DirIfMissing($p) { if (!(Test-Path $p)) { New-Item -ItemType Directory -Force -Path $p | Out-Null } }
New-DirIfMissing $ReportDir

function Shorten([string]$s, [int]$n) {
  if ([string]::IsNullOrWhiteSpace($s)) { return "" }
  $flat = ($s -replace "\s+"," ").Trim()
  if ($flat.Length -le $n) { return $flat }
  return $flat.Substring(0,[Math]::Min($n,$flat.Length))
}

function Classify-Failure($step) {
  $cmd = "$($step.cmd)".ToUpper()
  $arg = [string]$step.arg
  $err = [string]$step.error
  $url = [string]$step.url

  if ($cmd -eq "AUTOVALIDATE") {
    $parts = @()
    if ($step.ok_words  -eq $false) { $parts += "kelime-recall" }
    if ($step.ok_visual -eq $false) { $parts += "görsel-benzerlik" }
    if ($step.ok_selects -eq $false){ $parts += "select-kontrolü" }
    if ($parts.Count -eq 0) { $parts = @("autovalidate") }
    return "autovalidate: " + ($parts -join "+")
  }

  if ($err -match "ERR_TOO_MANY_REDIRECTS") { return "redirect-loop" }
  if ($url -like "chrome-error://*")       { return "browser/navigation-error" }
  if ($err -match "ERR_CONNECTION_REFUSED") { return "server-down" }
  if ($err -match "403|Forbidden")          { return "403-forbidden" }
  if ($err -match "401|Unauthorized")       { return "401-unauthorized" }

  if ($err -match "TimeoutError: Page\.wait_for_selector") {
    if ($arg -match "table#result_list")                     { return "liste-boş/kayıt-yok/selector-değişti" }
    if ($arg -match "form#changelist-search|input#searchbar"){ return "arama-çubuğu-bulunamadı" }
    if ($arg -match "form#equipment_form")                   { return "form-yüklenmedi" }
    if ($arg -match "\.messagelist")                         { return "başarı-mesajı-yok" }
    return "selector-timeout"
  }

  if ($cmd -eq "CLICK" -and $err -match "not visible|detached|is not visible") { return "click-mümkün-değil" }
  return "diğer"
}

# Dosya listesi (Include destekli)
$rows = @()
$files = @()
$patterns = $Include -split '[,; ]+' | Where-Object { $_ -and $_.Trim() -ne "" }
if ($patterns.Count -eq 0) { $patterns = @("*.json") }
foreach ($p in $patterns) { $files += Get-ChildItem (Join-Path $OutDir $p) -ErrorAction SilentlyContinue }
if ($files.Count -eq 0)   { $files  = Get-ChildItem (Join-Path $OutDir "*.json") -ErrorAction SilentlyContinue }
$files = $files | Sort-Object LastWriteTime

foreach ($f in $files) {
  # JSON'u UTF-8 olarak oku; gerekirse .NET fallback
  try {
    $raw = Get-Content $f.FullName -Raw -Encoding UTF8
  } catch {
    $raw = [IO.File]::ReadAllText($f.FullName, [Text.UTF8Encoding]::new($true))
  }
  try {
    $j = $raw | ConvertFrom-Json
  } catch {
    $rows += [pscustomobject]@{
      Flow=[IO.Path]::GetFileNameWithoutExtension($f.Name); Pass=$false; FirstFailStep=''; Cmd='';
      Reason='json-parse-error'; ErrorSnippet=(Shorten "$($_.Exception.Message)" $MaxErrLen);
      Url=''; Recall=''; VisualSim=''; OkWords=''; OkVisual=''; OkSelects=''; MissingCount='';
      Log=([IO.Path]::ChangeExtension($f.FullName,'log'))
    }
    continue
  }

  if ($null -eq $j.ok -or $null -eq $j.results) {
    $rows += [pscustomobject]@{
      Flow=[IO.Path]::GetFileNameWithoutExtension($f.Name); Pass=$false; FirstFailStep=''; Cmd='';
      Reason='schema-mismatch'; ErrorSnippet=''; Url=''; Recall=''; VisualSim=''; OkWords=''; OkVisual=''; OkSelects=''; MissingCount='';
      Log=([IO.Path]::ChangeExtension($f.FullName,'log'))
    }
    continue
  }

  $flow  = [IO.Path]::GetFileNameWithoutExtension($f.Name)
  $pass  = [bool]$j.ok
  $steps = @($j.results)
  $firstFail = $steps | Where-Object { $_.ok -ne $true } | Select-Object -First 1

  # Autovalidate metrikleri (varsa)
  $recall=''; $visual=''; $okw=''; $okv=''; $oks=''; $miss=''
  foreach ($s in $steps) {
    if ("$($s.cmd)".ToUpper() -eq "AUTOVALIDATE") {
      $recall=$s.recall; $visual=$s.visual_sim; $okw=$s.ok_words; $okv=$s.ok_visual; $oks=$s.ok_selects; $miss=$s.missing_count
    }
  }

  if (-not $firstFail -and -not $pass) {
    $toolErr = ""; try { $toolErr = [string]$j.tool_error } catch {}
    $rows += [pscustomobject]@{
      Flow=$flow; Pass=$pass; FirstFailStep=''; Cmd=''; Reason='tool-error/no-steps';
      ErrorSnippet=(Shorten $toolErr $MaxErrLen); Url='';
      Recall=$recall; VisualSim=$visual; OkWords=$okw; OkVisual=$okv; OkSelects=$oks; MissingCount=$miss;
      Log=([IO.Path]::ChangeExtension($f.FullName,'log'))
    }
    continue
  }

  if ($firstFail) {
    $rows += [pscustomobject]@{
      Flow=$flow; Pass=$pass; FirstFailStep=$firstFail.i; Cmd=$firstFail.cmd;
      Reason=(Classify-Failure $firstFail); ErrorSnippet=(Shorten([string]$firstFail.error, $MaxErrLen));
      Url=$firstFail.url; Recall=$recall; VisualSim=$visual; OkWords=$okw; OkVisual=$okv; OkSelects=$oks; MissingCount=$miss;
      Log=([IO.Path]::ChangeExtension($f.FullName,'log'))
    }
  } else {
    $lastUrl = ''; if ($steps.Count -gt 0) { $lastUrl = $steps[-1].url }
    $rows += [pscustomobject]@{
      Flow=$flow; Pass=$pass; FirstFailStep=''; Cmd=''; Reason='passed'; ErrorSnippet=''; Url=$lastUrl;
      Recall=$recall; VisualSim=$visual; OkWords=$okw; OkVisual=$okv; OkSelects=$oks; MissingCount=$miss;
      Log=([IO.Path]::ChangeExtension($f.FullName,'log'))
    }
  }
}

# Çıktılar
$csvPath  = Join-Path $ReportDir "crud_summary.csv"
$jsonPath = Join-Path $ReportDir "crud_summary.json"
$mdPath   = Join-Path $ReportDir "crud_summary.md"

New-DirIfMissing $ReportDir
$rows | Export-Csv $csvPath -NoTypeInformation -Encoding UTF8
$rows | ConvertTo-Json -Depth 8 | Out-File $jsonPath -Encoding utf8

$passCount = ($rows | Where-Object {$_.Pass -eq $true}).Count
$failCount = ($rows | Where-Object {$_.Pass -ne $true}).Count
$byReason  = $rows | Group-Object Reason | Sort-Object Count -Descending

$md = @()
$md += "# Admin PW Koşu Özeti"
$md += ""
$md += "*Toplam:* $($rows.Count)  |  *Geçti:* $passCount  |  *Kaldı:* $failCount"
$md += ""
$md += "## Hata Dağılımı"
foreach ($g in $byReason) { $md += "- **$($g.Name)**: $($g.Count)" }
$md += ""
$md += "## Akışlar"
$md += ""
$md += "| Flow | Pass | Reason | FirstFailStep | Cmd | Recall | VisualSim | OkWords | OkVisual | OkSelects | Missing | ErrorSnippet | Log |"
$md += "|------|------|--------|---------------|-----|--------|-----------|---------|----------|-----------|---------|--------------|-----|"
foreach ($r in $rows) {
  $md += "| $($r.Flow) | $($r.Pass) | $($r.Reason) | $($r.FirstFailStep) | $($r.Cmd) | $($r.Recall) | $($r.VisualSim) | $($r.OkWords) | $($r.OkVisual) | $($r.OkSelects) | $($r.MissingCount) | $(($r.ErrorSnippet -replace '\|','/')) | $($r.Log) |"
}
$md -join "`r`n" | Out-File $mdPath -Encoding utf8

Write-Host "== PW RAPORU ==" -ForegroundColor Cyan
"{0,-38} {1,-6} {2,-24} {3,-5} {4}" -f "Flow","Pass","Reason","Step","Cmd"
foreach ($r in $rows) {
  "{0,-38} {1,-6} {2,-24} {3,-5} {4}" -f $r.Flow, $r.Pass, (Shorten $r.Reason 24), $r.FirstFailStep, $r.Cmd
}
Write-Host ""
Write-Host ("CSV : " + $csvPath)
Write-Host ("JSON: " + $jsonPath)
Write-Host ("MD  : " + $mdPath)

### DOSYA BİTİŞ: report_crud.ps1

### DOSYA BAŞLANGIÇ: .\\ops\run_ci_pr_approve.ps1
param()
if (-not $env:OZKAN_PAT) {
  Write-Error "Set OZKAN_PAT (ozkanrepo1 PAT, scopes: repo, read:org)"; exit 1
}
$env:GH_TOKEN = $env:OZKAN_PAT
try {
  & "$PSScriptRoot\auto_pr.ps1" -WaitForMerge
} finally {
  Remove-Item Env:GH_TOKEN -ErrorAction SilentlyContinue
}
### DOSYA BİTİŞ: run_ci_pr_approve.ps1

### DOSYA BAŞLANGIÇ: .\\ops\run_ui_validate_csv.ps1
param(
  [string]$BaseUrl     = "http://127.0.0.1:8010",
  [string]$JobsCsv     = "ops/ui_jobs.csv",
  [string]$BaselineDir = "targets\reference",
  [string]$AlertsDir   = "_otokodlama\alerts"
)

$ErrorActionPreference = "Stop"
$null = New-Item -ItemType Directory -Force -Path "ops\flows",$BaselineDir,"_otokodlama\out",$AlertsDir | Out-Null
$env:BASE_URL = $BaseUrl

# İdempotent redirect fix
Get-ChildItem ops\flows -Filter *equipment*.flow -ErrorAction SilentlyContinue | ForEach-Object {
  (Get-Content $_.FullName -Raw) `
    -replace 'GOTO\s+/admin/maintenance/equipment/(\s*)$', 'GOTO /admin/maintenance/equipment/_direct/$1' `
  | Set-Content -LiteralPath $_.FullName -Encoding UTF8
}

function New-UiBaselineAndValidate {
param(
  [Parameter(Mandatory=$true)][string]$Key,
  [Parameter(Mandatory=$true)][string]$Url,
  [string]$WaitSelector = 'css=:is(form#changelist-form,table#result_list,#content-main,#content,body)',
  [double]$Recall = 0.90,
  [int]$MinTokenLen = 3,
  [switch]$UseOCR,
  [string]$IgnorePatterns = 'csrf,token,\d{2,},page_\d+,id_\d+,ts_\d+'
)
  $baselinePng = Join-Path $BaselineDir ("{0}.png" -f $Key)
  $flowBase = "ops\flows\_{0}_make_baseline.flow" -f $Key
  $flowVal  = "ops\flows\{0}_validate.flow" -f $Key

@"
COMMENT make baseline ($Key)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
GOTO $Url
WAIT SELECTOR $WaitSelector
SCREENSHOT $baselinePng
"@ | Set-Content -LiteralPath $flowBase -Encoding UTF8

  $live = if($UseOCR){"dom+ocr"} else {"dom"}
@"
COMMENT validate $Key ($live)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
GOTO $Url
WAIT SELECTOR $WaitSelector
AUTOVALIDATE key=$Key baseline=$baselinePng words_recall=$Recall live_source=$live alert_dir=$AlertsDir min_token_len=$MinTokenLen ignore_numbers=yes ignore_patterns=$IgnorePatterns
"@ | Set-Content -LiteralPath $flowVal -Encoding UTF8

  $outA = "_otokodlama\out\_{0}_make_baseline.json" -f $Key
  $outB = "_otokodlama\out\{0}_validate.json" -f $Key

  Write-Host "[run] BASELINE → $Key" -ForegroundColor Cyan
  python tools\pw_flow.py --steps $flowBase --out $outA | Out-Host

  Write-Host "[run] VALIDATE → $Key ($live)" -ForegroundColor Yellow
  python tools\pw_flow.py --steps $flowVal  --out $outB | Out-Host

  $j = Get-Content $outB -Raw | ConvertFrom-Json
  $lastAuto = $j.results | Where-Object { $_.cmd -eq 'AUTOVALIDATE' } | Select-Object -Last 1
  [pscustomobject]@{
    key           = $Key
    ok            = $j.ok
    recall        = if($lastAuto){ '{0:N2}' -f [double]$lastAuto.recall } else {''}
    missing_count = if($lastAuto){ $lastAuto.missing_count } else {''}
    out_json      = $outB
  }
}

# === CSV oku (yorum/boş satırları atla) ve çalıştır ===
if (-not (Test-Path $JobsCsv)) { throw "Jobs CSV not found: $JobsCsv" }

$rows =
  Get-Content $JobsCsv |
  Where-Object { $_ -match '\S' -and -not ($_.Trim().StartsWith('#')) } |
  ConvertFrom-Csv

$results = foreach($r in $rows){

  # null-safe alanlar
  $key     = ('' + $r.Key).Trim()
  $url     = ('' + $r.Url).Trim()
  $ocrStr  = ('' + $r.OCR).Trim().ToLower()
  $recStr  = ('' + $r.Recall).Trim()
  $minStr  = ('' + $r.MinTokenLen).Trim()
  $sel     = if([string]::IsNullOrWhiteSpace(('' + $r.WaitSelector))) {
               'css=:is(form#changelist-form,table#result_list,#content-main,#content,body)'
             } else { ('' + $r.WaitSelector) }

  if ([string]::IsNullOrWhiteSpace($key) -or $key.StartsWith('#')) { continue }
  if ([string]::IsNullOrWhiteSpace($url)) { continue }

  $ocr = @('yes','true','1','y') -contains $ocrStr

  $rec = 0.90
  $tmpD = 0.0
  if ([double]::TryParse($recStr, [ref]$tmpD)) { $rec = $tmpD }

  $minTL = 3
  $tmpI = 0
  if ([int]::TryParse($minStr, [ref]$tmpI)) { $minTL = $tmpI }

  if($ocr){
    New-UiBaselineAndValidate -Key $key -Url $url -Recall $rec -MinTokenLen $minTL -WaitSelector $sel -UseOCR
  } else {
    New-UiBaselineAndValidate -Key $key -Url $url -Recall $rec -MinTokenLen $minTL -WaitSelector $sel
  }
}

"`n=== SUMMARY ==="
$results | Format-Table key,ok,recall,missing_count,out_json -AutoSize

if (Test-Path (Join-Path $AlertsDir 'alerts_log.csv')) {
  "`n=== Alerts (last 10) ==="
  Import-Csv (Join-Path $AlertsDir 'alerts_log.csv') -Delimiter ';' |
    Select-Object ts,key,ok,recall,misses,alert_md |
    Select-Object -Last 10 | Format-Table -AutoSize
}
### DOSYA BİTİŞ: run_ui_validate_csv.ps1

### DOSYA BAŞLANGIÇ: .\\ops\smoke_links.ps1
# Rev: 2025-09-28 15:20 r4
param(
  [Parameter(Mandatory=$true)][string]$Base,
  [Parameter(Mandatory=$true)][string]$Start,
  [Parameter(Mandatory=$true)][string]$Out,
  [int]$Depth = 1,
  [int]$Limit = 150,
  [string]$PathPrefix = "/",
  [string]$LoginPath = "/admin/login/",
  [string]$User = "admin",
  [string]$Pass = "Admin!2345",
  [int]$Timeout = 20000,
  [string]$OkRedirectTo = ""   # ör: "/_direct/.*|/admin/.*"
)

function Join-Url([uri]$baseUri, [string]$url) {
  if ([string]::IsNullOrWhiteSpace($url)) { return $null }
  $u = $null
  if ([System.Uri]::TryCreate($url, [System.UriKind]::Absolute, [ref]$u)) { return $u }
  return [uri]::new($baseUri, $url)
}

function InScope([string]$locPath, [string]$prefix) {
  if ([string]::IsNullOrWhiteSpace($locPath)) { return $false }
  if ([string]::IsNullOrWhiteSpace($prefix))  { return $true }
  return $locPath.ToLower().StartsWith($prefix.ToLower())
}

function DepthOf([string]$path, [string]$prefix) {
  if (-not $path) { return 0 }
  $p   = $path
  $pre = if ($null -ne $prefix) { $prefix } else { "" }
  $p   = $p.Trim('/')
  $pre = $pre.Trim('/')
  if ($pre -and $p.ToLower().StartsWith($pre.ToLower())) {
    $p = $p.Substring($pre.Length).Trim('/')
  }
  if ([string]::IsNullOrWhiteSpace($p)) { return 0 }
  return ($p.Split('/', [System.StringSplitOptions]::RemoveEmptyEntries).Length)
}

function ParseLinks([string]$html, [uri]$docUri) {
  $set = New-Object System.Collections.Generic.HashSet[string]
  if (-not $html) { return @() }
  $rx = [regex]'(?isx)
      <a\b[^>]*?href\s*=\s*["''](?<u>[^"''#>]+)["'']
    | <link\b[^>]*?href\s*=\s*["''](?<u>[^"''#>]+)["'']
    | <script\b[^>]*?src\s*=\s*["''](?<u>[^"''#>]+)["'']
  '
  foreach ($m in $rx.Matches($html)) {
    $u = $m.Groups['u'].Value
    if ([string]::IsNullOrWhiteSpace($u)) { continue }
    try {
      $abs = (Join-Url $docUri $u)
      if ($abs) { [void]$set.Add($abs.AbsolutePath) }
    } catch {}
  }
  # .ToArray() .NET Framework'te extension; 5.1'de garanti değil → düz diziye çevir
  return @($set)
}

Add-Type -AssemblyName System.Net.Http
$handler = New-Object System.Net.Http.HttpClientHandler
$cookieJar = New-Object System.Net.CookieContainer
$handler.CookieContainer   = $cookieJar
$handler.AllowAutoRedirect = $false
$client  = New-Object System.Net.Http.HttpClient($handler)
$client.Timeout = [TimeSpan]::FromMilliseconds([Math]::Max(1000, $Timeout))
$baseUri = [uri]$Base

function Get-Resp([uri]$uri, [string]$method="GET", [string]$body="", [hashtable]$headers=@{}) {
  $req = New-Object System.Net.Http.HttpRequestMessage([System.Net.Http.HttpMethod]::$method, $uri)
  foreach ($k in $headers.Keys) { $req.Headers.TryAddWithoutValidation($k, [string]$headers[$k]) | Out-Null }
  if ($method -eq "POST") {
    $req.Content = New-Object System.Net.Http.StringContent($body, [System.Text.Encoding]::UTF8, "application/x-www-form-urlencoded")
  }
  $resp = $client.SendAsync($req).Result
  return $resp
}

function Do-Login {
  try {
    $loginUri = Join-Url $baseUri $LoginPath
    $r1 = Get-Resp $loginUri "GET"
    $html = $r1.Content.ReadAsStringAsync().Result
    $token = ""
    $m = [regex]::Match($html, 'name=["'']csrfmiddlewaretoken["'']\s+value=["'']([^"'']+)["'']', 'IgnoreCase')
    if ($m.Success) { $token = $m.Groups[1].Value }
    $body = "username=$([uri]::EscapeDataString($User))&password=$([uri]::EscapeDataString($Pass))"
    if ($token) { $body += "&csrfmiddlewaretoken=$([uri]::EscapeDataString($token))" }
    $null = Get-Resp $loginUri "POST" $body @{ "Referer" = $loginUri.AbsoluteUri }
    return $true
  } catch {
    Write-Host "[link-smoke] login hata: $($_.Exception.Message)" -ForegroundColor Yellow
    return $false
  }
}

$null = Do-Login

$queue   = New-Object System.Collections.Generic.Queue[object]
$visited = New-Object System.Collections.Generic.HashSet[string]
$bad     = New-Object System.Collections.Generic.List[object]
$checked = 0

$startUri = Join-Url $baseUri $Start
$queue.Enqueue([pscustomobject]@{ Uri=$startUri; Depth=0 })

while(($queue.Count -gt 0) -and ($checked -lt $Limit)) {
  $item = $queue.Dequeue()
  $u = $item.Uri
  $d = [int]$item.Depth
  if (-not $u) { continue }

  $key = $u.AbsolutePath.ToLower()
  if ($visited.Contains($key)) { continue }
  [void]$visited.Add($key)

  try {
    $resp = Get-Resp $u "GET"
    $status = [int]$resp.StatusCode
    $locHdr = $resp.Headers.Location
    $locAbs = $null
    if ($locHdr) { $locAbs = Join-Url $u $locHdr.ToString() }

    if ($status -ge 300 -and $status -lt 400) {
      $okRedirect = $false
      if ($locAbs -and -not [string]::IsNullOrWhiteSpace($OkRedirectTo)) {
        if ($locAbs.AbsolutePath -match $OkRedirectTo) { $okRedirect = $true }
      }
      $inScopeNext = ($locAbs -ne $null) -and (InScope $locAbs.AbsolutePath $PathPrefix)
      if ($inScopeNext -and -not $okRedirect) {
        $locStr = if ($locAbs) { $locAbs.AbsoluteUri } else { "" }
        $bad.Add([pscustomobject]@{ url=$u.AbsoluteUri; status=$status; location=$locStr }) | Out-Null
      }
      if ($locAbs -and (InScope $locAbs.AbsolutePath $PathPrefix) -and ($d -lt $Depth)) {
        $queue.Enqueue([pscustomobject]@{ Uri=$locAbs; Depth=$d })
      }
    }
    elseif ($status -ge 200 -and $status -lt 300) {
      $ct = $resp.Content.Headers.ContentType
      if ($ct -and $ct.MediaType -like "text/html") {
        $html = $resp.Content.ReadAsStringAsync().Result
        if ((InScope $u.AbsolutePath $PathPrefix) -and ($d -lt $Depth)) {
          foreach ($p in (ParseLinks $html $u)) {
            if (InScope $p $PathPrefix) {
              $depthNext = (DepthOf $p $PathPrefix)
              if ($depthNext -le $Depth) {
                $abs = Join-Url $baseUri $p
                if ($abs -and -not $visited.Contains($abs.AbsolutePath.ToLower())) {
                  $queue.Enqueue([pscustomobject]@{ Uri=$abs; Depth=$depthNext })
                }
              }
            }
          }
        }
      }
    }
    else {
      $bad.Add([pscustomobject]@{ url=$u.AbsoluteUri; status=$status; location="" }) | Out-Null
    }
  } catch {
    $msg = $_.Exception.Message
    Write-Host "[link-smoke] GET hata: $msg" -ForegroundColor Yellow
    $bad.Add([pscustomobject]@{ url=$u.AbsoluteUri; status=-1; location=""; error=$msg }) | Out-Null
  }

  $checked++
}

$result = [pscustomobject]@{
  checked      = $checked
  bad          = $bad.Count
  bad_list     = $bad
  visited      = $visited | Sort-Object
  scope_prefix = $PathPrefix
  base         = $Base
  start        = $Start
  ok_redirect  = $OkRedirectTo
  depth        = $Depth
  limit        = $Limit
}
$dir = Split-Path -Parent $Out
if ($dir -and -not (Test-Path $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }
$result | ConvertTo-Json -Depth 6 | Out-File -FilePath $Out -Encoding UTF8

if ($bad.Count -gt 0) {
  Write-Host ("[link-smoke] checked={0} bad={1} scope_prefix={2}" -f $checked, $bad.Count, $PathPrefix) -ForegroundColor Red
  $i = 0
  foreach ($b in $bad) {
    Write-Host ("    {0} {1} {2}" -f $i, $b.status, $b.url)
    $i++
  }
  exit 2
} else {
  Write-Host ("[link-smoke] checked={0} bad=0 scope_prefix={1}" -f $checked, $PathPrefix) -ForegroundColor Green
  Write-Host "[link-smoke] YEŞİL" -ForegroundColor Green
  exit 0
}
### DOSYA BİTİŞ: smoke_links.ps1

### DOSYA BAŞLANGIÇ: .\\ops\run_backlog_multi.ps1
param(
  [string[]]$Filter = @("*"),
  [switch]$LinkSmoke,
  [string]$BaseUrl    = "http://127.0.0.1:8010",
  [int]   $SmokeDepth = 1,
  [int]   $SmokeLimit = 150,
  [string]$ExtraArgs  = ""
)

if ($Filter -is [string]) {
  if ($Filter -match ",") { $Filter = $Filter -split "," | ForEach-Object { $_.Trim() } }
  else { $Filter = @($Filter) }
}
elseif ($Filter.Count -eq 1 -and $Filter[0] -match ",") {
  $Filter = $Filter[0] -split "," | ForEach-Object { $_.Trim() }
}

Write-Host ("[multi] Filters: {0}" -f ($Filter -join ", ")) -ForegroundColor Cyan

foreach($pat in $Filter){
  if ([string]::IsNullOrWhiteSpace($pat)) { continue }
  Write-Host ("[multi] Running pattern: {0}" -f $pat) -ForegroundColor Yellow

  $argList = @(
    '-NoProfile','-NonInteractive','-ExecutionPolicy','Bypass',
    '-File','ops\run_backlog.ps1',
    '-Filter', $pat,
    '-BaseUrl', $BaseUrl,
    '-SmokeDepth', $SmokeDepth,
    '-SmokeLimit', $SmokeLimit,
    '-ExtraArgs', $ExtraArgs
  )
  if ($LinkSmoke.IsPresent) { $argList += '-LinkSmoke' }

  powershell @argList
}
### DOSYA BİTİŞ: run_backlog_multi.ps1

### DOSYA BAŞLANGIÇ: .\\ops\pipeline_local.ps1
param(
  [string]$BaseUrl     = "http://127.0.0.1:8010",
  [string]$JobsCsv     = "ops/ui_jobs.csv",
  [string]$BaselineDir = "targets\reference",
  [string]$AlertsDir   = "_otokodlama\alerts",
  [string]$StateTools  = "ops/state_tools.ps1",
  [switch]$NoGitPush
)

$ErrorActionPreference = "Stop"

# 1) AI patch'leri uygula (varsa)
powershell -ExecutionPolicy Bypass -File "ops/apply_ai_files.ps1" -RepoRoot "." -InboxDir "ai_inbox" -StateTools $StateTools | Out-Host

# 2) UI testlerini koştur + state güncelle
powershell -ExecutionPolicy Bypass -File "ops/run_suite.ps1" -BaseUrl $BaseUrl -JobsCsv $JobsCsv -BaselineDir $BaselineDir -AlertsDir $AlertsDir -StateTools $StateTools | Out-Host

# 3) Değişiklikleri commit/push
if ($NoGitPush) {
  powershell -ExecutionPolicy Bypass -File "ops/git_ops.ps1" -RepoRoot "." -Branch "main" -AddSpec "." -Message "[auto] ai apply + ui validate + state" -NoPush | Out-Host
} else {
  powershell -ExecutionPolicy Bypass -File "ops/git_ops.ps1" -RepoRoot "." -Branch "main" -AddSpec "." -Message "[auto] ai apply + ui validate + state" | Out-Host
}

Write-Host "`n[pipeline] DONE." -ForegroundColor Green
### DOSYA BİTİŞ: pipeline_local.ps1

### DOSYA BAŞLANGIÇ: .\\ops\rebase_auto.ps1
param(
   [string]$Branch,
   [int]$PrNumber = 0
)

$ErrorActionPreference = 'Stop'

function Abort-StaleOps {
   git rebase --abort 2>$null | Out-Null
   git merge  --abort 2>$null | Out-Null
}

function Solve-Bumper {
   New-Item -ItemType Directory -Force ".github" | Out-Null
   "trigger $(Get-Date -Format s)" | Set-Content ".github\pr-bumper.md"
   git add ".github\pr-bumper.md" | Out-Null
}

function Get-Conflicts {
   # Çatışan dosyaları tekil listele
   (git ls-files -u) -split "`n" |
     Where-Object { $_ -ne "" } |
     ForEach-Object { ($_ -split "\s+")[3] } |
     Sort-Object -Unique
}

# --- Branch'ı akıllı şekilde çöz ---
if (-not $Branch) {
   if ($PrNumber -gt 0) {
     $Branch = gh pr view $PrNumber --json headRefName --jq .headRefName
     if (-not $Branch) { throw "PR #$PrNumber bulunamadı/kapalı. -Branch vererek deneyin." }
   } else {
     $Branch = gh pr list --state open --limit 1 --json headRefName --jq '.[0].headRefName' 2>$null
     if (-not $Branch) {
       $Branch = (git rev-parse --abbrev-ref HEAD)
       if (-not $Branch -or $Branch -eq 'HEAD') { throw "Açık PR yok ve aktif dal çözülemedi. -Branch ya da -PrNumber verin." }
     }
   }
}

function Rebase-Or-Merge([string]$branch) {
   git fetch origin | Out-Null
   git checkout $branch | Out-Null

   # 1) REBASE (editörsüz olsun diye boş mesajla commit atmaya zorlamayacağız; direkt deneyip düşersek merge)
   git -c core.editor=true -c sequence.editor=true rebase origin/main
   if ($LASTEXITCODE -eq 0 -and -not (Test-Path ".git\rebase-apply") -and -not (Test-Path ".git\rebase-merge")) {
     return  # başarılı rebase
   }

   Write-Warning "Rebase tamamlanamadı → MERGE fallback'a geçiyorum."
   git rebase --abort 2>$null | Out-Null

   # 2) MERGE (editor açmadan, no-edit ile)
   git merge --no-edit origin/main
   if ($LASTEXITCODE -ne 0) {
     # Bumper'ı tazele
     Solve-Bumper

     # Kalan bütün çatışmalar --> OURS (mevcut dal)
     $conf = Get-Conflicts
     if ($conf) {
       foreach ($p in $conf) {
         if ($p -ne ".github/pr-bumper.md") {
           git checkout --ours -- "$p"
           git add -- "$p"
         }
       }
     }

     # Her şey eklendiyse commitle
     git commit --no-edit
     if ($LASTEXITCODE -ne 0) { throw "Merge commit atılamadı. Kalan çatışmalar olabilir." }
   }
}

# --- Çalıştır ---
Abort-StaleOps
Rebase-Or-Merge $Branch
git push --force-with-lease origin $Branch

if ($PrNumber -gt 0) { gh pr merge $PrNumber --squash --auto }

Write-Host "[done] $Branch güncellendi ve push edildi." -ForegroundColor Green
if ($PrNumber -gt 0) { Write-Host "[note] PR #$PrNumber auto-merge açık; koşullar tamamlanınca birleşir." -ForegroundColor Yellow }
### DOSYA BİTİŞ: rebase_auto.ps1

### DOSYA BAŞLANGIÇ: .\\ops\run_ui_validate.ps1
param(
  [string]$BaseUrl     = "http://127.0.0.1:8010",
  [string]$BaselineDir = "targets\reference",
  [string]$AlertsDir   = "_otokodlama\alerts"
)

$ErrorActionPreference = "Stop"
$null = New-Item -ItemType Directory -Force -Path "ops\flows",$BaselineDir,"_otokodlama\out",$AlertsDir
$env:BASE_URL = $BaseUrl

# (İdempotent) equipment redirect loop fix
Get-ChildItem ops\flows -Filter *equipment*.flow -ErrorAction SilentlyContinue | ForEach-Object {
  (Get-Content $_.FullName -Raw) `
    -replace 'GOTO\s+/admin/maintenance/equipment/(\s*)$', 'GOTO /admin/maintenance/equipment/_direct/$1' `
  | Set-Content -LiteralPath $_.FullName -Encoding UTF8
}

function New-UiBaselineAndValidate {
param(
  [Parameter(Mandatory=$true)][string]$Key,     # ex: equipment_ui_list
  [Parameter(Mandatory=$true)][string]$Url,     # ex: /admin/maintenance/equipment/_direct/
  [string]$WaitSelector = 'css=:is(form#changelist-form,table#result_list,#content-main,#content,body)',
  [double]$Recall = 0.90,
  [int]$MinTokenLen = 3,
  [switch]$UseOCR,
  [string]$IgnorePatterns = 'csrf,token,\d{2,},page_\d+,id_\d+,ts_\d+'
)
  $baselinePng = Join-Path $BaselineDir ("{0}.png" -f $Key)
  $flowBase = "ops\flows\_{0}_make_baseline.flow" -f $Key
  $flowVal  = "ops\flows\{0}_validate.flow" -f $Key

@"
COMMENT make baseline ($Key)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
GOTO $Url
WAIT SELECTOR $WaitSelector
SCREENSHOT $baselinePng
"@ | Set-Content -LiteralPath $flowBase -Encoding UTF8

  $live = if($UseOCR){"dom+ocr"} else {"dom"}
@"
COMMENT validate $Key ($live)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
GOTO $Url
WAIT SELECTOR $WaitSelector
AUTOVALIDATE key=$Key baseline=$baselinePng words_recall=$Recall live_source=$live alert_dir=$AlertsDir min_token_len=$MinTokenLen ignore_numbers=yes ignore_patterns=$IgnorePatterns
"@ | Set-Content -LiteralPath $flowVal -Encoding UTF8

  $outA = "_otokodlama\out\_{0}_make_baseline.json" -f $Key
  $outB = "_otokodlama\out\{0}_validate.json" -f $Key

  Write-Host "[run] BASELINE → $Key" -ForegroundColor Cyan
  python tools\pw_flow.py --steps $flowBase --out $outA | Out-Host

  Write-Host "[run] VALIDATE → $Key ($live)" -ForegroundColor Yellow
  python tools\pw_flow.py --steps $flowVal  --out $outB | Out-Host

  $j = Get-Content $outB -Raw | ConvertFrom-Json
  $lastAuto = $j.results | Where-Object { $_.cmd -eq 'AUTOVALIDATE' } | Select-Object -Last 1
  [pscustomobject]@{
    key           = $Key
    ok            = $j.ok
    recall        = if($lastAuto){ '{0:N2}' -f [double]$lastAuto.recall } else {''}
    missing_count = if($lastAuto){ $lastAuto.missing_count } else {''}
    out_json      = $outB
  }
}

# ====== TEST SETİ ======
$jobs = @(
  @{ Key="equipment_ui_list";   Url="/admin/maintenance/equipment/_direct/";  OCR=$false },
  @{ Key="calibration_ui_list"; Url="/admin/maintenance/calibration/_direct/";OCR=$false },
  @{ Key="admin_home_fast";     Url="/admin/";                                OCR=$false }
  # İstediğin yeni modülü aşağıya sadece Key/Url girerek ekle:
  # @{ Key="bakim_plan_ui_list"; Url="/admin/maintenance/plan/_direct/"; OCR=$false }
)

$results = foreach($j in $jobs){
  if($j.OCR){ New-UiBaselineAndValidate -Key $j.Key -Url $j.Url -UseOCR }
  else      { New-UiBaselineAndValidate -Key $j.Key -Url $j.Url }
}

"`n=== SUMMARY ==="
$results | Format-Table key,ok,recall,missing_count,out_json -AutoSize

if (Test-Path (Join-Path $AlertsDir 'alerts_log.csv')) {
  "`n=== Alerts (last 10) ==="
  Import-Csv (Join-Path $AlertsDir 'alerts_log.csv') -Delimiter ';' |
    Select-Object ts,key,ok,recall,misses,alert_md |
    Select-Object -Last 10 | Format-Table -AutoSize
}
### DOSYA BİTİŞ: run_ui_validate.ps1

### DOSYA BAŞLANGIÇ: .\\ops\open_pr.ps1
param(
  [string]$RepoRoot   = ".",
  [string]$Branch     = "main",   # PR HEAD (çalıştığınız dal)
  [string]$BaseBranch = "main",   # PR BASE (hedef dal)
  [string]$StateTools = "ops/state_tools.ps1"
)

$ErrorActionPreference = "Stop"

function Show-GitHubErrorBody {
  param([System.Net.WebException]$Ex)
  try {
    $resp = $Ex.Response
    if ($resp -and $resp.GetResponseStream) {
      $sr = New-Object IO.StreamReader($resp.GetResponseStream())
      $body = $sr.ReadToEnd()
      Write-Warning ("GitHub API error body: " + $body)
      if ($resp.Headers["WWW-Authenticate"]) {
        Write-Warning ("WWW-Authenticate: " + $resp.Headers["WWW-Authenticate"])
      }
    }
  } catch { Write-Warning "Error body okunamadı: $($_.Exception.Message)" }
}

function Get-RepoSlug {
  param([string]$RepoRoot)
  Push-Location $RepoRoot
  try {
    $url = (& git remote get-url origin 2>$null)
    if (-not $url) { throw "origin remote bulunamadı." }
    if ($url -match 'github\.com[:/](.+?)(\.git)?$') { return $Matches[1] }
    throw "GitHub repo slug çözülemedi: $url"
  } finally { Pop-Location }
}

function Load-State {
  param([string]$StateTools,[string]$RepoRoot)
  . (Join-Path $RepoRoot $StateTools)
  return (Get-State)
}

function Build-PR-Body {
  param($state)
  $lines = @()
  $lines += "### UI Test Özeti"
  if ($state.tests -and $state.tests.summary) {
    $lines += ""
    $lines += "- **Passed**: $($state.tests.summary.passed)"
    $lines += "- **Failed**: $($state.tests.summary.failed)"
    $lines += "- **Last Run**: $($state.tests.summary.last_run)"
  }

  if ($state.tests -and $state.tests.results) {
    $lines += ""
    $lines += "| Key | Status | words_recall | missing_count | out_json | screenshot |"
    $lines += "|-----|--------|--------------|---------------|----------|------------|"

    $keys = @()
    if ($state.tests.results -is [hashtable]) { $keys = $state.tests.results.Keys }
    else { $keys = ($state.tests.results.PSObject.Properties | Select-Object -ExpandProperty Name) }

    foreach ($k in $keys) {
      $it = if ($state.tests.results -is [hashtable]) { $state.tests.results[$k] } else { $state.tests.results.$k }
      $status = $it.status
      $recall = ""
      $misses = ""
      if ($it.metrics) {
        if ($it.metrics.PSObject.Properties['words_recall']) { $recall = [string]$it.metrics.words_recall }
        if ($it.metrics.PSObject.Properties['missing_count']) { $misses = [string]$it.metrics.missing_count }
      }
      $outj = ""
      $shot = ""
      if ($it.artifacts) {
        if ($it.artifacts.PSObject.Properties['out_json']) { $outj = [string]$it.artifacts.out_json }
        if ($it.artifacts.PSObject.Properties['screenshot']) { $shot = [string]$it.artifacts.screenshot }
      }
      $lines += "| $k | $status | $recall | $misses | $outj | $shot |"
    }
  }

  if ($state.pending_actions -and $state.pending_actions.Count -gt 0) {
    $lines += ""
    $lines += "### Pending Actions"
    foreach ($p in $state.pending_actions) {
      $lines += "- [$($p.status)] **$($p.type)**: $($p.detail) (due_stage: $($p.due_stage), ts: $($p.ts))"
    }
  }

  return ($lines -join "`n")
}

# ----- MAIN -----
$repoSlug = Get-RepoSlug -RepoRoot $RepoRoot
$state    = Load-State -StateTools $StateTools -RepoRoot $RepoRoot

$title = "[auto] UI validate passed → open PR"
$body  = Build-PR-Body -state $state

# 1) Push edildiğinden emin ol
Push-Location $RepoRoot
try { & git push origin $Branch | Out-Null } finally { Pop-Location }

# 2) PR açma: gh (CLI) → yoksa REST → ikisi de yoksa uyarı
$createdUrl = ""
$used = ""

if (Get-Command gh -ErrorAction SilentlyContinue) {
  try {
    $out = & gh pr create --title $title --body $body --base $BaseBranch --head $Branch 2>&1
    if ($LASTEXITCODE -eq 0) {
      $m = ($out | Select-String -Pattern 'https?://github\.com/.+?/pull/\d+' | Select-Object -First 1)
      if ($m) { $createdUrl = $m.Matches.Value; $used = "gh" }
    } else {
      Write-Warning "gh pr create hata verdi: $out"
    }
  } catch {
    Write-Warning "gh pr create çalışmadı: $($_.Exception.Message)"
  }
}

if (-not $createdUrl) {
  $token = $env:GITHUB_TOKEN
  if ($token) {
    $bodyObj = @{
      title = $title
      head  = $Branch
      base  = $BaseBranch
      body  = $body
    }
    $json = $bodyObj | ConvertTo-Json -Depth 5
    $uri  = "https://api.github.com/repos/$repoSlug/pulls"

    $headers = @{
      "Accept"        = "application/vnd.github+json"
      "Authorization" = "token $token"
      "X-GitHub-Api-Version" = "2022-11-28"
      "User-Agent"    = "ps-open-pr"
    }
    try {
      $resp = Invoke-RestMethod -Method Post -Uri $uri -Headers $headers -Body $json
      if ($resp.html_url) { $createdUrl = $resp.html_url; $used = "rest" }
    } catch [System.Net.WebException] {
      Show-GitHubErrorBody $_.Exception
      Write-Warning "REST ile PR açma denemesi hata verdi."
    }
  } else {
    Write-Warning "Ne 'gh' komutu başarılı ne de GITHUB_TOKEN tanımlı. PR otomatik açılamadı (pipeline kesilmedi)."
  }
}

if ($createdUrl) {
  Write-Host "[pr] Açıldı ($used) → $createdUrl" -ForegroundColor Green
  . (Join-Path $RepoRoot $StateTools)
  Advance-Pipeline -ToStage "await_review" -Hint "PR açıldı: $createdUrl"
} else {
  Write-Host "[pr] PR açılamadı; stage değiştirilmedi." -ForegroundColor Yellow
}

### DOSYA BİTİŞ: open_pr.ps1

### DOSYA BAŞLANGIÇ: .\\ops\make_prs.ps1
Rev: 2025-09-30 19:21 r1
param(
  [string]$PlanJson = "plan/tasks.json",
  [switch]$DryRun
)

$ErrorActionPreference = "Stop"

if (-not (Test-Path $PlanJson)) { throw "Plan yok: $PlanJson" }

# main’i referans al
git fetch origin | Out-Null

$tasks = Get-Content $PlanJson -Raw | ConvertFrom-Json
foreach ($t in $tasks) {
  $branch = $t.branch_name
  if (-not $branch) { Write-Warning "Branch yok: $($t.id)"; continue }

  # remote’ta var mı?
  $remote = git ls-remote --heads origin $branch
  if ($remote) { Write-Host "(skip) zaten var: $branch" -ForegroundColor DarkYellow; continue }

  if (-not $DryRun) {
    git switch -c $branch origin/main | Out-Null

    New-Item -ItemType Directory -Force ".github" | Out-Null
    "task: $($t.id) - $($t.title)" | Set-Content -Encoding UTF8 ".github\pr-bumper.md"
    git add ".github\pr-bumper.md"
    git commit -m "auto($($t.id)): $($t.title) [bump]" | Out-Null
    git push -u origin $branch | Out-Null
  }

  # PR body
  $ac = ""
  if ($t.acceptance_criteria) {
    $ac = "Acceptance Criteria:`n" + ($t.acceptance_criteria | ForEach-Object { "- $_" }) -join "`n"
  }
  $body = @"
Area: `$($t.area)`
Type: `$($t.type)` | Priority: `$($t.priority)` | Size: `$($t.size)`

$($t.description)

$ac
"@

  $title = "auto: $($t.id) $($t.title)"
  $prUrl = gh pr create -t $title -b $body -B main -H $branch
  if ($LASTEXITCODE -ne 0) { Write-Warning "PR açılamadı: $branch"; continue }

  # etiketler
  if ($t.labels) {
    foreach ($lbl in $t.labels) { gh pr edit $prUrl --add-label $lbl | Out-Null }
  }

  # otomatik merge (koşullar sağlanınca)
  gh pr merge $prUrl --squash --auto | Out-Null

  Write-Host "[ok] PR hazır: $prUrl" -ForegroundColor Green

  # ana dala geri
  if (-not $DryRun) {
    git switch -C main origin/main | Out-Null
  }
}
### DOSYA BİTİŞ: make_prs.ps1

### DOSYA BAŞLANGIÇ: .\\ops\git_ops.ps1
param(
  [string]$RepoRoot = ".",
  [string]$Branch   = "main",
  [string]$AddSpec  = ".",
  [string]$Message  = "[auto] apply files + update state",
  [switch]$NoPush
)

$ErrorActionPreference = "Stop"
Set-Location $RepoRoot

$dirty = & git status --porcelain
if (-not $dirty) { Write-Host "[git] Çalışma alanı temiz; commit/push atlandı." -ForegroundColor Yellow; exit 0 }

& git add $AddSpec
try { & git commit -m $Message } catch { Write-Host "[git] Commit başarısız: $($_.Exception.Message)" -ForegroundColor Red; exit 2 }

if (-not $NoPush) {
  try { & git push origin $Branch } catch { Write-Host "[git] Push başarısız: $($_.Exception.Message)" -ForegroundColor Red; exit 3 }
  Write-Host "[git] Pushed to origin/$Branch" -ForegroundColor Green
} else {
  Write-Host "[git] --NoPush seçildi, push atlandı." -ForegroundColor Yellow
}
### DOSYA BİTİŞ: git_ops.ps1

