### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_auth_probe_ok.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.test import Client
c = Client()
r = c.get("/admin/"); print("GET /admin/ ->", r.status_code)  # 302 beklenir

resp = c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)
print("login final status:", resp.status_code)

r1 = c.get("/admin/maintenance/equipment/"); print("CL status:", r1.status_code)  # 200
r2 = c.get("/admin/maintenance/equipment/add/"); print("ADD status:", r2.status_code)  # 200
### DOSYA BİTİŞ: admin_auth_probe_ok.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\admin_auth_probe_ok.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.test import Client
c = Client()
r = c.get("/admin/"); print("GET /admin/ ->", r.status_code)  # 302 beklenir

resp = c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)
print("login final status:", resp.status_code)

r1 = c.get("/admin/maintenance/equipment/"); print("CL status:", r1.status_code)  # 200
r2 = c.get("/admin/maintenance/equipment/add/"); print("ADD status:", r2.status_code)  # 200
### DOSYA BİTİŞ: admin_auth_probe_ok.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\dump_admin_names.py
import os, sys, django
from itertools import islice
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.urls import get_resolver
from django.contrib import admin
from maintenance.models import Equipment

res = get_resolver()
names = []
for k in res.reverse_dict.keys():
    if isinstance(k, str) and ("admin" in k or "maintenance" in k):
        names.append(k)

print("~ İlk 50 isim ~")
for n in islice(sorted(set(names)), 50):
    print(n)

# Ayrıca model bazlı isimleri üret ve tersine çevir
from django.contrib.admin.templatetags.admin_urls import admin_urlname
nm_cl = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
print("nm_cl:", nm_cl)
print("nm_add:", nm_add)

from django.urls import reverse
print("reverse(cl):", reverse(nm_cl))
print("reverse(add):", reverse(nm_add))
### DOSYA BİTİŞ: dump_admin_names.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\dump_admin_names.py
import os, sys, django
from itertools import islice
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.urls import get_resolver
from django.contrib import admin
from maintenance.models import Equipment

res = get_resolver()
names = []
for k in res.reverse_dict.keys():
    if isinstance(k, str) and ("admin" in k or "maintenance" in k):
        names.append(k)

print("~ İlk 50 isim ~")
for n in islice(sorted(set(names)), 50):
    print(n)

# Ayrıca model bazlı isimleri üret ve tersine çevir
from django.contrib.admin.templatetags.admin_urls import admin_urlname
nm_cl = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
print("nm_cl:", nm_cl)
print("nm_add:", nm_add)

from django.urls import reverse
print("reverse(cl):", reverse(nm_cl))
print("reverse(add):", reverse(nm_add))
### DOSYA BİTİŞ: dump_admin_names.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\check_admin_tuple.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
tpl = admin.site.urls  # (urlpatterns, app_name, namespace)
print("app_name:", tpl[1], "| namespace:", tpl[2])
### DOSYA BİTİŞ: check_admin_tuple.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\check_admin_tuple.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
tpl = admin.site.urls  # (urlpatterns, app_name, namespace)
print("app_name:", tpl[1], "| namespace:", tpl[2])
### DOSYA BİTİŞ: check_admin_tuple.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\admin_auth_probe_after_reset.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.test import Client
c = Client()

# login sayfasına yönlendirme beklenen (302)
r = c.get("/admin/")
print("GET /admin/ ->", r.status_code)

# giriş yap
resp = c.post("/admin/login/?next=/admin/", {
    "username":"admin", "password":"admin123!",
    "this_is_the_login_form":1, "next":"/admin/"
}, follow=True)
print("login final status:", resp.status_code)

# model sayfaları artık 200 olmalı
r1 = c.get("/admin/maintenance/equipment/")
r2 = c.get("/admin/maintenance/equipment/add/")
print("CL status:", r1.status_code)
print("ADD status:", r2.status_code)
### DOSYA BİTİŞ: admin_auth_probe_after_reset.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_auth_probe_after_reset.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.test import Client
c = Client()

# login sayfasına yönlendirme beklenen (302)
r = c.get("/admin/")
print("GET /admin/ ->", r.status_code)

# giriş yap
resp = c.post("/admin/login/?next=/admin/", {
    "username":"admin", "password":"admin123!",
    "this_is_the_login_form":1, "next":"/admin/"
}, follow=True)
print("login final status:", resp.status_code)

# model sayfaları artık 200 olmalı
r1 = c.get("/admin/maintenance/equipment/")
r2 = c.get("/admin/maintenance/equipment/add/")
print("CL status:", r1.status_code)
print("ADD status:", r2.status_code)
### DOSYA BİTİŞ: admin_auth_probe_after_reset.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_reverse_check_fixed.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse, NoReverseMatch
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from maintenance.models import Equipment

print("Registered in default admin site:", Equipment in admin.site._registry)

name_changelist = admin_urlname(Equipment._meta, "changelist")   # Örn: "admin:maintenance_equipment_changelist"
name_add        = admin_urlname(Equipment._meta, "add")          # Örn: "admin:maintenance_equipment_add"
print("Names ->", name_changelist, ",", name_add)

try:
    # DİKKAT: Burada ekstra "admin:" EKLEMİYORUZ
    print("Reverse CL :", reverse(name_changelist))
    print("Reverse ADD:", reverse(name_add))
except NoReverseMatch as e:
    print("NoReverseMatch:", e)
### DOSYA BİTİŞ: admin_reverse_check_fixed.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\admin_reverse_check_fixed.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse, NoReverseMatch
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from maintenance.models import Equipment

print("Registered in default admin site:", Equipment in admin.site._registry)

name_changelist = admin_urlname(Equipment._meta, "changelist")   # Örn: "admin:maintenance_equipment_changelist"
name_add        = admin_urlname(Equipment._meta, "add")          # Örn: "admin:maintenance_equipment_add"
print("Names ->", name_changelist, ",", name_add)

try:
    # DİKKAT: Burada ekstra "admin:" EKLEMİYORUZ
    print("Reverse CL :", reverse(name_changelist))
    print("Reverse ADD:", reverse(name_add))
except NoReverseMatch as e:
    print("NoReverseMatch:", e)
### DOSYA BİTİŞ: admin_reverse_check_fixed.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\probe_admin_500.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.test import Client
c = Client()
r = c.get("/admin/")
print("status:", r.status_code)
print((r.content[:800]).decode("utf-8","ignore"))
### DOSYA BİTİŞ: probe_admin_500.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\probe_admin_500.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.test import Client
c = Client()
r = c.get("/admin/")
print("status:", r.status_code)
print((r.content[:800]).decode("utf-8","ignore"))
### DOSYA BİTİŞ: probe_admin_500.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\admin_auth_probe.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.test import Client

c = Client()

# 1) login sayfasına yönlendirme var mı?
r = c.get("/admin/")
print("GET /admin/ ->", r.status_code)  # 302 beklenir (login'e)

# 2) admin kullanıcısı ile giriş
resp = c.post("/admin/login/?next=/admin/", {
    "username":"admin", "password":"admin123!",
    "this_is_the_login_form":1, "next":"/admin/"
}, follow=True)
print("login final status:", resp.status_code)

# 3) artık changelist/add kaç dönüyor?
r1 = c.get("/admin/maintenance/equipment/")
r2 = c.get("/admin/maintenance/equipment/add/")
print("CL status:", r1.status_code)   # 200 beklenir
print("ADD status:", r2.status_code)  # 200 beklenir
### DOSYA BİTİŞ: admin_auth_probe.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_auth_probe.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.test import Client

c = Client()

# 1) login sayfasına yönlendirme var mı?
r = c.get("/admin/")
print("GET /admin/ ->", r.status_code)  # 302 beklenir (login'e)

# 2) admin kullanıcısı ile giriş
resp = c.post("/admin/login/?next=/admin/", {
    "username":"admin", "password":"admin123!",
    "this_is_the_login_form":1, "next":"/admin/"
}, follow=True)
print("login final status:", resp.status_code)

# 3) artık changelist/add kaç dönüyor?
r1 = c.get("/admin/maintenance/equipment/")
r2 = c.get("/admin/maintenance/equipment/add/")
print("CL status:", r1.status_code)   # 200 beklenir
print("ADD status:", r2.status_code)  # 200 beklenir
### DOSYA BİTİŞ: admin_auth_probe.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\admin_reverse_check.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse, NoReverseMatch
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from maintenance.models import Equipment

print("Registered in default admin site:", Equipment in admin.site._registry)

name_changelist = admin_urlname(Equipment._meta, "changelist")   # ör: "maintenance_equipment_changelist"
name_add        = admin_urlname(Equipment._meta, "add")          # ör: "maintenance_equipment_add"
print("Names ->", name_changelist, ",", name_add)

try:
    print("Reverse CL :", reverse(f"admin:{name_changelist}"))
    print("Reverse ADD:", reverse(f"admin:{name_add}"))
except NoReverseMatch as e:
    print("NoReverseMatch:", e)
### DOSYA BİTİŞ: admin_reverse_check.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_reverse_check.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse, NoReverseMatch
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from maintenance.models import Equipment

print("Registered in default admin site:", Equipment in admin.site._registry)

name_changelist = admin_urlname(Equipment._meta, "changelist")   # ör: "maintenance_equipment_changelist"
name_add        = admin_urlname(Equipment._meta, "add")          # ör: "maintenance_equipment_add"
print("Names ->", name_changelist, ",", name_add)

try:
    print("Reverse CL :", reverse(f"admin:{name_changelist}"))
    print("Reverse ADD:", reverse(f"admin:{name_add}"))
except NoReverseMatch as e:
    print("NoReverseMatch:", e)
### DOSYA BİTİŞ: admin_reverse_check.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\check_admin_urls.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.contrib import admin
from django.urls import reverse
from maintenance.models import Equipment
print("Registered:", Equipment in admin.site._registry)
print("CL :", reverse(f"admin:{Equipment._meta.app_label}_{Equipment._meta.model_name}_changelist"))
print("ADD:", reverse(f"admin:{Equipment._meta.app_label}_{Equipment._meta.model_name}_add"))
### DOSYA BİTİŞ: check_admin_urls.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\check_admin_urls.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.contrib import admin
from django.urls import reverse
from maintenance.models import Equipment
print("Registered:", Equipment in admin.site._registry)
print("CL :", reverse(f"admin:{Equipment._meta.app_label}_{Equipment._meta.model_name}_changelist"))
print("ADD:", reverse(f"admin:{Equipment._meta.app_label}_{Equipment._meta.model_name}_add"))
### DOSYA BİTİŞ: check_admin_urls.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\ensure_superuser.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.contrib.auth import get_user_model
User = get_user_model()
u, _ = User.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True
u.set_password("admin123!")
u.save()
print("ok ->", u.username, u.is_superuser, u.is_staff)
### DOSYA BİTİŞ: ensure_superuser.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\ensure_superuser.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.contrib.auth import get_user_model
User = get_user_model()
u, _ = User.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True
u.set_password("admin123!")
u.save()
print("ok ->", u.username, u.is_superuser, u.is_staff)
### DOSYA BİTİŞ: ensure_superuser.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\resolve_admin_urls.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.urls import resolve, Resolver404
for p in ["/admin/","/admin/maintenance/equipment/","/admin/maintenance/equipment/add/"]:
    try:
        m = resolve(p)
        print(p, "-> OK:", m.func.__module__)
    except Resolver404:
        print(p, "-> 404 (pattern yok)")
### DOSYA BİTİŞ: resolve_admin_urls.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\resolve_admin_urls.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.urls import resolve, Resolver404
for p in ["/admin/","/admin/maintenance/equipment/","/admin/maintenance/equipment/add/"]:
    try:
        m = resolve(p)
        print(p, "-> OK:", m.func.__module__)
    except Resolver404:
        print(p, "-> 404 (pattern yok)")
### DOSYA BİTİŞ: resolve_admin_urls.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\diag_dupes.py
import os, sys, django
ROOT = os.path.abspath(".")
if ROOT not in sys.path: sys.path.insert(0, ROOT)
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.db.models import Count
from maintenance.models import Equipment

dupes = (Equipment.objects
         .values("serial_number")
         .annotate(c=Count("id"))
         .filter(c__gt=1))
print("Kalan duplike sayısı:", dupes.count())
print(list(dupes[:20]))
### DOSYA BİTİŞ: diag_dupes.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\diag_dupes.py
import os, sys, django
ROOT = os.path.abspath(".")
if ROOT not in sys.path: sys.path.insert(0, ROOT)
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.db.models import Count
from maintenance.models import Equipment

dupes = (Equipment.objects
         .values("serial_number")
         .annotate(c=Count("id"))
         .filter(c__gt=1))
print("Kalan duplike sayısı:", dupes.count())
print(list(dupes[:20]))
### DOSYA BİTİŞ: diag_dupes.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\fix_serial_dupes_runner.py
import os, sys, django

# --- PROJE KÖKÜNÜ sys.path'E EKLE ---
HERE = os.path.abspath(os.path.dirname(__file__))
ROOT = os.path.abspath(os.path.join(HERE, ".."))
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)

os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.db import transaction
from maintenance.models import Equipment

MAX_LEN = 120
SUFFIX_DUP = "__DUP__{id}"
SUFFIX_EMPTY = "__EMPTY__{id}"

def safe_unique_value(original: str, suffix: str) -> str:
    room = MAX_LEN - len(suffix)
    base = (original or "")[:room] if room > 0 else ""
    return (base + suffix)[:MAX_LEN]

# 1) Duplikeleri grupla (case-insensitive). Boş/whitespace -> özel anahtar.
by_norm = {}
for e in Equipment.objects.all().order_by("id"):
    raw = e.serial_number
    s = (raw or "")
    norm = s.strip().lower()
    key = norm if norm != "" else "__EMPTY__"
    by_norm.setdefault(key, []).append((e.id, s))

dupe_groups = {k:v for k,v in by_norm.items() if len(v) > 1}
print("Duplike grup sayısı:", len(dupe_groups))

changed = 0
with transaction.atomic():
    for key, rows in dupe_groups.items():
        keeper_id, keeper_val = rows[0]  # ilk kaydı koru
        for (pk, val) in rows[1:]:
            if key == "__EMPTY__":
                new_val = safe_unique_value("", SUFFIX_EMPTY.format(id=pk))
            else:
                new_val = safe_unique_value(val, SUFFIX_DUP.format(id=pk))
            # ekstra güvenlik: yine çakışırsa hafif varyasyon
            q = Equipment.objects.filter(serial_number=new_val).exclude(pk=pk)
            if q.exists():
                new_val = safe_unique_value(val, (SUFFIX_DUP.format(id=pk) + "_X"))
            Equipment.objects.filter(pk=pk).update(serial_number=new_val)
            changed += 1

print("Güncellenen kayıt:", changed)
### DOSYA BİTİŞ: fix_serial_dupes_runner.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\fix_serial_dupes_runner.py
import os, sys, django

# --- PROJE KÖKÜNÜ sys.path'E EKLE ---
HERE = os.path.abspath(os.path.dirname(__file__))
ROOT = os.path.abspath(os.path.join(HERE, ".."))
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)

os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.db import transaction
from maintenance.models import Equipment

MAX_LEN = 120
SUFFIX_DUP = "__DUP__{id}"
SUFFIX_EMPTY = "__EMPTY__{id}"

def safe_unique_value(original: str, suffix: str) -> str:
    room = MAX_LEN - len(suffix)
    base = (original or "")[:room] if room > 0 else ""
    return (base + suffix)[:MAX_LEN]

# 1) Duplikeleri grupla (case-insensitive). Boş/whitespace -> özel anahtar.
by_norm = {}
for e in Equipment.objects.all().order_by("id"):
    raw = e.serial_number
    s = (raw or "")
    norm = s.strip().lower()
    key = norm if norm != "" else "__EMPTY__"
    by_norm.setdefault(key, []).append((e.id, s))

dupe_groups = {k:v for k,v in by_norm.items() if len(v) > 1}
print("Duplike grup sayısı:", len(dupe_groups))

changed = 0
with transaction.atomic():
    for key, rows in dupe_groups.items():
        keeper_id, keeper_val = rows[0]  # ilk kaydı koru
        for (pk, val) in rows[1:]:
            if key == "__EMPTY__":
                new_val = safe_unique_value("", SUFFIX_EMPTY.format(id=pk))
            else:
                new_val = safe_unique_value(val, SUFFIX_DUP.format(id=pk))
            # ekstra güvenlik: yine çakışırsa hafif varyasyon
            q = Equipment.objects.filter(serial_number=new_val).exclude(pk=pk)
            if q.exists():
                new_val = safe_unique_value(val, (SUFFIX_DUP.format(id=pk) + "_X"))
            Equipment.objects.filter(pk=pk).update(serial_number=new_val)
            changed += 1

print("Güncellenen kayıt:", changed)
### DOSYA BİTİŞ: fix_serial_dupes_runner.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\dedupe_serials.py
from django.db import transaction
from maintenance.models import Equipment

dupe_ids = []
seen = set()

qs = Equipment.objects.all().order_by('id')
for e in qs:
    sn = (e.serial_number or '').strip()
    if not sn:
        continue
    key = sn.lower()
    if key in seen:
        dupe_ids.append(e.id)
    else:
        seen.add(key)

with transaction.atomic():
    for pk in dupe_ids:
        Equipment.objects.filter(pk=pk).update(serial_number=None)

print("Deduped:", len(dupe_ids), "records set to NULL")
### DOSYA BİTİŞ: dedupe_serials.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\dedupe_serials.py
from django.db import transaction
from maintenance.models import Equipment

dupe_ids = []
seen = set()

qs = Equipment.objects.all().order_by('id')
for e in qs:
    sn = (e.serial_number or '').strip()
    if not sn:
        continue
    key = sn.lower()
    if key in seen:
        dupe_ids.append(e.id)
    else:
        seen.add(key)

with transaction.atomic():
    for pk in dupe_ids:
        Equipment.objects.filter(pk=pk).update(serial_number=None)

print("Deduped:", len(dupe_ids), "records set to NULL")
### DOSYA BİTİŞ: dedupe_serials.py

### DOSYA BAŞLANGIÇ: .\\reporters\quarantine-reporter.js
// reporters/quarantine-reporter.js (Karantina ve AI Kuyruk Yöneticisi - TAM İMPLEMENTASYON)
const fs = require('fs');
const path = require('path');

const QUARANTINE_FILE = path.join(process.cwd(), 'quarantine.json');
const AI_QUEUE_FILE = path.join(process.cwd(), 'ai_queue', 'failed_tests.jsonl');

class QuarantineReporter {
     constructor(options) {
          this.quarantine = {};
          this.loadQuarantine();
     }

     loadQuarantine() {
          if (fs.existsSync(QUARANTINE_FILE)) {
               try {
                    this.quarantine = JSON.parse(fs.readFileSync(QUARANTINE_FILE, 'utf8'));
                    console.log(`[REPORTER] Karantina durumu yüklendi: ${Object.keys(this.quarantine).length} öğe.`);
               } catch (e) {
                    console.error('[REPORTER HATA] Karantina dosyasını okurken hata oluştu, sıfırdan başlatılıyor.', e.message);
                    this.quarantine = {};
               }
          }
     }

     onTestEnd(test, result) {
          const testId = `${path.basename(test.location.file)} - ${test.title}`;

          if (result.status === 'failed' || result.status === 'timedOut') {
               this.quarantine[testId] = (this.quarantine[testId] || 0) + 1;

               const errorMsg = result.errors[0]?.message || result.error?.message || 'Tanımsız veya süre aşımı hatası';
               const aiReport = {
                    id: testId,
                    status: result.status,
                    error: errorMsg.split('\n')[0],
                    timestamp: new Date().toISOString()
               };
               fs.appendFileSync(AI_QUEUE_FILE, JSON.stringify(aiReport) + '\n');

               if (this.quarantine[testId] >= 3) {
                    console.log(`[KARANTİNA] Görev ${testId} 3. kez başarısız oldu ve karantinaya alındı.`);
               }
          } else if (result.status === 'passed' && this.quarantine[testId] && this.quarantine[testId] < 3) {
               delete this.quarantine[testId];
          }
     }

     onEnd(result) {
          fs.writeFileSync(QUARANTINE_FILE, JSON.stringify(this.quarantine, null, 2));
          console.log(`[RAPOR] Karantina durumu güncellendi. Başarısızlık sayısı: ${result.failures}.`);
     }
}

module.exports = QuarantineReporter;
### DOSYA BİTİŞ: quarantine-reporter.js

### DOSYA BAŞLANGIÇ: .\\auth.setup.js
// Rev: 2025-10-02 12:20 r1
// auth.setup.js
const { chromium } = require('@playwright/test');
const fs = require('fs');
const path = require('path');

module.exports = async () => {
  const STORAGE_PATH = path.join(__dirname, 'storage', 'user.json');
  const baseURL = process.env.BASE_URL || 'http://127.0.0.1:8010';

  // storage klasörü garanti
  fs.mkdirSync(path.dirname(STORAGE_PATH), { recursive: true });

  const browser = await chromium.launch();
  const page = await browser.newPage();

  // LOGIN AKIŞI — kendi uygulamana göre selector/URL uyarlayabilirsin
  await page.goto(`${baseURL}/admin/login/`, { waitUntil: 'domcontentloaded' });
  await page.fill('#id_username', process.env.ADMIN_USER || 'hp');
  await page.fill('#id_password', process.env.ADMIN_PASS || 'admin');
  await Promise.all([
    page.waitForNavigation({ waitUntil: 'networkidle' }),
    page.click('text=/Log in|Giriş|Oturum Aç/i'),
  ]);

  // Oturum durumunu kaydet
  await page.context().storageState({ path: STORAGE_PATH });
  await browser.close();
};
### DOSYA BİTİŞ: auth.setup.js

### DOSYA BAŞLANGIÇ: .\\maintenance\urls.py
from django.urls import path

# Bu uygulama için URL'ler şu an boş bırakılabilir
urlpatterns = [
    
]
### DOSYA BİTİŞ: urls.py

### DOSYA BAŞLANGIÇ: .\\core\admin_utils.py
# Bu dosya, toplu admin aksiyonları için gereken yardımcı fonksiyonları içerir.
def make_active(modeladmin, request, queryset):
    """Seçili objeleri toplu olarak aktif yapar."""
    queryset.update(is_active=True)
make_active.short_description = "Seçili öğeleri aktif yap"

def make_inactive(modeladmin, request, queryset):
    """Seçili objeleri toplu olarak pasif yapar."""
    queryset.update(is_active=False)
make_inactive.short_description = "Seçili öğeleri pasif yap"
### DOSYA BİTİŞ: admin_utils.py

### DOSYA BAŞLANGIÇ: .\\ops\gen_from_backlog.ps1
param(
    [string]$BacklogPath = "ops/backlog.json",
    [string]$FlowsDir = "flows",
    [string]$FlowGenScript = "tools/pw_flow.py"
)

$ErrorActionPreference = "Stop"

if (-not (Test-Path $BacklogPath)) {
    Write-Error "Backlog dosyası bulunamadı: $BacklogPath"
    exit 1
}
if (-not (Test-Path $FlowsDir)) {
    New-Item -ItemType Directory -Path $FlowsDir | Out-Null
}
if (-not (Test-Path $FlowGenScript)) {
    Write-Error "Flow oluşturma betiği bulunamadı: $FlowGenScript"
    exit 1
}

Write-Host "[gen] Flow üretimi BAŞLADI." -ForegroundColor Yellow

try {
    $jsonContent = Get-Content $BacklogPath -Raw -Encoding UTF8
    $backlog = $jsonContent | ConvertFrom-Json -ErrorAction Stop
} catch {
    Write-Error "Backlog JSON dosyası okunamadı veya bozuk: "
    exit 1
}

$generatedCount = 0
foreach ($task in $backlog) {
    if (-not $task.id) {
        Write-Warning "Boş ID içeren görev atlandı."
        continue
    }

    $flowFileName = "_flow.json"
    $flowFilePath = Join-Path -Path $FlowsDir -ChildPath $flowFileName
    
    $tempTaskPath = "temp_task_.json" 
    (ConvertTo-Json $task -Depth 10) | Set-Content -Path $tempTaskPath -Encoding UTF8

    Write-Host "[DEBUG] Görev:  - Hedef dosya: $flowFilePath" -ForegroundColor DarkGray

    $pythonArgs = @(
        "-File", $FlowGenScript,
        "--task-file", $tempTaskPath,
        "--output", $flowFilePath
    )
    
    $result = python @($pythonArgs)
    
    if (-not (Test-Path $flowFilePath)) {
        Write-Warning "[WARN] $flowFileName oluşturulamadı. Python çıktısı: $result"
    } else {
        Write-Host "✅ $flowFileName başarıyla oluşturuldu." -ForegroundColor Green
        $generatedCount++
    }

    Remove-Item $tempTaskPath -ErrorAction SilentlyContinue
}

Write-Host "[gen] Flow üretimi TAMAMLANDI. Toplam üretilen: $generatedCount" -ForegroundColor Yellow

if ($generatedCount -gt 0) {
    exit 0
} else {
    exit 1
}
### DOSYA BİTİŞ: gen_from_backlog.ps1

### DOSYA BAŞLANGIÇ: .\\ops\run_backlog.ps1
param(
    [string]$FlowsDir = "flows",
    [string]$Filter = "*",
    [string]$BaseUrl = "http://127.0.0.1:8010",
    [bool]$LinkSmoke = $false,
    [int]$SmokeDepth = 1,
    [int]$SmokeLimit = 200,
    [string]$ExtraArgs = ""
)

$ErrorActionPreference = "Stop"

Write-Host "[run] Filters: $Filter" -ForegroundColor Yellow

$flowFiles = Get-ChildItem -Path $FlowsDir -Filter "*_flow.json" -ErrorAction SilentlyContinue | Where-Object { $_.Name -like $Filter.Replace('*', '*') + "_flow.json" }

if ($flowFiles.Count -eq 0) {
    Write-Host "[run] Akış bulunamadı. Aranılan dizin: $FlowsDir" -ForegroundColor Red
    Write-Host "[DEBUG] Filtre: $Filter.Replace('*', '*') + '_flow.json'" -ForegroundColor DarkGray
    exit 1
}

Write-Host "[run] 0 adet akış bulundu. Başlatılıyor..." -ForegroundColor Green

foreach ($file in $flowFiles) {
    $flowPath = $file.FullName
    $id = $file.BaseName -replace '_flow$'

    Write-Host "--- Başlatılıyor: $id ($flowPath) ---" -ForegroundColor Cyan
    
    $args = @(
        "npx", 
        "playwright", 
        "flow", 
        "run", 
        "", 
        "--base-url", 
        ""
    )

    if ($LinkSmoke) {
        $args += @(
            "--extra-command", 
            "powershell -ExecutionPolicy Bypass -File ops/smoke_links.ps1 -TargetUrl "" -TargetFlow "" -SmokeDepth $SmokeDepth -SmokeLimit $SmokeLimit -OkRedirectTo /_direct/.*",
            "--log-file",
            "logs/$id_smoke_$(Get-Date -Format 'yyyyMMddHHmmss').log"
        )
    }

    if ($ExtraArgs) {
        $args += $ExtraArgs.Split(' ') | Where-Object { -not [string]::IsNullOrEmpty($_) }
    }

    $commandLine = $args -join ' '
    Write-Host "[DEBUG] Çalıştırılan Komut: $commandLine" -ForegroundColor DarkGray
    
    $process = Start-Process -FilePath "cmd.exe" -ArgumentList "/c $commandLine" -NoNewWindow -PassThru -Wait -RedirectStandardOutput "logs/$id_pw_$(Get-Date -Format 'yyyyMMddHHmmss').log" -RedirectStandardError "logs/$id_error_$(Get-Date -Format 'yyyyMMddHHmmss').log"
    
    if ($process.ExitCode -eq 0) {
        Write-Host "✅ Başarılı: $id" -ForegroundColor Green
    } else {
        Write-Host "❌ Başarısız: $id (Exit Kodu: $(.ExitCode))" -ForegroundColor Red
    }
}

Write-Host "--- Koşucu BİTTİ ---" -ForegroundColor Yellow
### DOSYA BİTİŞ: run_backlog.ps1

### DOSYA BAŞLANGIÇ: .\\tools\tasks_from_csv.ps1
param(
    [Parameter(Mandatory=$true)]
    [string]$CsvPath,

    [string]$JsonPath = "plan/tasks.json"
)

$ErrorActionPreference = "Stop"

if (-not (Test-Path $CsvPath)) {
    Write-Error "CSV dosyası bulunamadı: $CsvPath"
    exit 1
}

if (-not (Test-Path "plan")) {
    New-Item -ItemType Directory -Path "plan" | Out-Null
}

Write-Host "--- TASK DÖNÜŞTÜRÜCÜ BAŞLADI (V4 - ONARIM) ---" -ForegroundColor Yellow

try {
    # 1. CSV'yi oku ve başlıkları temizle (V3'teki gibi)
    $rawContent = Get-Content $CsvPath -Encoding UTF8
    $headerLine = $rawContent[0].Trim()
    $cleanHeaderLine = ($headerLine -split ',') | ForEach-Object { $_.Trim() } -join ','
    $cleanContent = @($cleanHeaderLine) + $rawContent[1..($rawContent.Count - 1)]

    $tasks = $cleanContent | ConvertFrom-Csv -Delimiter ','
    $requiredHeaders = "id", "title", "type", "design_ref", "visual_threshold"
    
    $actualHeaders = $tasks[0].psobject.properties.Name
    $missingHeaders = $requiredHeaders | Where-Object { $actualHeaders -notcontains $_.ToLower() }

    if ($missingHeaders.Count -gt 0) {
        Write-Error "CSV'de zorunlu başlıklar eksik: "
        exit 1
    }

    # 2. JSON formatına dönüştür
    $output = @()
    foreach ($task in $tasks) {
        $id = $task.id.Trim()
        $title = $task.title.Trim()
        $type = $task.type.Trim()
        $design_ref = $task.design_ref.Trim()
        $visual_threshold_str = $task.visual_threshold.Trim()

        if ([string]::IsNullOrEmpty($id) -or [string]::IsNullOrEmpty($title)) {
            Write-Warning "Boş ID veya Title içeren satır atlandı."
            continue
        }
        
        # Olası kültür sorununu gidermek için: Virgülleri noktaya çevir, sonra dönüştür.
        $clean_threshold_str = $visual_threshold_str.Replace(',', '.')
        $visual_threshold = [double]::Parse($clean_threshold_str, [cultureinfo]::InvariantCulture)

        $taskObject = [PSCustomObject]@{
            id = $id
            title = $title
            type = $type
            design_ref = $design_ref
            visual_threshold = $visual_threshold
        }
        $output += $taskObject
    }

    # 3. JSON'a yaz
    $output | ConvertTo-Json -Depth 10 | Set-Content -Path $JsonPath -Encoding UTF8
    
    Write-Host "✅ Başarılı: 0 görev $JsonPath dosyasına kaydedildi." -ForegroundColor Green
    Write-Host "--- TASK DÖNÜŞTÜRÜCÜ BİTTİ ---" -ForegroundColor Yellow
}
catch {
    # Hatanın kendisini açıkça yazdır (Dönüşüm hatasını yakalamak için)
    Write-Error "Dönüştürme sırasında KRİTİK HATA oluştu: "
    exit 1
}
### DOSYA BİTİŞ: tasks_from_csv.ps1

### DOSYA BAŞLANGIÇ: .\\ops\error_summary.ps1
param(
    [string]$OutDir = "_otokodlama\out"
)

$ErrorActionPreference = "Continue"

Write-Host "
--- HATA ÖZETİ BAŞLADI ---" -ForegroundColor Cyan

$errorCount = 0
$files = Get-ChildItem -Path $OutDir -Filter "*.json" -ErrorAction SilentlyContinue

if (-not $files) {
    Write-Host "[WARN] $OutDir altında JSON dosya bulunamadı." -ForegroundColor Yellow
    exit 0
}

foreach ($file in $files) {
    $content = Get-Content $file.FullName -Raw -Encoding UTF8
    
    # 1. JSON'u parse etmeyi dene (hata yoksa)
    try {
        $data = $content | ConvertFrom-Json -ErrorAction Stop
        if ($data -and $data.error) {
            Write-Host "FAIL : " -ForegroundColor Red
            $errorCount++
        } elseif ($data -and $data.status -eq "PASS") {
            # Hata yok, başarılı
        } else {
            # Beklenmedik durum (boş JSON veya status yok)
            Write-Host "UNKNOW : Beklenmedik JSON formatı veya boş çıktı." -ForegroundColor DarkYellow
            $errorCount++
        }
    }
    # 2. JSON parse edilemezse (bozuk JSON, muhtemelen bir kilitlenme sonucu)
    catch {
        # Ham metin içinde hatayı ara (Playwright/Node hata metni)
        $match = [regex]::Match($content, "Error: ([^

]+)")
        if ($match.Success) {
            Write-Host "CRITICAL : [HAM HATA] " -ForegroundColor Magenta
            $errorCount++
        } else {
            # Çok nadir: JSON bozuk ama ham hata da bulunamadı
            Write-Host "CRITICAL : [HAM OKUNAMADI] JSON bozuk, kök hata bulunamadı." -ForegroundColor DarkRed
            $errorCount++
        }
    }
}

Write-Host "--- HATA ÖZETİ BİTTİ. Toplam Hata: $errorCount ---" -ForegroundColor Cyan

if ($errorCount -gt 0) {
    exit 2 # Kırmızı çıkış kodu
}
### DOSYA BİTİŞ: error_summary.ps1

### DOSYA BAŞLANGIÇ: .\\ops\run_backlog_beep.ps1
param(
  [string]$Filter = "*",
  [string]$ExtraArgs = ""
)

$ErrorActionPreference = "Stop"
$flow_dir = ".\ops\flows"
$out_dir = ".\_otokodlama\out"

# Çıktı dizininin varlığını kontrol et
if (-not (Test-Path $out_dir)) {
    New-Item -ItemType Directory -Path $out_dir -Force | Out-Null
}

$files = Get-ChildItem -Path $flow_dir -Filter "$Filter.flow" -ErrorAction Stop

foreach ($file in $files) {
  $flow_file = $file.FullName
  $json_file = Join-Path $out_dir "$($file.BaseName).json"

  Write-Host "==> Running: $($file.Name)" -ForegroundColor Yellow

  # Sadece temel adımlar ve opsiyonel ExtraArgs. Timeout yok, BaseUrl yok.
  $python_command = "python tools\pw_flow.py --steps '$flow_file' --out '$json_file'"

  if ($ExtraArgs) {
    $python_command += " $ExtraArgs"
  }

  Write-Host "[run_and_guard] $($python_command)"

  try {
    # Doğrudan python çağrısı
    Invoke-Expression $python_command
    $exitCode = $LASTEXITCODE
  }
  catch {
    Write-Host "Python çağrısında hata: $_" -ForegroundColor Red
    $exitCode = 1
  }

  Write-Host "[guard] wrote: $($json_file)" -ForegroundColor Magenta
  if ($exitCode -ne 0) {
    Write-Host "[err] $($file.Name) exit=$exitCode" -ForegroundColor Red
  }
}
### DOSYA BİTİŞ: run_backlog_beep.ps1

### DOSYA BAŞLANGIÇ: .\\ops\report_console.ps1
param(
  [string]$OutDir = ".\_otokodlama\out"
)

$ErrorActionPreference = "Stop"

$files = Get-ChildItem -Path $OutDir -Filter "*.json" -ErrorAction Stop
Write-Host ""
Write-Host "==================== PIPELINE ÖZET RAPORU ====================" -ForegroundColor Cyan
Write-Host "Dosya                     Sonuç    Detay"
Write-Host "--------------------------------------------------------------"

$totalPass = 0
$totalFail = 0
$totalError = 0

foreach ($file in $files) {
    $content = Get-Content $file.FullName -Raw | ConvertFrom-Json -ErrorAction SilentlyContinue
    $result = ""
    $detail = ""

    if (-not $content) {
        $result = "ERROR"
        $detail = "JSON Parse Hatası"
        $totalError++
    }
    elseif ($content.status -eq "PASS") {
        $result = "PASS"
        $totalPass++
    }
    elseif ($content.status -eq "FAIL") {
        $result = "FAIL"
        $detail = $content.error -replace '\r?\n.*', '' # İlk satırı al
        $totalFail++
    }
    else {
        $result = "UNKNOW"
        $totalError++
    }

    "{0,-30} {1,-8} {2}" -f $file.Name, $result, $detail
}

Write-Host "--------------------------------------------------------------"
Write-Host "PASS: $totalPass    FAIL: $totalFail    ERROR: $totalError" -ForegroundColor Green
Write-Host "==============================================================" -ForegroundColor Cyan
### DOSYA BİTİŞ: report_console.ps1

### DOSYA BAŞLANGIÇ: .\\tools\img_hash_compare.ps1
param(
  [Parameter(Mandatory=$true)][string]$A,
  [Parameter(Mandatory=$true)][string]$B
)
Add-Type -AssemblyName System.Drawing

function Get-ImageHash([string]$path) {
  if (!(Test-Path $path)) { throw "Image not found: $path" }
  $bmp = New-Object System.Drawing.Bitmap (Get-Item $path).FullName
  try {
    $thumb = New-Object System.Drawing.Bitmap 8,8
    $g = [System.Drawing.Graphics]::FromImage($thumb)
    $g.InterpolationMode = "HighQualityBicubic"
    $g.DrawImage($bmp, 0,0, 8,8)
    $g.Dispose()
    $vals = New-Object 'System.Collections.Generic.List[double]'
    for ($y=0;$y -lt 8;$y++) { for ($x=0;$x -lt 8;$x++) {
      $c = $thumb.GetPixel($x,$y)
      $vals.Add(0.299*$c.R + 0.587*$c.G + 0.114*$c.B)
    } }
    $avg = ($vals | Measure-Object -Average).Average
    $bits = New-Object 'System.Collections.Generic.List[int]'
    foreach ($v in $vals) { $bits.Add( [int]([double]$v - $avg -ge 0) ) }
    return ($bits -join '')
  } finally {
    $bmp.Dispose(); $thumb.Dispose()
  }
}

$h1 = Get-ImageHash $A
$h2 = Get-ImageHash $B
$dist = 0; for ($i=0;$i -lt 64;$i++) { if ($h1[$i] -ne $h2[$i]) { $dist++ } }
$sim = 1.0 - ($dist / 64.0)

$result = @{ a=$A; b=$B; similarity=[Math]::Round($sim,4) } | ConvertTo-Json -Compress
$result
if ($sim -ge 0.90) { exit 0 } else { exit 2 }
### DOSYA BİTİŞ: img_hash_compare.ps1

### DOSYA BAŞLANGIÇ: .\\tools\apply_codepack.ps1
param(
  [Parameter(Mandatory=$true)]
  [string]$Pack
)
$ErrorActionPreference="Stop"

if (!(Test-Path $Pack)) { throw "Pack not found: $Pack" }
$content = Get-Content $Pack -Raw

$regex = [regex]'(?ms)^\s*###>\s*(?<path>.+?)\r?\n(?<body>.*?)(?:\r?\n)?###<'
$matches = $regex.Matches($content)
if ($matches.Count -eq 0) { throw "No blocks found. Use ###> <path> ... ###< delimiters." }

$root = Get-Location
$written = @()
foreach ($m in $matches) {
  $rel = $m.Groups['path'].Value.Trim()
  $body = $m.Groups['body'].Value
  $dest = Join-Path $root $rel
  $dir  = Split-Path $dest -Parent
  if ($dir -and !(Test-Path $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }
  [IO.File]::WriteAllText($dest, $body, [Text.UTF8Encoding]::new($false))
  $written += $rel
  Write-Host "[WRITE] $rel"
}
"[OK] Wrote $($written.Count) file(s)."
### DOSYA BİTİŞ: apply_codepack.ps1

