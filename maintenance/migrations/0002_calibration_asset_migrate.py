# REV: 1.0 | 2025-09-24 | Hash: 86721dba | Parça: 1/1
# Generated by ChatGPT - safe data migration from equipment->asset
from django.db import migrations, models
import django.db.models.deletion


def create_assets_and_relink(apps, schema_editor):
    """
    Eski kayıtlar:
      CalibrationRecord(equipment_id=...)  -->  CalibrationAsset (asset_code=equipment.code)
    Adımlar:
      - Her equipment için bir CalibrationAsset oluştur (yoksa).
      - Tüm CalibrationRecord satırlarının asset_id'sini doldur.
    """
    Equipment = apps.get_model("maintenance", "Equipment")

    # DİKKAT: Bu migration aşamasında CalibrationRecord modelinde HÂLÂ 'equipment' alanı mevcut.
    CalibrationRecord = apps.get_model("maintenance", "CalibrationRecord")
    CalibrationAsset = apps.get_model("maintenance", "CalibrationAsset")

    # equipment_id -> asset_id map
    eq_to_asset = {}

    for eq in Equipment.objects.all():
        # asset_code: equipment.code, asset_name: equipment.name
        asset, _ = CalibrationAsset.objects.get_or_create(
            asset_code=eq.code,
            defaults=dict(
                asset_name=eq.name or eq.code,
                location=eq.area or "",
                equipment=eq,
                brand="",
                model="",
                serial_no="",
                measure_range="",
                resolution="",
                unit="",
                accuracy="",
                uncertainty="",
                acceptance_criteria="",
                calibration_method="",
                standard_device="",
                standard_id="",
                owner="",
                responsible_email="",
                is_active=True,
            ),
        )
        eq_to_asset[eq.id] = asset.id

    # Tüm CalibrationRecord'ları asset'e bağla (equipment'e bakarak)
    for rec in CalibrationRecord.objects.all():
        eq_id = getattr(rec, "equipment_id", None)
        asset_id = eq_to_asset.get(eq_id)
        if asset_id:
            setattr(rec, "asset_id", asset_id)
            rec.save(update_fields=["asset_id"])


def noop(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("maintenance", "0001_initial"),
    ]

    operations = [
        # 1) CalibrationAsset tablosunu oluştur
        migrations.CreateModel(
            name="CalibrationAsset",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("asset_code", models.CharField(max_length=120, unique=True, verbose_name="Cihaz Kodu")),
                ("asset_name", models.CharField(max_length=200, verbose_name="Cihaz Adı")),
                ("location", models.CharField(blank=True, max_length=150, verbose_name="Lokasyon")),
                ("brand", models.CharField(blank=True, max_length=120, verbose_name="Marka")),
                ("model", models.CharField(blank=True, max_length=120, verbose_name="Model")),
                ("serial_no", models.CharField(blank=True, max_length=120, verbose_name="Seri No")),
                ("measure_range", models.CharField(blank=True, max_length=120, verbose_name="Ölçüm Aralığı")),
                ("resolution", models.CharField(blank=True, max_length=120, verbose_name="Çözünürlük")),
                ("unit", models.CharField(blank=True, max_length=30, verbose_name="Birim")),
                ("accuracy", models.CharField(blank=True, max_length=120, verbose_name="Doğruluk")),
                ("uncertainty", models.CharField(blank=True, max_length=120, verbose_name="Belirsizlik")),
                ("acceptance_criteria", models.CharField(blank=True, max_length=200, verbose_name="Kabul Kriteri")),
                ("calibration_method", models.CharField(blank=True, max_length=200, verbose_name="Yöntem/Prosedür")),
                ("standard_device", models.CharField(blank=True, max_length=200, verbose_name="Referans/Standart Cihaz")),
                ("standard_id", models.CharField(blank=True, max_length=120, verbose_name="Standart Cihaz ID")),
                ("owner", models.CharField(blank=True, max_length=120, verbose_name="Sorumlu")),
                ("responsible_email", models.EmailField(blank=True, max_length=254, verbose_name="Sorumlu E-posta")),
                ("is_active", models.BooleanField(default=True)),
                ("equipment", models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="maintenance.equipment")),
            ],
            options={
                "verbose_name": "Kalibrasyon Cihazı",
                "verbose_name_plural": "Kalibrasyon Cihazları",
                "ordering": ["asset_code"],
            },
        ),

        # 2) CalibrationRecord.asset alanını ÖNCE null=True ile ekle (veriyi taşımak için)
        migrations.AddField(
            model_name="calibrationrecord",
            name="asset",
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name="records", to="maintenance.calibrationasset"),
        ),

        # 3) Veri taşıma: equipment -> asset
        migrations.RunPython(create_assets_and_relink, reverse_code=noop),

        # 4) asset'ı zorunlu yap
        migrations.AlterField(
            model_name="calibrationrecord",
            name="asset",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="records", to="maintenance.calibrationasset"),
        ),

        # 5) Eski equipment FK'sini kaldır (CalibrationRecord'tan)
        migrations.RemoveField(
            model_name="calibrationrecord",
            name="equipment",
        ),
    ]
