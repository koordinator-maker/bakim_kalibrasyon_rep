### DOSYA BAŞLANGIÇ: .\\ops\run_backlog.ps1
param(
  [string[]]$Filter = @("*"),         # Birden çok desen destekli: "login_smoke*","equipment_ui_*"
  [switch]$LinkSmoke,                 # Link smoke gate çalışsın mı?
  [string]$BaseUrl    = "http://127.0.0.1:8010",
  [int]   $SmokeDepth = 1,
  [int]   $SmokeLimit = 150,
  [string]$ExtraArgs  = ""            # pw_flow.py'ye geçer, ör: "--timeout 5000"
)

# --- Yardımcılar ---
$ErrorActionPreference = "Stop"
$here     = Split-Path -Parent $MyInvocation.MyCommand.Path
$repoRoot = $here                        # projenizde ops klasörü kök dizinde ise bu yeterli
$FlowsDir = Join-Path $here 'flows'

# Filter normalize
if ($Filter -is [string]) { $Filter = @($Filter) }
Write-Host ("[run] Filters: {0}" -f ($Filter -join ", "))

# Akışları topla (çoklu pattern)
$files = @()
foreach($pat in $Filter){
  if ([string]::IsNullOrWhiteSpace($pat)) { continue }
  $files += Get-ChildItem -Path $FlowsDir -Filter ("{0}.flow" -f $pat) -ErrorAction SilentlyContinue
}
$flows = $files | Sort-Object FullName -Unique
if ($flows.Count -eq 0) {
  Write-Host "[run] Akış bulunamadı." -ForegroundColor Yellow
  return
}
Write-Host ("[run] Bulunan akış sayısı: {0}" -f $flows.Count)
Write-Host ("[run] Flows:`n - {0}" -f (($flows | ForEach-Object { $_.Name }) -join "`n - "))

# Ortam: unbuffered python
$env:PYTHONUNBUFFERED = "1"

# Çıktı klasörleri
$outDir   = "_otokodlama\out"
$smkDir   = "_otokodlama\smoke"
$repDir   = "_otokodlama\reports"
New-Item -ItemType Directory -Force -Path $outDir,$smkDir,$repDir | Out-Null

# OkRedirectTo default
if (-not $OkRedirectTo) { $OkRedirectTo = "/_direct/.*|/admin/.*" }

# --- Ana döngü ---
foreach ($f in $flows) {
  $baseName = [System.IO.Path]::GetFileNameWithoutExtension($f.Name)
  $outPath  = Join-Path $repoRoot (Join-Path $outDir  ("{0}.json" -f $baseName))
  $smkOut   = $outPath  # link-smoke çıktısını da aynı dosyaya yazıyoruz (mevcut işleyişle uyumlu)
  $startPath = "/admin/"

  Write-Host ("[run] >>> {0}" -f $baseName) -ForegroundColor Cyan

  # 1) Akışı çalıştır (ops\run_and_guard.ps1 mevcut davranışı korur)
  powershell -NoProfile -NonInteractive -ExecutionPolicy Bypass -File (Join-Path $here "run_and_guard.ps1") `
    -flow $f.FullName `
    -outPath $outPath `
    -BaseUrl $BaseUrl `
    -ExtraArgs $ExtraArgs

  # 2) İsteğe bağlı link smoke (DIŞARIDA -Out AMBIGUOUS YOK; doğrudan fonksiyon çağrısı)
  if ($LinkSmoke) {
    Write-Host "[run] Link smoke kontrolü başlıyor..." -ForegroundColor DarkGray
    & (Join-Path $here "smoke_links.ps1") `
      -Base        $BaseUrl `
      -Start $startPath `
      -Out         $smkOut `
      -Depth       $SmokeDepth `
      -Limit       $SmokeLimit `
      -PathPrefix  "/" `
      -Timeout     5000 `
      -OkRedirectTo $OkRedirectTo
  }

  Write-Host ("[run] <<< {0} tamam" -f $baseName) -ForegroundColor Green
}

# 3) Özet raporu isteğe bağlı (bozuk parametre geliyordu; burada dokunmuyoruz)
Write-Host "[run] Tamamlandı"



### DOSYA BİTİŞ: run_backlog.ps1

### DOSYA BAŞLANGIÇ: .\\ops\gen_from_backlog.ps1
param(
  [string]$BacklogPath = "ops\backlog.json",
  [string]$FlowsDir    = "ops\flows"
)

if (!(Test-Path $BacklogPath)) { throw "Backlog bulunamadı: $BacklogPath" }
$items = Get-Content $BacklogPath -Raw -Encoding UTF8 | ConvertFrom-Json

New-Item -ItemType Directory -Force -Path $FlowsDir | Out-Null
New-Item -ItemType Directory -Force -Path _otokodlama\debug | Out-Null

function New-LoginBlock([object]$loginMeta) {
  $u = "/admin/login/"
  if ($null -ne $loginMeta.url -and $loginMeta.url) { $u = [string]$loginMeta.url }
@"
GOTO $u
WAIT SELECTOR input#id_username
FILL input#id_username $($loginMeta.username)
FILL input#id_password $($loginMeta.password)
CLICK input[type=submit]
WAIT SELECTOR body
DUMPDOM _otokodlama/debug/login_after_submit_dom.txt
SCREENSHOT _otokodlama/debug/login_after_submit.png
WAIT SELECTOR #user-tools a[href$="/logout/"]
"@
}

foreach ($it in $items) {
  $id = [string]$it.id
  if (-not $id) { continue }

  if ($it.type -eq "screen") {
    $login = if ($it.login) { $it.login } else { @{ username="admin"; password="Admin!2345"; url=$it.url } }
    $flow = New-LoginBlock -loginMeta $login
    if ($it.url) { $flow += "GOTO $($it.url)`n" }
    foreach ($sel in @($it.checks.must_have_selectors)) {
      if ($sel) { $flow += "WAIT SELECTOR $sel`n" }
    }
    $flow += "SCREENSHOT _otokodlama/debug/${id}_screen.png`n"
    $outPath = Join-Path $FlowsDir "${id}.flow"
    $flow | Set-Content $outPath -Encoding UTF8
    continue
  }

  if ($it.type -eq "crud_admin") {
    $urls = $it.urls
    $sel  = $it.selectors
    $dat  = $it.data
    $loginBlock = New-LoginBlock -loginMeta @{ username="admin"; password="Admin!2345"; url="/admin/login/" }

    # CREATE
    $create = $loginBlock + @"
GOTO $($urls.add)
WAIT SELECTOR $($sel.form)
FILL $($sel.code_input) $($dat.code)
FILL $($sel.name_input) $($dat.name)
CLICK input[name=_save]
WAIT SELECTOR $($sel.msg)
SCREENSHOT _otokodlama/debug/${id}_create.png
"@
    $createPath = Join-Path $FlowsDir "${id}_create.flow"
    $create | Set-Content $createPath -Encoding UTF8

    # UPDATE
    $update = $loginBlock + @"
GOTO $($urls.list_direct)?q=$($dat.search_q)
WAIT SELECTOR $($sel.list_table)
WAIT SELECTOR $($sel.row_link)
CLICK $($sel.row_link)
WAIT SELECTOR $($sel.form)
FILL $($sel.name_input) $($dat.name_updated)
CLICK input[name=_save]
WAIT SELECTOR $($sel.msg)
SCREENSHOT _otokodlama/debug/${id}_update.png
"@
    $updatePath = Join-Path $FlowsDir "${id}_update.flow"
    $update | Set-Content $updatePath -Encoding UTF8

    # DELETE
    $delete = $loginBlock + @"
GOTO $($urls.list_direct)?q=$($dat.search_q)
WAIT SELECTOR $($sel.list_table)
WAIT SELECTOR $($sel.row_link)
CLICK $($sel.row_link)
WAIT SELECTOR $($sel.delete_btn)
CLICK $($sel.delete_btn)
WAIT SELECTOR $($sel.delete_confirm)
CLICK $($sel.delete_confirm)
WAIT SELECTOR $($sel.msg)
SCREENSHOT _otokodlama/debug/${id}_delete.png
"@
    $deletePath = Join-Path $FlowsDir "${id}_delete.flow"
    $delete | Set-Content $deletePath -Encoding UTF8
  }
}

Write-Host "[gen] Flow üretimi tamam" -ForegroundColor Green
### DOSYA BİTİŞ: gen_from_backlog.ps1

### DOSYA BAŞLANGIÇ: .\\maintenance\admin.py
# -*- coding: utf-8 -*-
from django.contrib import admin
from django.contrib.admin import AdminSite
from django.contrib.admin.sites import AlreadyRegistered

from .models import (
    Equipment,
    MaintenanceChecklistItem,
    MaintenanceOrder,
    CalibrationAsset,
    CalibrationRecord,
)

class MaintenanceAdminSite(AdminSite):
    def get_app_list(self, request):
        app_list = super().get_app_list(request)
        for app in app_list:
            for m in app.get("models", []):
                # Model adları Django'nun admin menü sözlüğünde ObjectName olarak gelir
                if m.get("object_name") == "Equipment":
                    m["admin_url"] = "/admin/maintenance/equipment/_direct/"
        return app_list

    site_header = "BakÄ±m Kalibrasyon"
    site_title  = "BakÄ±m Kalibrasyon"
    index_title = "YÃ¶netim"

admin_site = MaintenanceAdminSite(name="maintenance_admin")

@admin.register(MaintenanceChecklistItem, site=admin_site)
class MaintenanceChecklistItemAdmin(admin.ModelAdmin):
    list_display  = ("equipment", "name", "frequency", "is_mandatory")
    list_filter   = ("frequency", "is_mandatory")
    search_fields = ("equipment__code", "equipment__name", "name")

@admin.register(MaintenanceOrder, site=admin_site)
class MaintenanceOrderAdmin(admin.ModelAdmin):
    list_display  = ("title", "equipment", "order_type", "status", "due_date", "cost_total")
    list_filter   = ("order_type", "status")
    search_fields = ("title", "equipment__code", "equipment__name")

@admin.register(CalibrationAsset, site=admin_site)
class CalibrationAssetAdmin(admin.ModelAdmin):
    list_display  = ("asset_code", "asset_name", "location", "brand", "model", "serial_no", "equipment")
    search_fields = ("asset_code", "asset_name", "brand", "model", "serial_no")
    list_filter   = ("brand",)

@admin.register(CalibrationRecord, site=admin_site)
class CalibrationRecordAdmin(admin.ModelAdmin):
    list_display  = ("asset", "last_calibration", "next_calibration", "result", "certificate_no", "total_deviation")
    list_filter   = ("result", "next_calibration")
    search_fields = ("asset__asset_code", "asset__asset_name", "certificate_no")

class EquipmentAdmin(admin.ModelAdmin):
    list_display  = ("code", "name")
    search_fields = ("code", "name")

    def get_preserved_filters(self, request):
        return ""

    def changelist_view(self, request, extra_context=None):
        q = request.GET.copy()
        for k in ("_changelist_filters", "preserved_filters", "p"):
            if k in q:
                q.pop(k)
        request.GET = q
        request.META["QUERY_STRING"] = q.urlencode()
        return super().changelist_view(request, extra_context=extra_context)

try:
    admin_site.register(Equipment, EquipmentAdmin)
except AlreadyRegistered:
    pass
# --- SAFE REDIRECTS AFTER SAVE/DELETE (avoid /equipment/ 302 loop) ---
from urllib.parse import urlsplit
from django.http import HttpResponseRedirect

def _equip_safe_list_url(request):
    return "/admin/maintenance/equipment/_direct/"

def _equip_fix_location(request, resp):
    try:
        loc = resp["Location"] if getattr(resp, "has_header", None) and resp.has_header("Location") else (resp.headers.get("Location") if hasattr(resp, "headers") else None)
    except Exception:
        loc = None
    if getattr(resp, "status_code", 200) in (301, 302) and loc:
        if urlsplit(loc).path.endswith("/admin/maintenance/equipment/"):
            # yalnızca kanonik listeye dönüyorsa güvenli listeye çevir
            try:
                resp["Location"] = _equip_safe_list_url(request)
            except Exception:
                pass
    return resp

def _equip_response_post_save_add(self, request, obj):
    resp = admin.ModelAdmin.response_post_save_add(self, request, obj)
    return _equip_fix_location(request, resp)

def _equip_response_post_save_change(self, request, obj):
    resp = admin.ModelAdmin.response_post_save_change(self, request, obj)
    return _equip_fix_location(request, resp)

def _equip_response_delete(self, request, obj_display, obj_id):
    resp = admin.ModelAdmin.response_delete(self, request, obj_display, obj_id)
    return _equip_fix_location(request, resp)

# monkeypatch uygula
EquipmentAdmin.response_post_save_add    = _equip_response_post_save_add
EquipmentAdmin.response_post_save_change = _equip_response_post_save_change
EquipmentAdmin.response_delete           = _equip_response_delete
# --- END PATCH ---

# ==== BEGIN: EQ-ADMIN HARDENING (redirect to _direct) ====
from urllib.parse import parse_qsl, urlencode
from django.http import HttpResponseRedirect

_EQ_DIRECT = "/admin/maintenance/equipment/_direct/"

def _eq_clean_qs(request):
    qs = ""
    try:
        raw = request.META.get("QUERY_STRING", "") or ""
        pairs = parse_qsl(raw, keep_blank_values=True)
        pairs = [(k, v) for (k, v) in pairs if k not in ("_changelist_filters", "preserved_filters", "p")]
        s = urlencode(pairs, doseq=True)
        qs = ("?" + s) if s else ""
    except Exception:
        qs = ""
    return qs

try:
    _EqAdmin = EquipmentAdmin
except NameError:
    _EqAdmin = None

if _EqAdmin is not None:
    # 1) Kanonik listeye gelen her istek: tek atımlık _direct'e redirect
    _orig_changelist = _EqAdmin.changelist_view
    def _eq_changelist_view(self, request, extra_context=None):
        try:
            p = request.path or ""
        except Exception:
            p = ""
        if p.endswith("/_direct/"):
            return _orig_changelist(self, request, extra_context=extra_context)
        return HttpResponseRedirect(_EQ_DIRECT + _eq_clean_qs(request))
    _EqAdmin.changelist_view = _eq_changelist_view

    # 2) _direct pattern'ini gerçekten ekle (admin URL'lerine)
    def _eq_direct_view(self, request, *args, **kwargs):
        return _orig_changelist(self, request, extra_context=None)
    _EqAdmin._eq_direct_view = _eq_direct_view

    _orig_get_urls = _EqAdmin.get_urls
    def _eq_get_urls(self):
        from django.urls import path
        urls = _orig_get_urls(self)
        my = [ path("_direct/", self.admin_site.admin_view(self._eq_direct_view), name="equipment_list_direct") ]
        return my + urls
    _EqAdmin.get_urls = _eq_get_urls

    # 3) Save/Add/Change/Delete sonra daima _direct'e dön
    def _eq_response_post_save_add(self, request, obj):
        return HttpResponseRedirect(_EQ_DIRECT + _eq_clean_qs(request))
    def _eq_response_post_save_change(self, request, obj):
        return HttpResponseRedirect(_EQ_DIRECT + _eq_clean_qs(request))
    def _eq_response_delete(self, request, obj_display, obj_id):
        return HttpResponseRedirect(_EQ_DIRECT + _eq_clean_qs(request))
    _EqAdmin.response_post_save_add    = _eq_response_post_save_add
    _EqAdmin.response_post_save_change = _eq_response_post_save_change
    _EqAdmin.response_delete           = _eq_response_delete
# ==== END: EQ-ADMIN HARDENING ====
### DOSYA BİTİŞ: admin.py

### DOSYA BAŞLANGIÇ: .\\maintenance\models.py
# REV: 1.1 | 2025-09-25 | Hash: 3a841969 | Parça: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-YS2S076R
# -*- coding: utf-8 -*-
from __future__ import annotations
from django.db import models

# ----------------------------------------------------------------------
# Ekipman
# ----------------------------------------------------------------------
# <<< BLOK SONU: ID:PY-IMP-YS2S076R
# >>> BLOK: MODELS | Domain modelleri | ID:PY-MOD-VE0WTPKT
class Equipment(models.Model):
    DISCIPLINE_CHOICES = (
        ("ELEC", "Elektrik"),
        ("MECH", "Mekanik"),
        ("PNEU", "Pnömatik"),
    )
    code = models.CharField(max_length=50, unique=True)
    name = models.CharField(max_length=200)
    area = models.CharField(max_length=120, blank=True)
    # Üretici firma alanı eklendi (admin listelerinde kullanılıyor)
    manufacturer = models.CharField("Üretici Firma", max_length=200, blank=True)
    discipline = models.CharField(max_length=4, choices=DISCIPLINE_CHOICES, default="MECH")
    criticality = models.PositiveSmallIntegerField(default=3, help_text="1=En kritik, 5=En az kritik")
    is_active = models.BooleanField(default=True)

    class Meta:
        ordering = ["code"]

    def __str__(self):
        return f"{self.code} - {self.name}"


# ----------------------------------------------------------------------
# (Varsa) Yedek Parça
# ----------------------------------------------------------------------
class SparePart(models.Model):
    name = models.CharField(max_length=150)
    is_critical = models.BooleanField(default=False)
    stock_qty = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    min_qty = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    equipment = models.ForeignKey(Equipment, null=True, blank=True, on_delete=models.SET_NULL)

    def __str__(self):
        return self.name


# ----------------------------------------------------------------------
# KALİBRASYON: Cihaz Kartı
# ----------------------------------------------------------------------
class CalibrationAsset(models.Model):
    equipment = models.ForeignKey(Equipment, on_delete=models.SET_NULL, null=True, blank=True)

    asset_code = models.CharField("Cihaz Kodu", max_length=120, unique=True)
    asset_name = models.CharField("Cihaz Adı", max_length=200)
    location = models.CharField("Lokasyon", max_length=150, blank=True)

    brand = models.CharField("Marka", max_length=120, blank=True)
    model = models.CharField("Model", max_length=120, blank=True)
    serial_no = models.CharField("Seri No", max_length=120, blank=True)

    measure_range = models.CharField("Ölçüm Aralığı", max_length=120, blank=True)
    resolution = models.CharField("Çözünürlük", max_length=120, blank=True)
    unit = models.CharField("Birim", max_length=30, blank=True)

    accuracy = models.CharField("Doğruluk", max_length=120, blank=True)
    uncertainty = models.CharField("Belirsizlik", max_length=120, blank=True)
    acceptance_criteria = models.CharField("Kabul Kriteri", max_length=200, blank=True)

    calibration_method = models.CharField("Yöntem/Prosedür", max_length=200, blank=True)
    standard_device = models.CharField("Referans/Standart Cihaz", max_length=200, blank=True)
    standard_id = models.CharField("Standart Cihaz ID", max_length=120, blank=True)

    owner = models.CharField("Sorumlu", max_length=120, blank=True)
    responsible_email = models.EmailField("Sorumlu E-posta", blank=True)

    is_active = models.BooleanField(default=True)

    class Meta:
        verbose_name = "Kalibrasyon Cihazı"
        verbose_name_plural = "Kalibrasyon Cihazları"
        ordering = ["asset_code"]

    def __str__(self):
        return f"{self.asset_code} - {self.asset_name}"


# ----------------------------------------------------------------------
# KALİBRASYON Kayıtları (Geçmiş/Gelecek)
# ----------------------------------------------------------------------
class CalibrationRecord(models.Model):
    asset = models.ForeignKey(CalibrationAsset, on_delete=models.CASCADE, related_name="records")

    last_calibration = models.DateField("Son Kalibrasyon", null=True, blank=True)
    next_calibration = models.DateField("Sonraki Kalibrasyon", null=True, blank=True)

    # Sonuç (OK / UYGUN / UYGUN DEĞİL vb.)
    result = models.CharField("Sonuç", max_length=120, blank=True)
    certificate_no = models.CharField("Sertifika No", max_length=120, blank=True)

    # Toplam sapma (rapordaki birleşik/En büyük sapma) – opsiyonel
    total_deviation = models.DecimalField("Toplam Sapma", max_digits=10, decimal_places=4, null=True, blank=True)

    notes = models.TextField("Notlar", blank=True)

    class Meta:
        ordering = ["-next_calibration", "-id"]

    def __str__(self):
        return f"{self.asset.asset_code} {self.next_calibration or ''}"


# ----------------------------------------------------------------------
# Checklist ve İş Emri
# ----------------------------------------------------------------------
class MaintenanceChecklistItem(models.Model):
    FREQ = (
        ("DAILY", "Günlük"),
        ("WEEKLY", "Haftalık"),
        ("MONTHLY", "Aylık"),
        ("QTR", "3 Aylık"),
        ("YEARLY", "Yıllık"),
    )
    equipment = models.ForeignKey(Equipment, on_delete=models.CASCADE)
    name = models.CharField(max_length=200)
    is_mandatory = models.BooleanField(default=True)
    frequency = models.CharField(max_length=10, choices=FREQ, default="MONTHLY")

    def __str__(self):
        return f"{self.equipment.code} - {self.name}"


class MaintenanceOrder(models.Model):
    TYPE_CHOICES = (("PLN", "Planlı"), ("PRD", "Kestirimci"), ("BRK", "Arızi"))
    STATUS_CHOICES = (("SCHEDULED", "Planlandı"), ("COMPLETED", "Tamamlandı"), ("OVERDUE", "Gecikmiş"))

    equipment = models.ForeignKey(Equipment, on_delete=models.CASCADE)
    order_type = models.CharField(max_length=3, choices=TYPE_CHOICES, default="PLN")
    title = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    technician = models.CharField(max_length=120, blank=True)

    start_date = models.DateField(null=True, blank=True)
    due_date = models.DateField(null=True, blank=True)
    completed_at = models.DateTimeField(null=True, blank=True)
    status = models.CharField(max_length=12, choices=STATUS_CHOICES, default="SCHEDULED")

    duration_hours = models.DecimalField(max_digits=8, decimal_places=2, default=0)
    cost_total = models.DecimalField(max_digits=12, decimal_places=2, default=0)

    class Meta:
        ordering = ["-due_date", "-id"]

    def __str__(self):
        return f"{self.title} ({self.get_order_type_display()})"
# <<< BLOK SONU: ID:PY-MOD-VE0WTPKT
### DOSYA BİTİŞ: models.py

### DOSYA BAŞLANGIÇ: .\\core\urls.py
# -*- coding: utf-8 -*-
from django.urls import path
from urllib.parse import urlsplit, urlunsplit, parse_qsl, urlencode
from django.http import HttpResponseRedirect

from maintenance.models import Equipment
from maintenance.admin import admin_site

BLOCK_KEYS = ("_changelist_filters", "preserved_filters", "p")
CANONICAL_PATH = "/admin/maintenance/equipment/"
DIRECT_PATH    = "/admin/maintenance/equipment/_direct/"

def _sanitize_qs_str(qs_str: str) -> str:
    return urlencode([(k, v) for (k, v) in parse_qsl(qs_str, keep_blank_values=True)
                      if k not in BLOCK_KEYS])

def _get_location(resp):
    # Django sürümünden bağımsız güvenli Location okuma
    try:
        if hasattr(resp, "has_header") and resp.has_header("Location"):
            return resp["Location"]
        # Django 3.2+ headers dict
        if hasattr(resp, "headers"):
            return resp.headers.get("Location")
    except Exception:
        pass
    return None

def equipment_list_direct(request, *args, **kwargs):
    ma = admin_site._registry[Equipment]
    view = admin_site.admin_view(ma.changelist_view)
    q = request.GET.copy()
    for k in ("_changelist_filters", "preserved_filters", "p"):
        q.pop(k, None)
    request.GET = q
    request.META["QUERY_STRING"] = q.urlencode()
    return view(request, *args, **kwargs)

def equipment_list_canonical_redirect(request, *args, **kwargs):
    # Gelen query'i temizle, _direct'e tek atımlık 302 ile gönder
    BLOCK_KEYS = ("_changelist_filters", "preserved_filters", "p")
    try:
        raw_q = request.META.get("QUERY_STRING","")
    except Exception:
        raw_q = ""
    qs = urlencode([(k, v) for (k, v) in parse_qsl(raw_q, keep_blank_values=True) if k not in BLOCK_KEYS])
    return HttpResponseRedirect(urlunsplit(("", "", "/admin/maintenance/equipment/_direct/", qs, "")))
def equipment_canon_redirect(request, *args, **kwargs):
    qs = request.META.get("QUERY_STRING","")
    qs = ("?" + qs) if qs else ""
    return HttpResponseRedirect("/admin/maintenance/equipment/_direct/" + qs)
urlpatterns = [ path("admin/maintenance/equipment/", equipment_canon_redirect),
    path("admin/maintenance/equipment/",         equipment_list_canonical_redirect, name="equipment_list"),
    path("admin/maintenance/equipment/_direct/", equipment_list_direct, name="equipment_list_direct"),
    path("admin/", admin_site.urls),
]

def equipment_list_canonical_redirect(request, *args, **kwargs):
    # Gelen query'i temizle, _direct'e tek atımlık 302 ile gönder
    BLOCK_KEYS = ("_changelist_filters", "preserved_filters", "p")
    try:
        raw_q = request.META.get("QUERY_STRING","")
    except Exception:
        raw_q = ""
    qs = urlencode([(k, v) for (k, v) in parse_qsl(raw_q, keep_blank_values=True) if k not in BLOCK_KEYS])
    return HttpResponseRedirect(urlunsplit(("", "", "/admin/maintenance/equipment/_direct/", qs, "")))
def equipment_canon_redirect(request, *args, **kwargs):
    qs = request.META.get("QUERY_STRING","")
    qs = ("?" + qs) if qs else ""
    return HttpResponseRedirect("/admin/maintenance/equipment/_direct/" + qs)
urlpatterns = [ path("admin/maintenance/equipment/", equipment_canon_redirect),
    path("admin/maintenance/equipment/",         equipment_list_canonical_redirect, name="equipment_list"),
    path("admin/maintenance/equipment/_direct/", equipment_list_direct, name="equipment_list_direct"),
    path("admin/", admin_site.urls),
]




### DOSYA BİTİŞ: urls.py

### DOSYA BAŞLANGIÇ: .\\tools\link_smoke.py
# -*- coding: utf-8 -*-
import sys, json, argparse
from urllib.parse import urljoin, urlsplit, urlunsplit
from html.parser import HTMLParser
from collections import deque
from playwright.sync_api import sync_playwright

class AnchorParser(HTMLParser):
    def __init__(self): 
        super().__init__(); self.links=[]
    def handle_starttag(self, tag, attrs):
        if tag != "a": return
        href = None
        for k,v in attrs:
            if k == "href": href=v; break
        if href: self.links.append(href)

def normalize(current, href):
    if not href: return None
    h = href.strip()
    if not h or h[0] == "#" or h.startswith(("mailto:","tel:","javascript:")):
        return None
    url = urljoin(current, h)
    u = urlsplit(url)
    # fragment'i at
    return urlunsplit((u.scheme, u.netloc, u.path, u.query, ""))

def in_scope(url, origin, path_prefix):
    u = urlsplit(url)
    if f"{u.scheme}://{u.netloc}" != origin: return False
    if path_prefix and not u.path.startswith(path_prefix): return False
    return True

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--base", required=True)               # http://127.0.0.1:8010
    ap.add_argument("--start", required=True)              # /admin/...
    ap.add_argument("--out", required=True)
    ap.add_argument("--depth", type=int, default=1)
    ap.add_argument("--limit", type=int, default=200)
    ap.add_argument("--path-prefix", default=None)
    ap.add_argument("--login-path", default="/admin/login/")
    ap.add_argument("--username", default=None)
    ap.add_argument("--password", default=None)
    ap.add_argument("--timeout", type=int, default=20000)
    args = ap.parse_args()

    base = args.base.rstrip("/")
    start_url = urljoin(base + "/", args.start)
    base_u = urlsplit(base)
    origin = f"{base_u.scheme}://{base_u.netloc}"

    # path prefix => verilmemişse start URL'in klasörü
    if args.path_prefix:
        path_prefix = args.path_prefix
    else:
        su = urlsplit(start_url)
        pp = su.path
        if not pp.endswith("/"): pp = pp.rsplit("/",1)[0] + "/"
        path_prefix = pp

    results = { "ok": True, "start": start_url, "depth": args.depth,
                "limit": args.limit, "path_prefix": path_prefix, "checked": [] }
    seen, q = set(), deque()
    q.append((start_url,0)); seen.add(start_url)

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        context = browser.new_context(base_url=base)
        page = context.new_page()
        page.set_default_timeout(args.timeout)
        page.set_default_navigation_timeout(args.timeout)

        # Admin login (varsa)
        if args.username and args.password and args.login_path:
            try:
                page.goto(args.login_path)
                page.fill("input#id_username", args.username)
                page.fill("input#id_password", args.password)
                page.click("input[type=submit]")
                page.wait_for_selector("#user-tools a[href$='/logout/']", timeout=args.timeout)
            except Exception:
                # login başarısız olsa da devam edip public linkleri tarayabiliriz
                pass

        rq = context.request
        count = 0
        while q and count < args.limit:
            url, d = q.popleft()
            status, text = 0, ""
            try:
                resp = rq.get(url)
                status = resp.status
                ctype = resp.headers.get("content-type","")
                if "text/html" in ctype:
                    text = resp.text()
            except Exception:
                pass

            results["checked"].append({"url": url, "status": status})
            if status >= 400 or status == 0:
                results["ok"] = False

            count += 1
            if d < args.depth and text:
                parser = AnchorParser()
                try: parser.feed(text)
                except Exception: pass
                for href in parser.links:
                    nu = normalize(url, href)
                    if not nu: continue
                    if not in_scope(nu, origin, path_prefix): continue
                    if nu not in seen:
                        seen.add(nu); q.append((nu, d+1))

        context.close(); browser.close()

    with open(args.out, "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)

    bad = [x for x in results["checked"] if x["status"] >= 400 or x["status"] == 0]
    print(f"[link-smoke] checked={len(results['checked'])} bad={len(bad)} scope_prefix={path_prefix}")
    if bad:
        for b in bad[:10]:
            print(f"  {b['status']:>3} {b['url']}")
    sys.exit(0 if results["ok"] else 2)

if __name__ == "__main__":
    main()
### DOSYA BİTİŞ: link_smoke.py

### DOSYA BAŞLANGIÇ: .\\tools\pipeline_and_next.ps1
param(
  [string]$BindHost = "127.0.0.1",
  [int]$Port = 8010,
  [switch]$SkipFlows,
  [switch]$NonBlocking,
  [switch]$DryRun
)

$ErrorActionPreference = "Stop"

# --- Yol / klasörler ---
$repoRoot = Split-Path $PSCommandPath -Parent | Split-Path -Parent
$outDir   = Join-Path $repoRoot "_otokodlama\out"
$logFile  = Join-Path $repoRoot "_otokodlama\pipeline_last.log"
New-Item -ItemType Directory -Force -Path $outDir | Out-Null

# --- Yardımcılar ---
function Start-DjangoServer {
  param([string]$BindAddr, [int]$BindPort)   # $Host çakışması yok
  $args = @("manage.py","runserver","$BindAddr`:$BindPort","--settings=core.settings_maintenance","--noreload")
  $p = Start-Process -FilePath "python" -ArgumentList $args -PassThru -WorkingDirectory $repoRoot -WindowStyle Hidden
  return $p
}

function Wait-ServerUp {
  param([string]$Url, [int]$TimeoutSec = 90)
  $deadline = (Get-Date).AddSeconds($TimeoutSec)
  while((Get-Date) -lt $deadline){
    try {
      $r = Invoke-WebRequest -Uri $Url -UseBasicParsing -TimeoutSec 5
      if ($r.StatusCode -ge 200 -and $r.StatusCode -lt 500){ return $true }
    } catch { Start-Sleep -Milliseconds 500 }
  }
  return $false
}

function Stop-ProcessSafe {
  param([int]$ProcId)   # $PID çakışması yok
  try { if ($ProcId) { Stop-Process -Id $ProcId -Force -ErrorAction Stop } } catch {}
}

# --- Sunucu başlat ---
$server = Start-DjangoServer -BindAddr $BindHost -BindPort $Port
"[$(Get-Date -Format HH:mm:ss)] DEV server PID=$($server.Id)" | Tee-Object -FilePath $logFile -Append | Out-Null
Start-Sleep -Seconds 2

$baseUrl = "http://$BindHost`:$Port"

# *** KRİTİK: Playwright için BASE_URL ve Django settings ***
$env:BASE_URL = $baseUrl
$env:DJANGO_SETTINGS_MODULE = "core.settings_maintenance"
$env:PYTHONUNBUFFERED = "1"

if (-not (Wait-ServerUp -Url "$baseUrl/admin/login/" -TimeoutSec 90)) {
  Write-Warning "[SERVER] Ayağa kalkmadı ama NonBlocking mod akışı deneyecek."
}

# --- Flows çalıştır ---
$runFlows = Join-Path $repoRoot "tools\run_flows.ps1"
$flows_ok = $true
$flows_rc = $null
if (-not $SkipFlows -and (Test-Path $runFlows)) {
  if ($NonBlocking) {
    & powershell -NoProfile -ExecutionPolicy Bypass -File $runFlows -Soft
  } else {
    & powershell -NoProfile -ExecutionPolicy Bypass -File $runFlows -FailFast
  }
  $flows_rc = $LASTEXITCODE
  $flows_ok = ($NonBlocking) -or ($flows_rc -eq 0)
}

# --- Görsel gate (varsa) ---
$visual_ok = $true
$vg = Join-Path $repoRoot "tools\visual_gate.ps1"
if (Test-Path $vg) {
  & powershell -NoProfile -ExecutionPolicy Bypass -File $vg
  $visual_ok = ($LASTEXITCODE -eq 0)
}

# --- Layout acceptance (THROW YOK; asla patlatma) ---
$layout_json = Join-Path $outDir "layout_report.json"
$sim = 1.0
$layout_ok = $true
if (Test-Path $layout_json) {
  try {
    $lj = Get-Content $layout_json -Raw | ConvertFrom-Json
    if ($lj.similarity -ne $null) { $sim = [double]$lj.similarity }
    $layout_ok = $true
  } catch {
    Write-Warning "[NEXT] layout_report.json okunamadı; layout gate devre dışı."
    $sim = 1.0; $layout_ok = $true
  }
} else {
  Write-Warning "[NEXT] layout_report.json yok; layout gate devre dışı."
  $sim = 1.0; $layout_ok = $true
}

# --- NEXT kararı ---
if ($layout_ok -and $flows_ok -and $visual_ok) {
  Write-Host "[ACCEPT] mode=guided similarity=$sim target=target.png"
  Write-Host "[NEXT] OK (layout AND flows)."
  # ops/next_ok_runcard.txt çalıştır
  $card = Join-Path $repoRoot "ops\next_ok_runcard.txt"
  if (Test-Path $card) {
    if ($DryRun) {
      Write-Host "[DRY] tools\apply_runcard.ps1 -Card $card -NoConfirm"
    } else {
      $apply = Join-Path $repoRoot "tools\apply_runcard.ps1"
      if (Test-Path $apply) {
        & powershell -NoProfile -ExecutionPolicy Bypass -File $apply -Card $card -NoConfirm
      }
    }
  }
} else {
  Write-Warning "[NEXT] NOT satisfied. layout_ok=$layout_ok flows_ok=$flows_ok visual_ok=$visual_ok (sim=$sim)"
}

# --- Sunucuyu kapat ---
if ($server -and $server.Id) { Stop-ProcessSafe -ProcId $server.Id }

# Ortamı kirletmeyelim (isteğe bağlı)
Remove-Item Env:BASE_URL -ErrorAction SilentlyContinue
Remove-Item Env:DJANGO_SETTINGS_MODULE -ErrorAction SilentlyContinue
Remove-Item Env:PYTHONUNBUFFERED -ErrorAction SilentlyContinue

exit 0
### DOSYA BİTİŞ: pipeline_and_next.ps1

### DOSYA BAŞLANGIÇ: .\\tools\accept_visual.ps1
# tools/accept_visual.ps1
# Görsel kabul (baseline güncelleme) otomasyonu
param()

$ErrorActionPreference = "Stop"
$RepoRoot = Split-Path -Parent $MyInvocation.MyCommand.Path | Split-Path

# 1) config oku
$cfgPath = Join-Path $RepoRoot "pipeline.config.json"
$cfg = Get-Content $cfgPath -Raw | ConvertFrom-Json
$mode = $cfg.acceptance.mode
$auto = $cfg.acceptance.auto_accept_if

# 2) layout_report.json nerede? (root veya _otokodlama/out altında)
$report = $null
$try1 = Join-Path $RepoRoot "layout_report.json"
if (Test-Path $try1) { $report = $try1 } else {
  $outDir = Join-Path $RepoRoot "_otokodlama\out"
  if (Test-Path $outDir) {
    $last = Get-ChildItem $outDir -Directory | Sort-Object LastWriteTime -Descending | Select-Object -First 1
    if ($last) {
      $try2 = Join-Path $last.FullName "layout_report.json"
      if (Test-Path $try2) { $report = $try2 }
    }
  }
}
if (-not $report) { Write-Host "[ACCEPT] layout_report.json bulunamadı." ; exit 0 }

$j = Get-Content $report -Raw | ConvertFrom-Json
$sim = [double]$j.similarity
$latest = Resolve-Path (Join-Path $RepoRoot $j.latest_screenshot)
$target = Resolve-Path (Join-Path $RepoRoot $j.target)

Write-Host "[ACCEPT] mode=$mode similarity=$sim target=$(Split-Path $target -Leaf)"

function Accept-Baseline {
  Copy-Item $latest $target -Force
  Write-Host "[ACCEPT] Baseline güncellendi -> $($target)"
}

switch ($mode) {
  "locked"  { Write-Host "[ACCEPT] locked modunda otomatik kabul yapılmaz." ; exit 0 }
  "rolling" { Accept-Baseline ; exit 0 }
  "guided"  {
    if ($sim -ge $auto) { Accept-Baseline ; exit 0 }
    else { Write-Host "[ACCEPT] guided: otomatik kabul eşiği tutmadı (>= $auto gerekli)." ; exit 0 }
  }
  default   { Write-Host "[ACCEPT] Bilinmeyen mode: $mode" ; exit 0 }
}
### DOSYA BİTİŞ: accept_visual.ps1

### DOSYA BAŞLANGIÇ: .\\tools\apply_runcard.ps1
param(
  [Parameter(Mandatory=$true)]
  [string]$Card,
  [switch]$NoConfirm
)
$ErrorActionPreference="Stop"

if (!(Test-Path $Card)) { throw "Runcard not found: $Card" }
$lines = Get-Content $Card

foreach ($raw in $lines) {
  $line = $raw.Trim()
  if ($line -eq '' -or $line.StartsWith('#')) { continue }

  if ($line -match '^\s*ps>\s*(.+)$') {
    $cmd = $Matches[1]
    Write-Host ">> $cmd"
    Invoke-Expression $cmd
    if ($LASTEXITCODE -ne $null -and $LASTEXITCODE -ne 0) {
      throw "Command failed (exit $LASTEXITCODE): $cmd"
    }
  } else {
    Write-Host "[SKIP] $line"
  }
}
Write-Host "[RUNCARD] done."
### DOSYA BİTİŞ: apply_runcard.ps1

### DOSYA BAŞLANGIÇ: .\\tools\apply_codepack.ps1
param(
  [Parameter(Mandatory=$true)]
  [string]$Pack
)
$ErrorActionPreference="Stop"

if (!(Test-Path $Pack)) { throw "Pack not found: $Pack" }
$content = Get-Content $Pack -Raw

$regex = [regex]'(?ms)^\s*###>\s*(?<path>.+?)\r?\n(?<body>.*?)(?:\r?\n)?###<'
$matches = $regex.Matches($content)
if ($matches.Count -eq 0) { throw "No blocks found. Use ###> <path> ... ###< delimiters." }

$root = Get-Location
$written = @()
foreach ($m in $matches) {
  $rel = $m.Groups['path'].Value.Trim()
  $body = $m.Groups['body'].Value
  $dest = Join-Path $root $rel
  $dir  = Split-Path $dest -Parent
  if ($dir -and !(Test-Path $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }
  [IO.File]::WriteAllText($dest, $body, [Text.UTF8Encoding]::new($false))
  $written += $rel
  Write-Host "[WRITE] $rel"
}
"[OK] Wrote $($written.Count) file(s)."
### DOSYA BİTİŞ: apply_codepack.ps1

### DOSYA BAŞLANGIÇ: .\\tools\img_hash_compare.ps1
param(
  [Parameter(Mandatory=$true)][string]$A,
  [Parameter(Mandatory=$true)][string]$B
)
Add-Type -AssemblyName System.Drawing

function Get-ImageHash([string]$path) {
  if (!(Test-Path $path)) { throw "Image not found: $path" }
  $bmp = New-Object System.Drawing.Bitmap (Get-Item $path).FullName
  try {
    $thumb = New-Object System.Drawing.Bitmap 8,8
    $g = [System.Drawing.Graphics]::FromImage($thumb)
    $g.InterpolationMode = "HighQualityBicubic"
    $g.DrawImage($bmp, 0,0, 8,8)
    $g.Dispose()
    $vals = New-Object 'System.Collections.Generic.List[double]'
    for ($y=0;$y -lt 8;$y++) { for ($x=0;$x -lt 8;$x++) {
      $c = $thumb.GetPixel($x,$y)
      $vals.Add(0.299*$c.R + 0.587*$c.G + 0.114*$c.B)
    } }
    $avg = ($vals | Measure-Object -Average).Average
    $bits = New-Object 'System.Collections.Generic.List[int]'
    foreach ($v in $vals) { $bits.Add( [int]([double]$v - $avg -ge 0) ) }
    return ($bits -join '')
  } finally {
    $bmp.Dispose(); $thumb.Dispose()
  }
}

$h1 = Get-ImageHash $A
$h2 = Get-ImageHash $B
$dist = 0; for ($i=0;$i -lt 64;$i++) { if ($h1[$i] -ne $h2[$i]) { $dist++ } }
$sim = 1.0 - ($dist / 64.0)

$result = @{ a=$A; b=$B; similarity=[Math]::Round($sim,4) } | ConvertTo-Json -Compress
$result
if ($sim -ge 0.90) { exit 0 } else { exit 2 }
### DOSYA BİTİŞ: img_hash_compare.ps1

### DOSYA BAŞLANGIÇ: .\\tools\playwright_tests.py
# REV: 1.0 | 2025-09-25 | Hash: bfa8286c | ParÃ§a: 1/1
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# REV: 1.1 | tools/playwright_tests.py (BOM-safe)

import sys, json, argparse
from pathlib import Path

def load_config(repo_root: Path):
    cfg_path = repo_root / "pipeline.config.json"
    cfg = json.loads(cfg_path.read_text(encoding="utf-8-sig"))
    return cfg

def normalize_urls(lines, base_url: str):
    out = []
    for raw in lines:
        u = raw.strip().lstrip("\ufeff")  # satÄ±r baÅŸÄ±ndaki BOM'u sÃ¼pÃ¼r
        if not u or u.startswith("#"):
            continue
        if u.startswith("/"):
            u = base_url.rstrip("/") + u
        out.append(u)
    return out

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--urls", required=True, help="URL listesi dosyasÄ±")
    ap.add_argument("--out", required=True, help="JSON rapor ('.json' ile biter)")
    args = ap.parse_args()

    repo_root = Path(__file__).resolve().parents[1]
    cfg = load_config(repo_root)
    pwcfg = cfg.get("playwright", {})
    base_url = pwcfg.get("base_url", "http://127.0.0.1:8000")
    headless = pwcfg.get("headless", True)
    viewport = pwcfg.get("viewport", {"width": 1280, "height": 800})
    timeout_ms = 15000  # 15s

    # KRÄ°TÄ°K: URL dosyasÄ±nda gizli BOM olursa otomatik temizle
    lines = Path(args.urls).read_text(encoding="utf-8-sig").splitlines()
    urls = normalize_urls(lines, base_url)

    from playwright.sync_api import sync_playwright

    results = []
    fail = 0
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=headless)
        context = browser.new_context(viewport=viewport)
        for url in urls:
            page = context.new_page()
            console_errors = []
            page.on("console", lambda m: console_errors.append(m.text) if m.type == "error" else None)
            status = None; ok = False; err = None; title = None
            try:
                resp = page.goto(url, wait_until="domcontentloaded", timeout=timeout_ms)
                status = resp.status if resp else None
                title = page.title()
                ok = (status is not None and status < 400)
            except Exception as e:
                err = str(e)
                ok = False
            results.append({
                "url": url,
                "status": status,
                "title": title,
                "console_errors": console_errors[:10],
                "ok": bool(ok),
                "error": err
            })
            if not ok:
                fail += 1
            page.close()
        context.close()
        browser.close()

    out_path = Path(args.out)
    out_path.parent.mkdir(parents=True, exist_ok=True)
    if out_path.suffix.lower() != ".json":
        out_path = out_path.with_suffix(".json")
    report = {"total": len(urls), "fail": fail, "results": results}
    out_path.write_text(json.dumps(report, ensure_ascii=False, indent=2), encoding="utf-8")

    if fail == 0:
        print(f"[PLAYWRIGHT] PASSED - total={len(urls)} fail=0")
        sys.exit(0)
    else:
        print(f"[PLAYWRIGHT] FAILED - total={len(urls)} fail={fail}")
        for r in results:
            if not r["ok"]:
                print(f"  FAIL {r['url']} status={r['status']} error={r['error']}")
        sys.exit(1)

if __name__ == "__main__":
    main()





### DOSYA BİTİŞ: playwright_tests.py

### DOSYA BAŞLANGIÇ: .\\tools\_ast_check.py
import ast, sys
p = r"tools/pw_flow.py"
with open(p, "r", encoding="utf-8") as f:
    src = f.read()
try:
    ast.parse(src)
except SyntaxError as e:
    print("PY-SYNTAX-ERROR", e.lineno, e.msg)
    lines = src.splitlines()
    s = max(0, e.lineno-5); e2 = min(len(lines), e.lineno+5)
    for i in range(s, e2):
        print(f"{i+1:4} | {lines[i]}")
    sys.exit(1)
else:
    print("PY-SYNTAX-OK")
### DOSYA BİTİŞ: _ast_check.py

### DOSYA BAŞLANGIÇ: .\\tools\run_flows.ps1
param(
  [switch],
  [switch]
)
\Continue = "Stop"

\ = Get-Location
\ = Join-Path \ "_otokodlama\out"
New-Item -ItemType Directory -Force -Path \ | Out-Null

# BASE_URL garanti olsun
if (-not \http://127.0.0.1:8010 -or [string]::IsNullOrWhiteSpace(\http://127.0.0.1:8010)) {
  \http://127.0.0.1:8010 = "http://127.0.0.1:8010"
}

# Koşturulacak flow listesi (klasörde varsa)
\ = @(
  "ops\flows\admin_home.flow",
  "ops\flows\admin_plan.flow",
  "ops\flows\admin_calibrations.flow",
  "ops\flows\admin_checklists.flow",
  "ops\flows\admin_equipment.flow",
  # Genel validatorlar:
  "ops\flows\admin_order_add_validate.flow",
  "ops\flows\admin_app_index_validate.flow"
) | Where-Object { Test-Path \ }

\ = @()
\ = \False

foreach (\# Admin > Equipment (click path; tolerate error pages)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
WAIT SELECTOR a[href="/admin/maintenance/equipment/"]
CLICK a[href="/admin/maintenance/equipment/"]
WAIT SELECTOR body
SCREENSHOT targets/screens/admin-equipment.png in \) {
  \ = [IO.Path]::GetFileName(\# Admin > Equipment (click path; tolerate error pages)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
WAIT SELECTOR a[href="/admin/maintenance/equipment/"]
CLICK a[href="/admin/maintenance/equipment/"]
WAIT SELECTOR body
SCREENSHOT targets/screens/admin-equipment.png)
  \ = [IO.Path]::GetFileNameWithoutExtension(\# Admin > Equipment (click path; tolerate error pages)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
WAIT SELECTOR a[href="/admin/maintenance/equipment/"]
CLICK a[href="/admin/maintenance/equipment/"]
WAIT SELECTOR body
SCREENSHOT targets/screens/admin-equipment.png)
  \ = Join-Path \ (\ + ".json")

  Write-Host "[FLOW] \# Admin > Equipment (click path; tolerate error pages)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
WAIT SELECTOR a[href="/admin/maintenance/equipment/"]
CLICK a[href="/admin/maintenance/equipment/"]
WAIT SELECTOR body
SCREENSHOT targets/screens/admin-equipment.png"
  & python tools\pw_flow.py --steps \# Admin > Equipment (click path; tolerate error pages)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
WAIT SELECTOR a[href="/admin/maintenance/equipment/"]
CLICK a[href="/admin/maintenance/equipment/"]
WAIT SELECTOR body
SCREENSHOT targets/screens/admin-equipment.png --out \
  \ = \1

  \ = \False
  \ = \
  if (Test-Path \) {
    try {
      \ = Get-Content \ -Raw | ConvertFrom-Json
      \ = [bool]\.ok
      if (-not \ -and \.results) {
        \ = (\.results | Where-Object { -not \.ok } | Select-Object -First 1)
      }
    } catch {
      \ = \False
      \ = @{ cmd="PARSE_JSON"; arg=\; url=""; error=\.Exception.Message }
    }
  } else {
    \ = \False
    \ = @{ cmd="NO_JSON"; arg=\; url=""; error="json üretilmedi (rc=\)" }
  }

  if (\) {
    Write-Host "[FLOW] PASSED: \"
  } else {
    Write-Warning "[FLOW] FAILED: \"
    \ = \True
    if (\ -and -not \) { break }
  }

  \ += [pscustomobject]@{
    name = \
    flow = \
    ok   = \
    out  = ".\_otokodlama\out\.json"
    first_error = \
  }
}

# flows_report.json: { "flows": [...] }
@{ flows = \ } | ConvertTo-Json -Depth 6 | Set-Content (Join-Path \ "flows_report.json") -Encoding utf8

if (\) {
  exit 0
} else {
  if (\) { exit 1 } else { exit 0 }
}
### DOSYA BİTİŞ: run_flows.ps1

### DOSYA BAŞLANGIÇ: .\\tools\run_pipeline_venv.ps1
# REV: 1.0 | 2025-09-25 | Hash: a1f2c3d4 | Parça: 1/1
param()
$ErrorActionPreference = "Stop"
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$RepoRoot  = Resolve-Path (Join-Path $ScriptDir "..")
$VenvPy    = Join-Path $RepoRoot "venv\Scripts\python.exe"
if (!(Test-Path $VenvPy)) { throw "Venv bulunamadı: $VenvPy" }
$env:PATH                   = (Join-Path $RepoRoot "venv\Scripts") + ";" + $env:PATH
$env:PYTHONPATH             = $RepoRoot
$env:DJANGO_SETTINGS_MODULE = "core.settings"
& $VenvPy -c "import importlib.util,sys; sys.exit(0 if importlib.util.find_spec('playwright') else 1)"
if ($LASTEXITCODE -ne 0) {
  Write-Host "==> Playwright kuruluyor..."
  & $VenvPy -m pip install --disable-pip-version-check -q playwright
  if ($LASTEXITCODE -ne 0) { throw "pip install playwright başarısız." }
  & $VenvPy -m playwright install chromium
  if ($LASTEXITCODE -ne 0) { throw "playwright install chromium başarısız." }
}
Write-Host "==> pipeline.ps1 çalışıyor..."
. (Join-Path $RepoRoot "pipeline.ps1")
### DOSYA BİTİŞ: run_pipeline_venv.ps1

### DOSYA BAŞLANGIÇ: .\\tools\visual_gate.ps1
param([string]$State="ops\state.json")
$ErrorActionPreference="Stop"

# Repo kökü: tools klasörünün bir üstü
$repoRoot = Split-Path $PSScriptRoot -Parent

# state.json mutlak değilse repo köküne göre çöz
if ([IO.Path]::IsPathRooted($State)) { $statePath = $State } else { $statePath = Join-Path $repoRoot $State }

$outD  = Join-Path $repoRoot "_otokodlama\out"
New-Item -ItemType Directory -Force -Path $outD | Out-Null

$report = @{ ok=$true; items=@(); state=$statePath }

if (!(Test-Path $statePath)) {
  Write-Host "[VISUAL] no state.json, skipping -> $statePath"
  $report | ConvertTo-Json -Depth 5 | Set-Content "$outD\visual_report.json"
  exit 0
}

$state = Get-Content $statePath -Raw | ConvertFrom-Json
$steps = @($state.steps)

if ($null -eq $steps -or $steps.Count -eq 0) {
  Write-Host "[VISUAL] no steps in state.json"
  $report | ConvertTo-Json -Depth 5 | Set-Content "$outD\visual_report.json"
  exit 0
}

function Resolve-Rel([string]$p) {
  if ([string]::IsNullOrWhiteSpace($p)) { return $null }
  if ([IO.Path]::IsPathRooted($p)) { return $p }
  return (Join-Path $repoRoot $p)
}

$allOk = $true
foreach ($s in $steps) {
  $id  = $s.id
  $url = $s.url
  $vis = $s.visual

  $hasVis = ($null -ne $vis) -and ($vis.PSObject.Properties.Count -gt 0)
  if (-not $hasVis) {
    $report.items += @{ id=$id; url=$url; ok=$true; note="no visual config (skipped)" }
    continue
  }

  $base = Resolve-Rel $vis.baseline
  $curr = Resolve-Rel $vis.actual
  $thr  = 0.90
  if ($vis.threshold) { $thr = [double]$vis.threshold }

  if ([string]::IsNullOrWhiteSpace($base) -or [string]::IsNullOrWhiteSpace($curr)) {
    $report.items += @{ id=$id; url=$url; ok=$false; error="visual.baseline/actual missing" }
    $allOk = $false
    continue
  }
  if (!(Test-Path $base)) {
    $report.items += @{ id=$id; url=$url; ok=$false; error="baseline not found: $base" }
    $allOk = $false
    continue
  }
  if (!(Test-Path $curr)) {
    $report.items += @{ id=$id; url=$url; ok=$false; error="actual not found: $curr" }
    $allOk = $false
    continue
  }

  $json = & powershell -NoProfile -ExecutionPolicy Bypass -File (Join-Path $PSScriptRoot "img_hash_compare.ps1") -A $base -B $curr
  $obj  = $json | ConvertFrom-Json
  $ok   = ([double]$obj.similarity -ge $thr)
  if (-not $ok) { $allOk = $false }

  $report.items += @{
    id=$id; url=$url; ok=$ok; similarity=$obj.similarity; threshold=$thr;
    baseline=$base; actual=$curr
  }
}

$report.ok = $allOk
$report | ConvertTo-Json -Depth 5 | Set-Content "$outD\visual_report.json"
if ($allOk) { Write-Host "[VISUAL] ALL PASSED"; exit 0 } else { Write-Warning "[VISUAL] SOME FAILED"; exit 1 }
### DOSYA BİTİŞ: visual_gate.ps1

### DOSYA BAŞLANGIÇ: .\\tools\pw_flow.py
# -*- coding: utf-8 -*-
import os, sys, json, time, re, pathlib, io, math, unicodedata, csv, datetime, hashlib
from typing import Tuple, Dict
from contextlib import contextmanager

from PIL import Image
from playwright.sync_api import sync_playwright, TimeoutError as PWTimeout, Error as PWError

BASE_URL = os.environ.get("BASE_URL", "http://127.0.0.1:8010").rstrip("/")

# --- OCR (opsiyonel) ---
try:
    import pytesseract
    _tcmd = os.environ.get("TESSERACT_CMD")
    if _tcmd and os.path.exists(_tcmd):
        pytesseract.pytesseract.tesseract_cmd = _tcmd
    elif os.name == "nt":
        _cand = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
        if os.path.exists(_cand):
            pytesseract.pytesseract.tesseract_cmd = _cand
except Exception:
    pytesseract = None

def _abs_path(p: str) -> str:
    p = p.replace("\\", "/")
    full = (pathlib.Path.cwd() / p).resolve()
    full.parent.mkdir(parents=True, exist_ok=True)
    return str(full)

def _resolve_url(arg: str) -> str:
    if arg.startswith(("http://","https://")): return arg
    if not arg.startswith("/"): arg = "/" + arg
    return BASE_URL + arg

def _parse_line(line: str):
    line = line.strip()
    if not line or line.startswith("#"): return ("COMMENT", line)
    sp = line.split(None, 1)
    return (sp[0].upper(), sp[1] if len(sp)>1 else "")

def _parse_kv(s: str) -> Dict[str,str]:
    out = {}
    for part in s.strip().split():
        if "=" in part:
            k,v = part.split("=",1); out[k.strip()] = v.strip()
    return out

def _nowstamp(): return datetime.datetime.now().strftime("%Y%m%d-%H%M%S")

def _norm_text(s: str) -> str:
    s = s.replace("Ä°","i").replace("I","Ä±").lower()
    s = unicodedata.normalize("NFKD", s)
    s = "".join(ch for ch in s if not unicodedata.combining(ch))
    s = re.sub(r"[^a-z0-9ÄŸÃ¼ÅŸÃ¶Ã§Ä±\-\_/]+", " ", s)
    s = re.sub(r"\s+", " ", s).strip()
    return s

def _tokenize_for_compare(text: str, min_len=3, ignore_numbers=True, ignore_patterns=None):
    txt = _norm_text(text)
    toks = [t for t in re.split(r"\s+", txt) if t]
    out = []
    regs = []
    if ignore_patterns:
        for pat in ignore_patterns:
            try: regs.append(re.compile(pat, re.I))
            except Exception: pass
    for t in toks:
        if len(t) < min_len: continue
        if ignore_numbers and t.isdigit(): continue
        if any(r.search(t) for r in regs): continue
        out.append(t)
    return out

def _ocr_text(img_path: str, lang="tur+eng") -> str:
    if not pytesseract: return ""
    try:
        with Image.open(img_path) as im:
            return pytesseract.image_to_string(im, lang=lang) or ""
    except Exception:
        return ""

def _page_screenshot(page, out_path: str) -> str:
    path = _abs_path(out_path)
    page.screenshot(path=path, full_page=False)
    return path

def _write_alert(key: str, ok: bool, recall: float, misses: list, paths: dict, alert_dir: str, reasons: list) -> str:
    adir = pathlib.Path(_abs_path(alert_dir)); adir.mkdir(parents=True, exist_ok=True)
    ts = _nowstamp()
    md_path = adir / f"{key}-{ts}.md"
    with open(md_path, "w", encoding="utf-8") as f:
        f.write(f"# AUTOVALIDATE: {key}\n\n- Zaman: {ts}\n- SonuÃ§: {'OK' if ok else 'FAIL'}\n- Recall: {recall:.3f}\n")
        if reasons: f.write(f"- Neden: {', '.join(reasons)}\n")
        f.write("\n## Eksik Kelimeler\n")
        if misses:
            for w in sorted(misses)[:200]: f.write(f"- {w}\n")
        else:
            f.write("- (yok)\n")
        f.write("\n## Dosyalar\n")
        for k,v in paths.items(): f.write(f"- **{k}**: `{v}`\n")
    csv_path = adir / "alerts_log.csv"
    header = ["ts","key","ok","recall","misses","alert_md"]
    row = [ts, key, str(ok), f"{recall:.4f}", str(len(misses)), str(md_path)]
    write_header = not csv_path.exists()
    with open(csv_path, "a", encoding="utf-8", newline="") as cf:
        w = csv.writer(cf, delimiter=";")
        if write_header: w.writerow(header)
        w.writerow(row)
    return str(md_path)

@contextmanager
def browser_ctx(headless=True, har_path=None):
    with sync_playwright() as pw:
        browser = pw.chromium.launch(headless=headless)
        if har_path:
            context = browser.new_context(record_har_path=_abs_path(har_path), record_har_content="embed")
        else:
            context = browser.new_context()
        page = context.new_page(); page.set_default_timeout(10_000); page.set_default_navigation_timeout(10_000)
        page.on('popup', lambda p: (p.close() if not p.is_closed() else None))
        try:
            yield page, context, browser
        finally:
            try: context.close()
            except: pass
            try: browser.close()
            except: pass

def run_flow(steps: list, headless=True, har_path=None):
    results=[]; ok_all=True
    with browser_ctx(headless=headless, har_path=har_path) as (page, _ctx, _br):
        for i, raw in enumerate(steps, start=1):
            cmd, arg = _parse_line(raw)
            if cmd == "COMMENT": 
                results.append({"i": i, "cmd": cmd, "arg": arg, "ok": True, "error": "", "url": page.url if page else ""})
                continue
            step_ok=True; err=None
            # AUTOVAL outputs
            recall=1.0; ok_words=True; missing=[]; reasons=[]

            try:
                if cmd == "GOTO":
                    page.goto(_resolve_url(arg.strip()), wait_until="domcontentloaded")

                elif cmd == "WAIT":
                    a = arg.strip(); aU=a.upper()
                    if aU.startswith("SELECTOR "):
                        sel = a[len("SELECTOR "):].strip()
                        page.wait_for_selector(sel, state="visible")
                    elif aU.startswith("URL CONTAINS "):
                        needle = a[len("URL CONTAINS "):].strip()
                        deadline = time.time() + 6
                        while time.time() < deadline:
                            if needle in page.url: break
                            time.sleep(0.1)
                        else: raise PWTimeout(f'URL does not contain "{needle}"')
                    else:
                        raise PWError(f"Unsupported WAIT arg: {arg}")

                elif cmd == "FILL":
                    sp = arg.split(None, 1)
                    if len(sp) < 2: raise PWError("FILL requires 'selector text'")
                    sel, txt = sp[0], sp[1]
                    page.fill(sel, txt)

                elif cmd == "CLICK":
                    page.click(arg.strip())
                    try: page.wait_for_load_state("domcontentloaded", timeout=5_000)
                    except: pass
                    if page.url.startswith("chrome-error://"):
                        raise PWError("navigation-error")

                elif cmd == "SCREENSHOT":
                    page.screenshot(path=_abs_path(arg.strip()), full_page=False)

                elif cmd == "DUMPDOM":
                    path = _abs_path(arg.strip())
                    html = page.content()
                    pathlib.Path(path).write_text(html, encoding="utf-8")

                elif cmd == "AUTOVALIDATE":
                    kv = _parse_kv(arg)
                    key = kv.get("key","page")
                    baseline = _abs_path(kv["baseline"]) if "baseline" in kv else None
                    words_recall = float(kv.get("words_recall","0.90"))
                    live_source = kv.get("live_source","dom").lower()  # dom | ocr | dom+ocr
                    alert_dir = kv.get("alert_dir","_otokodlama/alerts")
                    min_token_len = int(kv.get("min_token_len","3"))
                    ignore_numbers = kv.get("ignore_numbers","yes").lower() == "yes"
                    ignore_patterns = [p for p in (x.strip() for x in kv.get("ignore_patterns","").split(",")) if p]

                    # 1) baseline OCR (opsiyonel)
                    baseline_text = ""
                    if baseline and os.path.exists(baseline) and "ocr" in live_source:
                        baseline_text = _ocr_text(baseline)
                    elif baseline and os.path.exists(baseline):
                        # baseline varsa ama OCR yoksa, baseline metni boÅŸ kalsÄ±n; sadece gÃ¶rsel referans gibi davranÄ±rÄ±z
                        baseline_text = ""

                    # 2) canlÄ± DOM ve/veya OCR
                    live_texts=[]
                    if "dom" in live_source:
                        try: live_texts.append(page.locator("body").inner_text())
                        except: pass

                    live_shot = f"_otokodlama/alerts/{key}-live-{_nowstamp()}.png"
                    live_shot_abs = _page_screenshot(page, live_shot)

                    if "ocr" in live_source and pytesseract:
                        live_texts.append(_ocr_text(live_shot_abs))

                    # 3) kelime recall (baselineâ†’live)
                    base_tokens = set(_tokenize_for_compare(
                        baseline_text, min_len=min_token_len, ignore_numbers=ignore_numbers, ignore_patterns=ignore_patterns
                    ))
                    live_tokens = set(_tokenize_for_compare(
                        " ".join(live_texts), min_len=min_token_len, ignore_numbers=ignore_numbers, ignore_patterns=ignore_patterns
                    ))
                    inter = base_tokens & live_tokens if base_tokens else set()
                    recall = (len(inter) / max(1, len(base_tokens))) if base_tokens else 1.0
                    ok_words = (recall >= words_recall)
                    missing = sorted(list(base_tokens - live_tokens))

                    if not ok_words:
                        reasons.append(f"words_recall<{words_recall:.2f} ({recall:.3f})")

                    ok = ok_words
                    if not ok:
                        _write_alert(key, ok, recall, missing, {"baseline": baseline or "(yok)", "live_screenshot": live_shot_abs}, alert_dir, reasons)
                        raise AssertionError("AUTOVALIDATE FAIL: " + ", ".join(reasons))

                else:
                    raise PWError(f"Unknown cmd: {cmd}")

            except (PWTimeout, PWError, AssertionError) as e:
                step_ok=False; err=f"{e.__class__.__name__}: {str(e)}"
                ok_all=False

            rec = {"i": i, "cmd": cmd, "arg": arg, "ok": step_ok, "error": err, "url": page.url if page else "about:blank"}
            if cmd == "AUTOVALIDATE":
                rec.update({"recall": float(recall), "ok_words": bool(ok_words), "missing_count": len(missing)})
            results.append(rec)
            if not step_ok: break
    return ok_all, results

def main():
    import argparse
    ap = argparse.ArgumentParser()
    ap.add_argument("--steps", required=True)
    ap.add_argument("--out", required=True)
    ap.add_argument("--headful", action="store_true")
    ap.add_argument("--har", default=None)
    args = ap.parse_args()

    with open(args.steps, "r", encoding="utf-8-sig") as f:
        text = f.read()
    steps = text.splitlines()
    ok, res = run_flow(steps, headless=(not args.headful), har_path=args.har)
    out = {"ok": ok, "results": res}
    pathlib.Path(args.out).parent.mkdir(parents=True, exist_ok=True)
    with open(args.out, "w", encoding="utf-8") as f:
        json.dump(out, f, ensure_ascii=False, indent=2)
    print("[PW-FLOW] " + ("PASSED" if ok else "FAILED"))
    sys.exit(0 if ok else 1)

if __name__ == "__main__":
    main()




### DOSYA BİTİŞ: pw_flow.py

### DOSYA BAŞLANGIÇ: .\\tools\run_all.ps1
param([string]$BindHost="127.0.0.1",[int]$Port=8000)
$ErrorActionPreference="Stop"

# Betiklerle aynı klasörde güvenli çağrı
$serve = Join-Path $PSScriptRoot 'serve_then_pipeline.ps1'
$accept = Join-Path $PSScriptRoot 'accept_visual.ps1'

powershell -ExecutionPolicy Bypass -File $serve -BindHost $BindHost -Port $Port
powershell -ExecutionPolicy Bypass -File $accept
### DOSYA BİTİŞ: run_all.ps1

### DOSYA BAŞLANGIÇ: .\\tools\serve_then_pipeline.ps1
# REV: 1.0 | 2025-09-25 | Hash: 7b3e92ad | Parça: 1/1
param(
  [string]$BindHost = "127.0.0.1",
  [int]$Port = 8000
)
$ErrorActionPreference = "Stop"

# Yol/ortam
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$RepoRoot  = Resolve-Path (Join-Path $ScriptDir "..")
$VenvPy    = Join-Path $RepoRoot "venv\Scripts\python.exe"
if (!(Test-Path $VenvPy)) { throw "Venv bulunamadı: $VenvPy" }

$env:PATH                   = (Join-Path $RepoRoot "venv\Scripts") + ";" + $env:PATH
$env:PYTHONPATH             = $RepoRoot
$env:DJANGO_SETTINGS_MODULE = "core.settings"

# Config & hedef ekran görüntüsü
$cfgPath = Join-Path $RepoRoot "pipeline.config.json"
if (!(Test-Path $cfgPath)) { throw "pipeline.config.json yok: $cfgPath" }
try { $cfg = Get-Content $cfgPath -Raw | ConvertFrom-Json } catch { throw "pipeline.config.json geçersiz JSON." }

$targetPng = Join-Path $RepoRoot $cfg.target_screenshot
if (!(Test-Path $targetPng)) {
  $shotsDir = Join-Path $RepoRoot $cfg.screenshots_dir
  if (Test-Path $shotsDir) {
    $latest = Get-ChildItem $shotsDir -Filter *.png | Sort-Object LastWriteTime -Descending | Select-Object -First 1
    if ($latest) {
      New-Item -ItemType Directory -Force -Path (Split-Path $targetPng) | Out-Null
      Copy-Item $latest.FullName $targetPng -Force
      Write-Host "==> Target oluşturuldu: $targetPng"
    }
  }
}

# Sunucu
Write-Host "==> runserver başlatılıyor..."
$runArgs = @("manage.py","runserver","$BindHost`:$Port","--noreload")
$server  = Start-Process -FilePath $VenvPy -ArgumentList $runArgs -PassThru -WindowStyle Hidden -WorkingDirectory $RepoRoot

# Port bekleme
$ok = $false
for($i=1; $i -le 60; $i++){
  if (Test-NetConnection $BindHost -Port $Port -InformationLevel Quiet) { $ok = $true; break }
  Start-Sleep -Milliseconds 500
}
if(-not $ok){
  try { if($server -and !$server.HasExited){ $server | Stop-Process -Force } } catch {}
  throw "runserver portu (${BindHost}:$Port) açılmadı."
}

# Pipeline
Write-Host "==> pipeline"
. (Join-Path $RepoRoot "tools\run_pipeline_venv.ps1")

# Sunucuyu kapat
Write-Host "==> runserver kapatılıyor..."
try { if($server -and !$server.HasExited){ $server | Stop-Process -Force } } catch {}

# Son rapor
$outRoot = Join-Path $RepoRoot "_otokodlama\out"
if (Test-Path $outRoot) {
  $last = Get-ChildItem $outRoot -Directory | Sort-Object LastWriteTime -Descending | Select-Object -First 1
  if ($last) {
    $lay = Join-Path $last.FullName "layout_report.json"
    if (Test-Path $lay) {
      Write-Host "==> layout_report.json:"
      Get-Content $lay -Raw | Write-Host
    } else {
      Write-Host "layout_report.json bulunamadı."
    }
  } else {
    Write-Host "_otokodlama\out altında klasör yok."
  }
} else {
  Write-Host "_otokodlama\out bulunamadı."
}

Write-Host "[ALL DONE]"
### DOSYA BİTİŞ: serve_then_pipeline.ps1

### DOSYA BAŞLANGIÇ: .\\scripts\capture_screenshot.ps1
# REV: 1.0 | 2025-09-25 | Hash: TBD | Parça: 1/1
Param(
  [string]$OutDir = "targets/screens",
  [string]$AlsoCopyTo = ""
)
$ErrorActionPreference = "Stop"

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

if (!(Test-Path $OutDir)) { New-Item -ItemType Directory -Path $OutDir | Out-Null }

$ts = Get-Date -Format "yyyyMMdd-HHmmss"
$path = Join-Path $OutDir ("screenshot-$ts.png")

$bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
$bmp = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
$gfx = [System.Drawing.Graphics]::FromImage($bmp)
$gfx.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
$bmp.Save($path, [System.Drawing.Imaging.ImageFormat]::Png)
$gfx.Dispose()
$bmp.Dispose()

Write-Host "[SCREENSHOT] $path"

if ($AlsoCopyTo -and (Test-Path $AlsoCopyTo)) {
  Copy-Item $path -Destination (Join-Path $AlsoCopyTo ("screenshot-$ts.png")) -Force
}
### DOSYA BİTİŞ: capture_screenshot.ps1

### DOSYA BAŞLANGIÇ: .\\pipeline.ps1
# REV: 1.0 | 2025-09-25 | Hash: TBD | Parça: 1/1
Param(
  [string]$Settings = "core.settings"
)
$ErrorActionPreference = "Stop"

# -------------------- Ortam & Yol Kurulumu --------------------
$Root = (Get-Location).Path
$Ts   = Get-Date -Format "yyyyMMdd-HHmmss"
$OutDir = Join-Path $Root ("_otokodlama/out/" + $Ts)
New-Item -ItemType Directory -Force -Path $OutDir | Out-Null

# Tam terminal dökümü
Start-Transcript -Path (Join-Path $OutDir "transcript.txt") -Force | Out-Null

# Config yükle
$ConfigPath = Join-Path $Root "pipeline.config.json"
if (Test-Path $ConfigPath) {
  $Config = Get-Content $ConfigPath -Raw | ConvertFrom-Json
} else {
  throw "pipeline.config.json bulunamadı."
}

# -------------------- Yardımcılar --------------------
function Step($name, $scriptBlock) {
  Write-Host "==> $name"
  try {
    & $scriptBlock 2>&1 | Tee-Object -FilePath (Join-Path $OutDir ("$($name -replace '\s','_').log"))
    if ($LASTEXITCODE -ne $null -and $LASTEXITCODE -ne 0) { throw "$name exit code $LASTEXITCODE" }
  } catch {
    Write-Host "!  $name FAILED"
    Stop-Transcript | Out-Null
    throw
  }
}

function StepSoft($name, $scriptBlock) {
  Write-Host "==> $name (soft)"
  try {
    & $scriptBlock 2>&1 | Tee-Object -FilePath (Join-Path $OutDir ("$($name -replace '\s','_').log"))
  } catch {
    Write-Host "!  $name FAILED (soft, continuing)"
  }
}

# 650 satır üstü gate (venv, node_modules, _otokodlama hariç)
function Gate-LineLimit650 {
  $limit = 650
  $long = @()
  Get-ChildItem -Recurse -File | Where-Object {
    $_.FullName -notmatch '\\venv\\' -and
    $_.FullName -notmatch '\\node_modules\\' -and
    $_.FullName -notmatch '\\_otokodlama\\' -and
    $_.Name -ne "transcript.txt"
  } | ForEach-Object {
    try {
      $cnt = [System.IO.File]::ReadLines($_.FullName).Count
      if ($cnt -gt $limit) {
        $long += "{0} : {1} satır" -f ($_).FullName, $cnt
      }
    } catch { }
  }
  $out = Join-Path $OutDir "longfiles.txt"
  $long | Out-File -Encoding utf8 $out
  if ($long.Count -gt 0) {
    Write-Host "[LONGFILES] 650+ satır bulundu, detay için: $out"
    throw "650 satır sınırı aşıldı."
  } else {
    Write-Host "[LONGFILES] OK (650 üstü yok)"
  }
}

# -------------------- Adımlar --------------------
# (İstersen aktif tut: revstamp / blockcheck / guardrail)
#Step "revstamp" { python tools/revstamp.py . }
Step "blockcheck" { python tools/blockcheck.py --tracked }
Step "guardrail_check" { python tools/guardrail_check.py }

# 650 satır gate
Step "line_limit_650" { Gate-LineLimit650 }

# Django check (soft)
StepSoft "django_check" { .\scripts\django_check.ps1 -Settings $Settings -Soft }

# Ekran görüntüsü (her koşuda)
$ScreensDir = Join-Path $Root $Config.screenshots_dir
Step "screenshot" {
  .\scripts\capture_screenshot.ps1 -OutDir $ScreensDir -AlsoCopyTo $OutDir
}

# Playwright testleri
$PwOut = Join-Path $OutDir "playwright"
Step "playwright" {
  if (!(Test-Path $PwOut)) { New-Item -ItemType Directory -Force -Path $PwOut | Out-Null }
  python tools/playwright_tests.py --urls $Config.urls_file --out $PwOut
}

# Layout acceptance (hedef ekran + iyileştirme + test sonucu)
$TargetPng = Join-Path $Root $Config.target_screenshot
$ImproveTx = Join-Path $Root $Config.improvements_file
$LayJson   = Join-Path $OutDir "layout_report.json"
$PwJson    = Join-Path $PwOut "report.json"
$Th        = [double]$Config.acceptance.screenshot_similarity

Step "acceptance_gate" {
  python tools/layout_acceptance.py `
    --target $TargetPng `
    --latest $ScreensDir `
    --improve $ImproveTx `
    --report $LayJson `
    --threshold $Th `
    --playwright_json $PwJson
}

Write-Host "[PIPELINE] Tamamlandı."
Stop-Transcript | Out-Null
### DOSYA BİTİŞ: pipeline.ps1

### DOSYA BAŞLANGIÇ: .\\ops\report_crud.ps1
param(
  [string]$OutDir    = "_otokodlama\out",
  [string]$ReportDir = "_otokodlama\reports",
  [string]$Include   = "*.json",
  [int]   $MaxErrLen = 200
)

function New-DirIfMissing($p) { if (!(Test-Path $p)) { New-Item -ItemType Directory -Force -Path $p | Out-Null } }
New-DirIfMissing $ReportDir

function Shorten([string]$s, [int]$n) {
  if ([string]::IsNullOrWhiteSpace($s)) { return "" }
  $flat = ($s -replace "\s+"," ").Trim()
  if ($flat.Length -le $n) { return $flat }
  return $flat.Substring(0,[Math]::Min($n,$flat.Length))
}

function Classify-Failure($step) {
  $cmd = "$($step.cmd)".ToUpper()
  $arg = [string]$step.arg
  $err = [string]$step.error
  $url = [string]$step.url

  if ($cmd -eq "AUTOVALIDATE") {
    $parts = @()
    if ($step.ok_words  -eq $false) { $parts += "kelime-recall" }
    if ($step.ok_visual -eq $false) { $parts += "görsel-benzerlik" }
    if ($step.ok_selects -eq $false){ $parts += "select-kontrolü" }
    if ($parts.Count -eq 0) { $parts = @("autovalidate") }
    return "autovalidate: " + ($parts -join "+")
  }

  if ($err -match "ERR_TOO_MANY_REDIRECTS") { return "redirect-loop" }
  if ($url -like "chrome-error://*")       { return "browser/navigation-error" }
  if ($err -match "ERR_CONNECTION_REFUSED") { return "server-down" }
  if ($err -match "403|Forbidden")          { return "403-forbidden" }
  if ($err -match "401|Unauthorized")       { return "401-unauthorized" }

  if ($err -match "TimeoutError: Page\.wait_for_selector") {
    if ($arg -match "table#result_list")                     { return "liste-boş/kayıt-yok/selector-değişti" }
    if ($arg -match "form#changelist-search|input#searchbar"){ return "arama-çubuğu-bulunamadı" }
    if ($arg -match "form#equipment_form")                   { return "form-yüklenmedi" }
    if ($arg -match "\.messagelist")                         { return "başarı-mesajı-yok" }
    return "selector-timeout"
  }

  if ($cmd -eq "CLICK" -and $err -match "not visible|detached|is not visible") { return "click-mümkün-değil" }
  return "diğer"
}

# Dosya listesi (Include destekli)
$rows = @()
$files = @()
$patterns = $Include -split '[,; ]+' | Where-Object { $_ -and $_.Trim() -ne "" }
if ($patterns.Count -eq 0) { $patterns = @("*.json") }
foreach ($p in $patterns) { $files += Get-ChildItem (Join-Path $OutDir $p) -ErrorAction SilentlyContinue }
if ($files.Count -eq 0)   { $files  = Get-ChildItem (Join-Path $OutDir "*.json") -ErrorAction SilentlyContinue }
$files = $files | Sort-Object LastWriteTime

foreach ($f in $files) {
  # JSON'u UTF-8 olarak oku; gerekirse .NET fallback
  try {
    $raw = Get-Content $f.FullName -Raw -Encoding UTF8
  } catch {
    $raw = [IO.File]::ReadAllText($f.FullName, [Text.UTF8Encoding]::new($true))
  }
  try {
    $j = $raw | ConvertFrom-Json
  } catch {
    $rows += [pscustomobject]@{
      Flow=[IO.Path]::GetFileNameWithoutExtension($f.Name); Pass=$false; FirstFailStep=''; Cmd='';
      Reason='json-parse-error'; ErrorSnippet=(Shorten "$($_.Exception.Message)" $MaxErrLen);
      Url=''; Recall=''; VisualSim=''; OkWords=''; OkVisual=''; OkSelects=''; MissingCount='';
      Log=([IO.Path]::ChangeExtension($f.FullName,'log'))
    }
    continue
  }

  if ($null -eq $j.ok -or $null -eq $j.results) {
    $rows += [pscustomobject]@{
      Flow=[IO.Path]::GetFileNameWithoutExtension($f.Name); Pass=$false; FirstFailStep=''; Cmd='';
      Reason='schema-mismatch'; ErrorSnippet=''; Url=''; Recall=''; VisualSim=''; OkWords=''; OkVisual=''; OkSelects=''; MissingCount='';
      Log=([IO.Path]::ChangeExtension($f.FullName,'log'))
    }
    continue
  }

  $flow  = [IO.Path]::GetFileNameWithoutExtension($f.Name)
  $pass  = [bool]$j.ok
  $steps = @($j.results)
  $firstFail = $steps | Where-Object { $_.ok -ne $true } | Select-Object -First 1

  # Autovalidate metrikleri (varsa)
  $recall=''; $visual=''; $okw=''; $okv=''; $oks=''; $miss=''
  foreach ($s in $steps) {
    if ("$($s.cmd)".ToUpper() -eq "AUTOVALIDATE") {
      $recall=$s.recall; $visual=$s.visual_sim; $okw=$s.ok_words; $okv=$s.ok_visual; $oks=$s.ok_selects; $miss=$s.missing_count
    }
  }

  if (-not $firstFail -and -not $pass) {
    $toolErr = ""; try { $toolErr = [string]$j.tool_error } catch {}
    $rows += [pscustomobject]@{
      Flow=$flow; Pass=$pass; FirstFailStep=''; Cmd=''; Reason='tool-error/no-steps';
      ErrorSnippet=(Shorten $toolErr $MaxErrLen); Url='';
      Recall=$recall; VisualSim=$visual; OkWords=$okw; OkVisual=$okv; OkSelects=$oks; MissingCount=$miss;
      Log=([IO.Path]::ChangeExtension($f.FullName,'log'))
    }
    continue
  }

  if ($firstFail) {
    $rows += [pscustomobject]@{
      Flow=$flow; Pass=$pass; FirstFailStep=$firstFail.i; Cmd=$firstFail.cmd;
      Reason=(Classify-Failure $firstFail); ErrorSnippet=(Shorten([string]$firstFail.error, $MaxErrLen));
      Url=$firstFail.url; Recall=$recall; VisualSim=$visual; OkWords=$okw; OkVisual=$okv; OkSelects=$oks; MissingCount=$miss;
      Log=([IO.Path]::ChangeExtension($f.FullName,'log'))
    }
  } else {
    $lastUrl = ''; if ($steps.Count -gt 0) { $lastUrl = $steps[-1].url }
    $rows += [pscustomobject]@{
      Flow=$flow; Pass=$pass; FirstFailStep=''; Cmd=''; Reason='passed'; ErrorSnippet=''; Url=$lastUrl;
      Recall=$recall; VisualSim=$visual; OkWords=$okw; OkVisual=$okv; OkSelects=$oks; MissingCount=$miss;
      Log=([IO.Path]::ChangeExtension($f.FullName,'log'))
    }
  }
}

# Çıktılar
$csvPath  = Join-Path $ReportDir "crud_summary.csv"
$jsonPath = Join-Path $ReportDir "crud_summary.json"
$mdPath   = Join-Path $ReportDir "crud_summary.md"

New-DirIfMissing $ReportDir
$rows | Export-Csv $csvPath -NoTypeInformation -Encoding UTF8
$rows | ConvertTo-Json -Depth 8 | Out-File $jsonPath -Encoding utf8

$passCount = ($rows | Where-Object {$_.Pass -eq $true}).Count
$failCount = ($rows | Where-Object {$_.Pass -ne $true}).Count
$byReason  = $rows | Group-Object Reason | Sort-Object Count -Descending

$md = @()
$md += "# Admin PW Koşu Özeti"
$md += ""
$md += "*Toplam:* $($rows.Count)  |  *Geçti:* $passCount  |  *Kaldı:* $failCount"
$md += ""
$md += "## Hata Dağılımı"
foreach ($g in $byReason) { $md += "- **$($g.Name)**: $($g.Count)" }
$md += ""
$md += "## Akışlar"
$md += ""
$md += "| Flow | Pass | Reason | FirstFailStep | Cmd | Recall | VisualSim | OkWords | OkVisual | OkSelects | Missing | ErrorSnippet | Log |"
$md += "|------|------|--------|---------------|-----|--------|-----------|---------|----------|-----------|---------|--------------|-----|"
foreach ($r in $rows) {
  $md += "| $($r.Flow) | $($r.Pass) | $($r.Reason) | $($r.FirstFailStep) | $($r.Cmd) | $($r.Recall) | $($r.VisualSim) | $($r.OkWords) | $($r.OkVisual) | $($r.OkSelects) | $($r.MissingCount) | $(($r.ErrorSnippet -replace '\|','/')) | $($r.Log) |"
}
$md -join "`r`n" | Out-File $mdPath -Encoding utf8

Write-Host "== PW RAPORU ==" -ForegroundColor Cyan
"{0,-38} {1,-6} {2,-24} {3,-5} {4}" -f "Flow","Pass","Reason","Step","Cmd"
foreach ($r in $rows) {
  "{0,-38} {1,-6} {2,-24} {3,-5} {4}" -f $r.Flow, $r.Pass, (Shorten $r.Reason 24), $r.FirstFailStep, $r.Cmd
}
Write-Host ""
Write-Host ("CSV : " + $csvPath)
Write-Host ("JSON: " + $jsonPath)
Write-Host ("MD  : " + $mdPath)

### DOSYA BİTİŞ: report_crud.ps1

### DOSYA BAŞLANGIÇ: .\\ops\run_and_guard.ps1
param(
  [Parameter(Mandatory=$true)][string]$flow,         # .flow dosyasının tam yolu
  [Parameter(Mandatory=$true)][string]$outPath,      # JSON çıktı yolu
  [string]$BaseUrl = "http://127.0.0.1:8010",        # BASE_URL env
  [string]$ExtraArgs = ""                            # pw_flow.py'ye ham argümanlar ("--timeout 5000" gibi)
)

$ErrorActionPreference = "Stop"

# Ortam değişkenleri
$env:BASE_URL = $BaseUrl
$env:PYTHONUNBUFFERED = "1"

# Çıktı klasörünü garanti et
$op = Split-Path -Parent $outPath
if ($op -and -not (Test-Path $op)) { New-Item -ItemType Directory -Force -Path $op | Out-Null }

# Extra argümanları güvenli diziye çevir
$ea = @()
if ($ExtraArgs) {
  # whitespace'e göre böl (ör: "--timeout 5000")
  $ea = $ExtraArgs -split '\s+'
}

# Python çağrısı (doğrudan, güvenli)
Write-Host ("[run_and_guard] python tools\pw_flow.py --steps {0} --out {1} {2}" -f $flow, $outPath, ($ea -join " "))
& python -u "tools\pw_flow.py" --steps $flow --out $outPath @ea
$exitCode = $LASTEXITCODE

# Guard tarzı bilgi satırı (izleme kolaylığı için)
if (Test-Path $outPath) { Write-Host "[guard] wrote: $outPath" }

exit $exitCode
### DOSYA BİTİŞ: run_and_guard.ps1

### DOSYA BAŞLANGIÇ: .\\ops\run_ci_pr_approve.ps1
param()
if (-not $env:OZKAN_PAT) {
  Write-Error "Set OZKAN_PAT (ozkanrepo1 PAT, scopes: repo, read:org)"; exit 1
}
$env:GH_TOKEN = $env:OZKAN_PAT
try {
  & "$PSScriptRoot\auto_pr.ps1" -WaitForMerge
} finally {
  Remove-Item Env:GH_TOKEN -ErrorAction SilentlyContinue
}
### DOSYA BİTİŞ: run_ci_pr_approve.ps1

### DOSYA BAŞLANGIÇ: .\\ops\rebase_auto.ps1
param(
   [string]$Branch,
   [int]$PrNumber = 0
)

$ErrorActionPreference = 'Stop'

function Abort-StaleOps {
   git rebase --abort 2>$null | Out-Null
   git merge  --abort 2>$null | Out-Null
}

function Solve-Bumper {
   New-Item -ItemType Directory -Force ".github" | Out-Null
   "trigger $(Get-Date -Format s)" | Set-Content ".github\pr-bumper.md"
   git add ".github\pr-bumper.md" | Out-Null
}

function Get-Conflicts {
   # Çatışan dosyaları tekil listele
   (git ls-files -u) -split "`n" |
     Where-Object { $_ -ne "" } |
     ForEach-Object { ($_ -split "\s+")[3] } |
     Sort-Object -Unique
}

# --- Branch'ı akıllı şekilde çöz ---
if (-not $Branch) {
   if ($PrNumber -gt 0) {
     $Branch = gh pr view $PrNumber --json headRefName --jq .headRefName
     if (-not $Branch) { throw "PR #$PrNumber bulunamadı/kapalı. -Branch vererek deneyin." }
   } else {
     $Branch = gh pr list --state open --limit 1 --json headRefName --jq '.[0].headRefName' 2>$null
     if (-not $Branch) {
       $Branch = (git rev-parse --abbrev-ref HEAD)
       if (-not $Branch -or $Branch -eq 'HEAD') { throw "Açık PR yok ve aktif dal çözülemedi. -Branch ya da -PrNumber verin." }
     }
   }
}

function Rebase-Or-Merge([string]$branch) {
   git fetch origin | Out-Null
   git checkout $branch | Out-Null

   # 1) REBASE (editörsüz olsun diye boş mesajla commit atmaya zorlamayacağız; direkt deneyip düşersek merge)
   git -c core.editor=true -c sequence.editor=true rebase origin/main
   if ($LASTEXITCODE -eq 0 -and -not (Test-Path ".git\rebase-apply") -and -not (Test-Path ".git\rebase-merge")) {
     return  # başarılı rebase
   }

   Write-Warning "Rebase tamamlanamadı → MERGE fallback'a geçiyorum."
   git rebase --abort 2>$null | Out-Null

   # 2) MERGE (editor açmadan, no-edit ile)
   git merge --no-edit origin/main
   if ($LASTEXITCODE -ne 0) {
     # Bumper'ı tazele
     Solve-Bumper

     # Kalan bütün çatışmalar --> OURS (mevcut dal)
     $conf = Get-Conflicts
     if ($conf) {
       foreach ($p in $conf) {
         if ($p -ne ".github/pr-bumper.md") {
           git checkout --ours -- "$p"
           git add -- "$p"
         }
       }
     }

     # Her şey eklendiyse commitle
     git commit --no-edit
     if ($LASTEXITCODE -ne 0) { throw "Merge commit atılamadı. Kalan çatışmalar olabilir." }
   }
}

# --- Çalıştır ---
Abort-StaleOps
Rebase-Or-Merge $Branch
git push --force-with-lease origin $Branch

if ($PrNumber -gt 0) { gh pr merge $PrNumber --squash --auto }

Write-Host "[done] $Branch güncellendi ve push edildi." -ForegroundColor Green
if ($PrNumber -gt 0) { Write-Host "[note] PR #$PrNumber auto-merge açık; koşullar tamamlanınca birleşir." -ForegroundColor Yellow }
### DOSYA BİTİŞ: rebase_auto.ps1

### DOSYA BAŞLANGIÇ: .\\ops\git_ops.ps1
param(
  [string]$RepoRoot = ".",
  [string]$Branch   = "main",
  [string]$AddSpec  = ".",
  [string]$Message  = "[auto] apply files + update state",
  [switch]$NoPush
)

$ErrorActionPreference = "Stop"
Set-Location $RepoRoot

$dirty = & git status --porcelain
if (-not $dirty) { Write-Host "[git] Çalışma alanı temiz; commit/push atlandı." -ForegroundColor Yellow; exit 0 }

& git add $AddSpec
try { & git commit -m $Message } catch { Write-Host "[git] Commit başarısız: $($_.Exception.Message)" -ForegroundColor Red; exit 2 }

if (-not $NoPush) {
  try { & git push origin $Branch } catch { Write-Host "[git] Push başarısız: $($_.Exception.Message)" -ForegroundColor Red; exit 3 }
  Write-Host "[git] Pushed to origin/$Branch" -ForegroundColor Green
} else {
  Write-Host "[git] --NoPush seçildi, push atlandı." -ForegroundColor Yellow
}
### DOSYA BİTİŞ: git_ops.ps1

### DOSYA BAŞLANGIÇ: .\\ops\open_pr.ps1
param(
  [string]$RepoRoot   = ".",
  [string]$Branch     = "main",   # PR HEAD (çalıştığınız dal)
  [string]$BaseBranch = "main",   # PR BASE (hedef dal)
  [string]$StateTools = "ops/state_tools.ps1"
)

$ErrorActionPreference = "Stop"

function Show-GitHubErrorBody {
  param([System.Net.WebException]$Ex)
  try {
    $resp = $Ex.Response
    if ($resp -and $resp.GetResponseStream) {
      $sr = New-Object IO.StreamReader($resp.GetResponseStream())
      $body = $sr.ReadToEnd()
      Write-Warning ("GitHub API error body: " + $body)
      if ($resp.Headers["WWW-Authenticate"]) {
        Write-Warning ("WWW-Authenticate: " + $resp.Headers["WWW-Authenticate"])
      }
    }
  } catch { Write-Warning "Error body okunamadı: $($_.Exception.Message)" }
}

function Get-RepoSlug {
  param([string]$RepoRoot)
  Push-Location $RepoRoot
  try {
    $url = (& git remote get-url origin 2>$null)
    if (-not $url) { throw "origin remote bulunamadı." }
    if ($url -match 'github\.com[:/](.+?)(\.git)?$') { return $Matches[1] }
    throw "GitHub repo slug çözülemedi: $url"
  } finally { Pop-Location }
}

function Load-State {
  param([string]$StateTools,[string]$RepoRoot)
  . (Join-Path $RepoRoot $StateTools)
  return (Get-State)
}

function Build-PR-Body {
  param($state)
  $lines = @()
  $lines += "### UI Test Özeti"
  if ($state.tests -and $state.tests.summary) {
    $lines += ""
    $lines += "- **Passed**: $($state.tests.summary.passed)"
    $lines += "- **Failed**: $($state.tests.summary.failed)"
    $lines += "- **Last Run**: $($state.tests.summary.last_run)"
  }

  if ($state.tests -and $state.tests.results) {
    $lines += ""
    $lines += "| Key | Status | words_recall | missing_count | out_json | screenshot |"
    $lines += "|-----|--------|--------------|---------------|----------|------------|"

    $keys = @()
    if ($state.tests.results -is [hashtable]) { $keys = $state.tests.results.Keys }
    else { $keys = ($state.tests.results.PSObject.Properties | Select-Object -ExpandProperty Name) }

    foreach ($k in $keys) {
      $it = if ($state.tests.results -is [hashtable]) { $state.tests.results[$k] } else { $state.tests.results.$k }
      $status = $it.status
      $recall = ""
      $misses = ""
      if ($it.metrics) {
        if ($it.metrics.PSObject.Properties['words_recall']) { $recall = [string]$it.metrics.words_recall }
        if ($it.metrics.PSObject.Properties['missing_count']) { $misses = [string]$it.metrics.missing_count }
      }
      $outj = ""
      $shot = ""
      if ($it.artifacts) {
        if ($it.artifacts.PSObject.Properties['out_json']) { $outj = [string]$it.artifacts.out_json }
        if ($it.artifacts.PSObject.Properties['screenshot']) { $shot = [string]$it.artifacts.screenshot }
      }
      $lines += "| $k | $status | $recall | $misses | $outj | $shot |"
    }
  }

  if ($state.pending_actions -and $state.pending_actions.Count -gt 0) {
    $lines += ""
    $lines += "### Pending Actions"
    foreach ($p in $state.pending_actions) {
      $lines += "- [$($p.status)] **$($p.type)**: $($p.detail) (due_stage: $($p.due_stage), ts: $($p.ts))"
    }
  }

  return ($lines -join "`n")
}

# ----- MAIN -----
$repoSlug = Get-RepoSlug -RepoRoot $RepoRoot
$state    = Load-State -StateTools $StateTools -RepoRoot $RepoRoot

$title = "[auto] UI validate passed → open PR"
$body  = Build-PR-Body -state $state

# 1) Push edildiğinden emin ol
Push-Location $RepoRoot
try { & git push origin $Branch | Out-Null } finally { Pop-Location }

# 2) PR açma: gh (CLI) → yoksa REST → ikisi de yoksa uyarı
$createdUrl = ""
$used = ""

if (Get-Command gh -ErrorAction SilentlyContinue) {
  try {
    $out = & gh pr create --title $title --body $body --base $BaseBranch --head $Branch 2>&1
    if ($LASTEXITCODE -eq 0) {
      $m = ($out | Select-String -Pattern 'https?://github\.com/.+?/pull/\d+' | Select-Object -First 1)
      if ($m) { $createdUrl = $m.Matches.Value; $used = "gh" }
    } else {
      Write-Warning "gh pr create hata verdi: $out"
    }
  } catch {
    Write-Warning "gh pr create çalışmadı: $($_.Exception.Message)"
  }
}

if (-not $createdUrl) {
  $token = $env:GITHUB_TOKEN
  if ($token) {
    $bodyObj = @{
      title = $title
      head  = $Branch
      base  = $BaseBranch
      body  = $body
    }
    $json = $bodyObj | ConvertTo-Json -Depth 5
    $uri  = "https://api.github.com/repos/$repoSlug/pulls"

    $headers = @{
      "Accept"        = "application/vnd.github+json"
      "Authorization" = "token $token"
      "X-GitHub-Api-Version" = "2022-11-28"
      "User-Agent"    = "ps-open-pr"
    }
    try {
      $resp = Invoke-RestMethod -Method Post -Uri $uri -Headers $headers -Body $json
      if ($resp.html_url) { $createdUrl = $resp.html_url; $used = "rest" }
    } catch [System.Net.WebException] {
      Show-GitHubErrorBody $_.Exception
      Write-Warning "REST ile PR açma denemesi hata verdi."
    }
  } else {
    Write-Warning "Ne 'gh' komutu başarılı ne de GITHUB_TOKEN tanımlı. PR otomatik açılamadı (pipeline kesilmedi)."
  }
}

if ($createdUrl) {
  Write-Host "[pr] Açıldı ($used) → $createdUrl" -ForegroundColor Green
  . (Join-Path $RepoRoot $StateTools)
  Advance-Pipeline -ToStage "await_review" -Hint "PR açıldı: $createdUrl"
} else {
  Write-Host "[pr] PR açılamadı; stage değiştirilmedi." -ForegroundColor Yellow
}

### DOSYA BİTİŞ: open_pr.ps1

### DOSYA BAŞLANGIÇ: .\\ops\pipeline_local.ps1
param(
  [string]$BaseUrl     = "http://127.0.0.1:8010",
  [string]$JobsCsv     = "ops/ui_jobs.csv",
  [string]$BaselineDir = "targets\reference",
  [string]$AlertsDir   = "_otokodlama\alerts",
  [string]$StateTools  = "ops/state_tools.ps1",
  [switch]$NoGitPush
)

$ErrorActionPreference = "Stop"

# 1) AI patch'leri uygula (varsa)
powershell -ExecutionPolicy Bypass -File "ops/apply_ai_files.ps1" -RepoRoot "." -InboxDir "ai_inbox" -StateTools $StateTools | Out-Host

# 2) UI testlerini koştur + state güncelle
powershell -ExecutionPolicy Bypass -File "ops/run_suite.ps1" -BaseUrl $BaseUrl -JobsCsv $JobsCsv -BaselineDir $BaselineDir -AlertsDir $AlertsDir -StateTools $StateTools | Out-Host

# 3) Değişiklikleri commit/push
if ($NoGitPush) {
  powershell -ExecutionPolicy Bypass -File "ops/git_ops.ps1" -RepoRoot "." -Branch "main" -AddSpec "." -Message "[auto] ai apply + ui validate + state" -NoPush | Out-Host
} else {
  powershell -ExecutionPolicy Bypass -File "ops/git_ops.ps1" -RepoRoot "." -Branch "main" -AddSpec "." -Message "[auto] ai apply + ui validate + state" | Out-Host
}

Write-Host "`n[pipeline] DONE." -ForegroundColor Green
### DOSYA BİTİŞ: pipeline_local.ps1

### DOSYA BAŞLANGIÇ: .\\ops\run_backlog_multi.ps1
param(
  [string[]]$Filter = @("*"),
  [switch]$LinkSmoke,
  [string]$BaseUrl    = "http://127.0.0.1:8010",
  [int]   $SmokeDepth = 1,
  [int]   $SmokeLimit = 150,
  [string]$ExtraArgs  = ""
)

if ($Filter -is [string]) {
  if ($Filter -match ",") { $Filter = $Filter -split "," | ForEach-Object { $_.Trim() } }
  else { $Filter = @($Filter) }
}
elseif ($Filter.Count -eq 1 -and $Filter[0] -match ",") {
  $Filter = $Filter[0] -split "," | ForEach-Object { $_.Trim() }
}

Write-Host ("[multi] Filters: {0}" -f ($Filter -join ", ")) -ForegroundColor Cyan

foreach($pat in $Filter){
  if ([string]::IsNullOrWhiteSpace($pat)) { continue }
  Write-Host ("[multi] Running pattern: {0}" -f $pat) -ForegroundColor Yellow

  $argList = @(
    '-NoProfile','-NonInteractive','-ExecutionPolicy','Bypass',
    '-File','ops\run_backlog.ps1',
    '-Filter', $pat,
    '-BaseUrl', $BaseUrl,
    '-SmokeDepth', $SmokeDepth,
    '-SmokeLimit', $SmokeLimit,
    '-ExtraArgs', $ExtraArgs
  )
  if ($LinkSmoke.IsPresent) { $argList += '-LinkSmoke' }

  powershell @argList
}
### DOSYA BİTİŞ: run_backlog_multi.ps1

### DOSYA BAŞLANGIÇ: .\\ops\smoke_links.ps1
# Rev: 2025-09-28 15:20 r4
param(
  [Parameter(Mandatory=$true)][string]$Base,
  [Parameter(Mandatory=$true)][string]$Start,
  [Parameter(Mandatory=$true)][string]$Out,
  [int]$Depth = 1,
  [int]$Limit = 150,
  [string]$PathPrefix = "/",
  [string]$LoginPath = "/admin/login/",
  [string]$User = "admin",
  [string]$Pass = "Admin!2345",
  [int]$Timeout = 20000,
  [string]$OkRedirectTo = ""   # ör: "/_direct/.*|/admin/.*"
)

function Join-Url([uri]$baseUri, [string]$url) {
  if ([string]::IsNullOrWhiteSpace($url)) { return $null }
  $u = $null
  if ([System.Uri]::TryCreate($url, [System.UriKind]::Absolute, [ref]$u)) { return $u }
  return [uri]::new($baseUri, $url)
}

function InScope([string]$locPath, [string]$prefix) {
  if ([string]::IsNullOrWhiteSpace($locPath)) { return $false }
  if ([string]::IsNullOrWhiteSpace($prefix))  { return $true }
  return $locPath.ToLower().StartsWith($prefix.ToLower())
}

function DepthOf([string]$path, [string]$prefix) {
  if (-not $path) { return 0 }
  $p   = $path
  $pre = if ($null -ne $prefix) { $prefix } else { "" }
  $p   = $p.Trim('/')
  $pre = $pre.Trim('/')
  if ($pre -and $p.ToLower().StartsWith($pre.ToLower())) {
    $p = $p.Substring($pre.Length).Trim('/')
  }
  if ([string]::IsNullOrWhiteSpace($p)) { return 0 }
  return ($p.Split('/', [System.StringSplitOptions]::RemoveEmptyEntries).Length)
}

function ParseLinks([string]$html, [uri]$docUri) {
  $set = New-Object System.Collections.Generic.HashSet[string]
  if (-not $html) { return @() }
  $rx = [regex]'(?isx)
      <a\b[^>]*?href\s*=\s*["''](?<u>[^"''#>]+)["'']
    | <link\b[^>]*?href\s*=\s*["''](?<u>[^"''#>]+)["'']
    | <script\b[^>]*?src\s*=\s*["''](?<u>[^"''#>]+)["'']
  '
  foreach ($m in $rx.Matches($html)) {
    $u = $m.Groups['u'].Value
    if ([string]::IsNullOrWhiteSpace($u)) { continue }
    try {
      $abs = (Join-Url $docUri $u)
      if ($abs) { [void]$set.Add($abs.AbsolutePath) }
    } catch {}
  }
  # .ToArray() .NET Framework'te extension; 5.1'de garanti değil → düz diziye çevir
  return @($set)
}

Add-Type -AssemblyName System.Net.Http
$handler = New-Object System.Net.Http.HttpClientHandler
$cookieJar = New-Object System.Net.CookieContainer
$handler.CookieContainer   = $cookieJar
$handler.AllowAutoRedirect = $false
$client  = New-Object System.Net.Http.HttpClient($handler)
$client.Timeout = [TimeSpan]::FromMilliseconds([Math]::Max(1000, $Timeout))
$baseUri = [uri]$Base

function Get-Resp([uri]$uri, [string]$method="GET", [string]$body="", [hashtable]$headers=@{}) {
  $req = New-Object System.Net.Http.HttpRequestMessage([System.Net.Http.HttpMethod]::$method, $uri)
  foreach ($k in $headers.Keys) { $req.Headers.TryAddWithoutValidation($k, [string]$headers[$k]) | Out-Null }
  if ($method -eq "POST") {
    $req.Content = New-Object System.Net.Http.StringContent($body, [System.Text.Encoding]::UTF8, "application/x-www-form-urlencoded")
  }
  $resp = $client.SendAsync($req).Result
  return $resp
}

function Do-Login {
  try {
    $loginUri = Join-Url $baseUri $LoginPath
    $r1 = Get-Resp $loginUri "GET"
    $html = $r1.Content.ReadAsStringAsync().Result
    $token = ""
    $m = [regex]::Match($html, 'name=["'']csrfmiddlewaretoken["'']\s+value=["'']([^"'']+)["'']', 'IgnoreCase')
    if ($m.Success) { $token = $m.Groups[1].Value }
    $body = "username=$([uri]::EscapeDataString($User))&password=$([uri]::EscapeDataString($Pass))"
    if ($token) { $body += "&csrfmiddlewaretoken=$([uri]::EscapeDataString($token))" }
    $null = Get-Resp $loginUri "POST" $body @{ "Referer" = $loginUri.AbsoluteUri }
    return $true
  } catch {
    Write-Host "[link-smoke] login hata: $($_.Exception.Message)" -ForegroundColor Yellow
    return $false
  }
}

$null = Do-Login

$queue   = New-Object System.Collections.Generic.Queue[object]
$visited = New-Object System.Collections.Generic.HashSet[string]
$bad     = New-Object System.Collections.Generic.List[object]
$checked = 0

$startUri = Join-Url $baseUri $Start
$queue.Enqueue([pscustomobject]@{ Uri=$startUri; Depth=0 })

while(($queue.Count -gt 0) -and ($checked -lt $Limit)) {
  $item = $queue.Dequeue()
  $u = $item.Uri
  $d = [int]$item.Depth
  if (-not $u) { continue }

  $key = $u.AbsolutePath.ToLower()
  if ($visited.Contains($key)) { continue }
  [void]$visited.Add($key)

  try {
    $resp = Get-Resp $u "GET"
    $status = [int]$resp.StatusCode
    $locHdr = $resp.Headers.Location
    $locAbs = $null
    if ($locHdr) { $locAbs = Join-Url $u $locHdr.ToString() }

    if ($status -ge 300 -and $status -lt 400) {
      $okRedirect = $false
      if ($locAbs -and -not [string]::IsNullOrWhiteSpace($OkRedirectTo)) {
        if ($locAbs.AbsolutePath -match $OkRedirectTo) { $okRedirect = $true }
      }
      $inScopeNext = ($locAbs -ne $null) -and (InScope $locAbs.AbsolutePath $PathPrefix)
      if ($inScopeNext -and -not $okRedirect) {
        $locStr = if ($locAbs) { $locAbs.AbsoluteUri } else { "" }
        $bad.Add([pscustomobject]@{ url=$u.AbsoluteUri; status=$status; location=$locStr }) | Out-Null
      }
      if ($locAbs -and (InScope $locAbs.AbsolutePath $PathPrefix) -and ($d -lt $Depth)) {
        $queue.Enqueue([pscustomobject]@{ Uri=$locAbs; Depth=$d })
      }
    }
    elseif ($status -ge 200 -and $status -lt 300) {
      $ct = $resp.Content.Headers.ContentType
      if ($ct -and $ct.MediaType -like "text/html") {
        $html = $resp.Content.ReadAsStringAsync().Result
        if ((InScope $u.AbsolutePath $PathPrefix) -and ($d -lt $Depth)) {
          foreach ($p in (ParseLinks $html $u)) {
            if (InScope $p $PathPrefix) {
              $depthNext = (DepthOf $p $PathPrefix)
              if ($depthNext -le $Depth) {
                $abs = Join-Url $baseUri $p
                if ($abs -and -not $visited.Contains($abs.AbsolutePath.ToLower())) {
                  $queue.Enqueue([pscustomobject]@{ Uri=$abs; Depth=$depthNext })
                }
              }
            }
          }
        }
      }
    }
    else {
      $bad.Add([pscustomobject]@{ url=$u.AbsoluteUri; status=$status; location="" }) | Out-Null
    }
  } catch {
    $msg = $_.Exception.Message
    Write-Host "[link-smoke] GET hata: $msg" -ForegroundColor Yellow
    $bad.Add([pscustomobject]@{ url=$u.AbsoluteUri; status=-1; location=""; error=$msg }) | Out-Null
  }

  $checked++
}

$result = [pscustomobject]@{
  checked      = $checked
  bad          = $bad.Count
  bad_list     = $bad
  visited      = $visited | Sort-Object
  scope_prefix = $PathPrefix
  base         = $Base
  start        = $Start
  ok_redirect  = $OkRedirectTo
  depth        = $Depth
  limit        = $Limit
}
$dir = Split-Path -Parent $Out
if ($dir -and -not (Test-Path $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }
$result | ConvertTo-Json -Depth 6 | Out-File -FilePath $Out -Encoding UTF8

if ($bad.Count -gt 0) {
  Write-Host ("[link-smoke] checked={0} bad={1} scope_prefix={2}" -f $checked, $bad.Count, $PathPrefix) -ForegroundColor Red
  $i = 0
  foreach ($b in $bad) {
    Write-Host ("    {0} {1} {2}" -f $i, $b.status, $b.url)
    $i++
  }
  exit 2
} else {
  Write-Host ("[link-smoke] checked={0} bad=0 scope_prefix={1}" -f $checked, $PathPrefix) -ForegroundColor Green
  Write-Host "[link-smoke] YEŞİL" -ForegroundColor Green
  exit 0
}
### DOSYA BİTİŞ: smoke_links.ps1

### DOSYA BAŞLANGIÇ: .\\ops\run_suite.ps1
param(
  [string]$BaseUrl      = "http://127.0.0.1:8010",
  [string]$JobsCsv      = "ops/ui_jobs.csv",
  [string]$BaselineDir  = "targets\reference",
  [string]$AlertsDir    = "_otokodlama\alerts",
  [string]$StateTools   = "ops/state_tools.ps1",
  [string]$CsvRunner    = "ops/run_ui_validate_csv.ps1"
)

$ErrorActionPreference = "Stop"
. $StateTools

# Runner
powershell -ExecutionPolicy Bypass -File $CsvRunner -BaseUrl $BaseUrl -JobsCsv $JobsCsv -BaselineDir $BaselineDir -AlertsDir $AlertsDir | Out-Host

# CSV oku
if (-not (Test-Path $JobsCsv)) { throw "Jobs CSV not found: $JobsCsv" }
$rows = Get-Content $JobsCsv | Where-Object { $_ -match '\S' -and -not ($_.Trim().StartsWith('#')) } | ConvertFrom-Csv
if (-not $rows) { throw "CSV boş." }

$allOk = $true
foreach($r in $rows){
  $key = ('' + $r.Key).Trim()
  if ([string]::IsNullOrWhiteSpace($key) -or $key.StartsWith('#')) { continue }

  $outJson = Join-Path "_otokodlama\out" ("{0}_validate.json" -f $key)
  if (-not (Test-Path $outJson)) {
    $cand = Get-ChildItem "_otokodlama\out" -Filter "*$key*validate.json" -ErrorAction SilentlyContinue | Select-Object -First 1
    if ($cand) { $outJson = $cand.FullName }
  }
  if (-not (Test-Path $outJson)) {
    Update-TestResult -Key $key -Status "FAILED" -Metrics @{} -Artifacts @{}
    $allOk = $false
    continue
  }

  $j = Get-Content $outJson -Raw | ConvertFrom-Json
  $status = if ($j.ok) { "PASSED" } else { "FAILED" }

  $lastAuto = $j.results | Where-Object { $_.cmd -eq 'AUTOVALIDATE' } | Select-Object -Last 1
  $recall = if ($lastAuto) { [double]$lastAuto.recall } else { $null }
  $missing = if ($lastAuto) { [int]$lastAuto.missing_count } else { $null }

  $screenshot = Join-Path $BaselineDir ("{0}.png" -f $key)
  $shotPath = ""
  if (Test-Path $screenshot) { $shotPath = $screenshot }

  $art = @{ out_json = $outJson; screenshot = $shotPath }
  $met = @{}
  if ($recall -ne $null) { $met.words_recall = $recall }
  if ($missing -ne $null) { $met.missing_count = $missing }

  Update-TestResult -Key $key -Status $status -Metrics $met -Artifacts $art
  if ($status -ne "PASSED") { $allOk = $false }
}

if ($allOk) {
  Advance-Pipeline -ToStage "open_pr" -Hint "Tüm UI doğrulamaları geçti → PR açılabilir."
  Write-Host "[pipeline] advanced → open_pr" -ForegroundColor Green
} else {
  Advance-Pipeline -ToStage "validate_ui_pages" -Hint "FAILED olan test(ler) var → düzeltmeler uygulayın."
  Write-Host "[pipeline] staying at validate_ui_pages (failures present)" -ForegroundColor Yellow
}
### DOSYA BİTİŞ: run_suite.ps1

### DOSYA BAŞLANGIÇ: .\\ops\run_ui_validate.ps1
param(
  [string]$BaseUrl     = "http://127.0.0.1:8010",
  [string]$BaselineDir = "targets\reference",
  [string]$AlertsDir   = "_otokodlama\alerts"
)

$ErrorActionPreference = "Stop"
$null = New-Item -ItemType Directory -Force -Path "ops\flows",$BaselineDir,"_otokodlama\out",$AlertsDir
$env:BASE_URL = $BaseUrl

# (İdempotent) equipment redirect loop fix
Get-ChildItem ops\flows -Filter *equipment*.flow -ErrorAction SilentlyContinue | ForEach-Object {
  (Get-Content $_.FullName -Raw) `
    -replace 'GOTO\s+/admin/maintenance/equipment/(\s*)$', 'GOTO /admin/maintenance/equipment/_direct/$1' `
  | Set-Content -LiteralPath $_.FullName -Encoding UTF8
}

function New-UiBaselineAndValidate {
param(
  [Parameter(Mandatory=$true)][string]$Key,     # ex: equipment_ui_list
  [Parameter(Mandatory=$true)][string]$Url,     # ex: /admin/maintenance/equipment/_direct/
  [string]$WaitSelector = 'css=:is(form#changelist-form,table#result_list,#content-main,#content,body)',
  [double]$Recall = 0.90,
  [int]$MinTokenLen = 3,
  [switch]$UseOCR,
  [string]$IgnorePatterns = 'csrf,token,\d{2,},page_\d+,id_\d+,ts_\d+'
)
  $baselinePng = Join-Path $BaselineDir ("{0}.png" -f $Key)
  $flowBase = "ops\flows\_{0}_make_baseline.flow" -f $Key
  $flowVal  = "ops\flows\{0}_validate.flow" -f $Key

@"
COMMENT make baseline ($Key)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
GOTO $Url
WAIT SELECTOR $WaitSelector
SCREENSHOT $baselinePng
"@ | Set-Content -LiteralPath $flowBase -Encoding UTF8

  $live = if($UseOCR){"dom+ocr"} else {"dom"}
@"
COMMENT validate $Key ($live)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
GOTO $Url
WAIT SELECTOR $WaitSelector
AUTOVALIDATE key=$Key baseline=$baselinePng words_recall=$Recall live_source=$live alert_dir=$AlertsDir min_token_len=$MinTokenLen ignore_numbers=yes ignore_patterns=$IgnorePatterns
"@ | Set-Content -LiteralPath $flowVal -Encoding UTF8

  $outA = "_otokodlama\out\_{0}_make_baseline.json" -f $Key
  $outB = "_otokodlama\out\{0}_validate.json" -f $Key

  Write-Host "[run] BASELINE → $Key" -ForegroundColor Cyan
  python tools\pw_flow.py --steps $flowBase --out $outA | Out-Host

  Write-Host "[run] VALIDATE → $Key ($live)" -ForegroundColor Yellow
  python tools\pw_flow.py --steps $flowVal  --out $outB | Out-Host

  $j = Get-Content $outB -Raw | ConvertFrom-Json
  $lastAuto = $j.results | Where-Object { $_.cmd -eq 'AUTOVALIDATE' } | Select-Object -Last 1
  [pscustomobject]@{
    key           = $Key
    ok            = $j.ok
    recall        = if($lastAuto){ '{0:N2}' -f [double]$lastAuto.recall } else {''}
    missing_count = if($lastAuto){ $lastAuto.missing_count } else {''}
    out_json      = $outB
  }
}

# ====== TEST SETİ ======
$jobs = @(
  @{ Key="equipment_ui_list";   Url="/admin/maintenance/equipment/_direct/";  OCR=$false },
  @{ Key="calibration_ui_list"; Url="/admin/maintenance/calibration/_direct/";OCR=$false },
  @{ Key="admin_home_fast";     Url="/admin/";                                OCR=$false }
  # İstediğin yeni modülü aşağıya sadece Key/Url girerek ekle:
  # @{ Key="bakim_plan_ui_list"; Url="/admin/maintenance/plan/_direct/"; OCR=$false }
)

$results = foreach($j in $jobs){
  if($j.OCR){ New-UiBaselineAndValidate -Key $j.Key -Url $j.Url -UseOCR }
  else      { New-UiBaselineAndValidate -Key $j.Key -Url $j.Url }
}

"`n=== SUMMARY ==="
$results | Format-Table key,ok,recall,missing_count,out_json -AutoSize

if (Test-Path (Join-Path $AlertsDir 'alerts_log.csv')) {
  "`n=== Alerts (last 10) ==="
  Import-Csv (Join-Path $AlertsDir 'alerts_log.csv') -Delimiter ';' |
    Select-Object ts,key,ok,recall,misses,alert_md |
    Select-Object -Last 10 | Format-Table -AutoSize
}
### DOSYA BİTİŞ: run_ui_validate.ps1

### DOSYA BAŞLANGIÇ: .\\ops\run_ui_validate_csv.ps1
param(
  [string]$BaseUrl     = "http://127.0.0.1:8010",
  [string]$JobsCsv     = "ops/ui_jobs.csv",
  [string]$BaselineDir = "targets\reference",
  [string]$AlertsDir   = "_otokodlama\alerts"
)

$ErrorActionPreference = "Stop"
$null = New-Item -ItemType Directory -Force -Path "ops\flows",$BaselineDir,"_otokodlama\out",$AlertsDir | Out-Null
$env:BASE_URL = $BaseUrl

# İdempotent redirect fix
Get-ChildItem ops\flows -Filter *equipment*.flow -ErrorAction SilentlyContinue | ForEach-Object {
  (Get-Content $_.FullName -Raw) `
    -replace 'GOTO\s+/admin/maintenance/equipment/(\s*)$', 'GOTO /admin/maintenance/equipment/_direct/$1' `
  | Set-Content -LiteralPath $_.FullName -Encoding UTF8
}

function New-UiBaselineAndValidate {
param(
  [Parameter(Mandatory=$true)][string]$Key,
  [Parameter(Mandatory=$true)][string]$Url,
  [string]$WaitSelector = 'css=:is(form#changelist-form,table#result_list,#content-main,#content,body)',
  [double]$Recall = 0.90,
  [int]$MinTokenLen = 3,
  [switch]$UseOCR,
  [string]$IgnorePatterns = 'csrf,token,\d{2,},page_\d+,id_\d+,ts_\d+'
)
  $baselinePng = Join-Path $BaselineDir ("{0}.png" -f $Key)
  $flowBase = "ops\flows\_{0}_make_baseline.flow" -f $Key
  $flowVal  = "ops\flows\{0}_validate.flow" -f $Key

@"
COMMENT make baseline ($Key)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
GOTO $Url
WAIT SELECTOR $WaitSelector
SCREENSHOT $baselinePng
"@ | Set-Content -LiteralPath $flowBase -Encoding UTF8

  $live = if($UseOCR){"dom+ocr"} else {"dom"}
@"
COMMENT validate $Key ($live)
GOTO /admin/login/
WAIT SELECTOR input#id_username
FILL input#id_username admin
FILL input#id_password Admin!2345
CLICK input[type=submit]
WAIT URL CONTAINS /admin/
GOTO $Url
WAIT SELECTOR $WaitSelector
AUTOVALIDATE key=$Key baseline=$baselinePng words_recall=$Recall live_source=$live alert_dir=$AlertsDir min_token_len=$MinTokenLen ignore_numbers=yes ignore_patterns=$IgnorePatterns
"@ | Set-Content -LiteralPath $flowVal -Encoding UTF8

  $outA = "_otokodlama\out\_{0}_make_baseline.json" -f $Key
  $outB = "_otokodlama\out\{0}_validate.json" -f $Key

  Write-Host "[run] BASELINE → $Key" -ForegroundColor Cyan
  python tools\pw_flow.py --steps $flowBase --out $outA | Out-Host

  Write-Host "[run] VALIDATE → $Key ($live)" -ForegroundColor Yellow
  python tools\pw_flow.py --steps $flowVal  --out $outB | Out-Host

  $j = Get-Content $outB -Raw | ConvertFrom-Json
  $lastAuto = $j.results | Where-Object { $_.cmd -eq 'AUTOVALIDATE' } | Select-Object -Last 1
  [pscustomobject]@{
    key           = $Key
    ok            = $j.ok
    recall        = if($lastAuto){ '{0:N2}' -f [double]$lastAuto.recall } else {''}
    missing_count = if($lastAuto){ $lastAuto.missing_count } else {''}
    out_json      = $outB
  }
}

# === CSV oku (yorum/boş satırları atla) ve çalıştır ===
if (-not (Test-Path $JobsCsv)) { throw "Jobs CSV not found: $JobsCsv" }

$rows =
  Get-Content $JobsCsv |
  Where-Object { $_ -match '\S' -and -not ($_.Trim().StartsWith('#')) } |
  ConvertFrom-Csv

$results = foreach($r in $rows){

  # null-safe alanlar
  $key     = ('' + $r.Key).Trim()
  $url     = ('' + $r.Url).Trim()
  $ocrStr  = ('' + $r.OCR).Trim().ToLower()
  $recStr  = ('' + $r.Recall).Trim()
  $minStr  = ('' + $r.MinTokenLen).Trim()
  $sel     = if([string]::IsNullOrWhiteSpace(('' + $r.WaitSelector))) {
               'css=:is(form#changelist-form,table#result_list,#content-main,#content,body)'
             } else { ('' + $r.WaitSelector) }

  if ([string]::IsNullOrWhiteSpace($key) -or $key.StartsWith('#')) { continue }
  if ([string]::IsNullOrWhiteSpace($url)) { continue }

  $ocr = @('yes','true','1','y') -contains $ocrStr

  $rec = 0.90
  $tmpD = 0.0
  if ([double]::TryParse($recStr, [ref]$tmpD)) { $rec = $tmpD }

  $minTL = 3
  $tmpI = 0
  if ([int]::TryParse($minStr, [ref]$tmpI)) { $minTL = $tmpI }

  if($ocr){
    New-UiBaselineAndValidate -Key $key -Url $url -Recall $rec -MinTokenLen $minTL -WaitSelector $sel -UseOCR
  } else {
    New-UiBaselineAndValidate -Key $key -Url $url -Recall $rec -MinTokenLen $minTL -WaitSelector $sel
  }
}

"`n=== SUMMARY ==="
$results | Format-Table key,ok,recall,missing_count,out_json -AutoSize

if (Test-Path (Join-Path $AlertsDir 'alerts_log.csv')) {
  "`n=== Alerts (last 10) ==="
  Import-Csv (Join-Path $AlertsDir 'alerts_log.csv') -Delimiter ';' |
    Select-Object ts,key,ok,recall,misses,alert_md |
    Select-Object -Last 10 | Format-Table -AutoSize
}
### DOSYA BİTİŞ: run_ui_validate_csv.ps1

### DOSYA BAŞLANGIÇ: .\\ops\state_tools.ps1
param(
  # Varsayılan yol, bu dosyanın (ops/) yanına state.json olarak ayarlanır
  [string]$StatePath = ""
)

$ErrorActionPreference = "Stop"

# --- Yol yardımcıları ---
$__ThisFile   = $MyInvocation.MyCommand.Path
$__ScriptRoot = Split-Path -Parent $__ThisFile
if ([string]::IsNullOrWhiteSpace($StatePath)) {
  $StatePath = Join-Path $__ScriptRoot "state.json"
}

function _Is-Hashtable { param($x) return ($x -is [hashtable]) }
function _Is-PSObj     { param($x) return ($x -is [pscustomobject]) }

function _Ensure-Dir {
  param([Parameter(Mandatory=$true)][string]$Path)
  $dir = Split-Path -Parent $Path
  if ($dir -and -not (Test-Path $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }
}

function _Ensure-Prop {
  param($Obj,[string]$Name,$Default=$null)
  if (_Is-Hashtable $Obj) { if (-not $Obj.ContainsKey($Name)) { $Obj[$Name]=$Default }; return }
  if (-not $Obj.PSObject.Properties[$Name]) { Add-Member -InputObject $Obj -MemberType NoteProperty -Name $Name -Value $Default }
}

function _Set-Prop {
  param($Obj,[string]$Name,$Value)
  if (_Is-Hashtable $Obj) { $Obj[$Name]=$Value; return }
  if (-not $Obj.PSObject.Properties[$Name]) { Add-Member -InputObject $Obj -MemberType NoteProperty -Name $Name -Value $Value }
  else { $Obj.$Name = $Value }
}

# Map benzeri alanlara anahtar/değer yaz (Hashtable veya PSCustomObject fark etmeksizin)
function _Map-Set {
  param($Map,[string]$Key,$Value)
  if (_Is-Hashtable $Map) { $Map[$Key] = $Value; return }
  if (-not $Map.PSObject.Properties[$Key]) { Add-Member -InputObject $Map -MemberType NoteProperty -Name $Key -Value $Value }
  else { $Map.$Key = $Value }
}

# Map benzeri alanın anahtarlarını döndür
function _Map-Keys {
  param($Map)
  if (_Is-Hashtable $Map) { return $Map.Keys }
  return ($Map.PSObject.Properties | Select-Object -ExpandProperty Name)
}

function Get-State {
  param([string]$Path = $StatePath)
  try {
    if (Test-Path $Path) {
      $s = Get-Content -LiteralPath $Path -Raw | ConvertFrom-Json
      _Ensure-Prop $s 'project' ''
      _Ensure-Prop $s 'repo' ''
      _Ensure-Prop $s 'pipeline' (@{ stage="validate_ui_pages"; history=@() })
      _Ensure-Prop $s 'tests'    (@{ results=@{}; summary=@{ passed=0; failed=0; last_run="" } })
      _Ensure-Prop $s 'pending_actions' @()
      _Ensure-Prop $s 'last_updated'    ""
      _Ensure-Prop $s.pipeline 'stage'   'validate_ui_pages'
      _Ensure-Prop $s.pipeline 'history' @()
      _Ensure-Prop $s.tests    'results' @{}
      _Ensure-Prop $s.tests    'summary' (@{ passed=0; failed=0; last_run="" })
      _Ensure-Prop $s.tests.summary 'passed'   0
      _Ensure-Prop $s.tests.summary 'failed'   0
      _Ensure-Prop $s.tests.summary 'last_run' ""
      return $s
    }
  } catch { }

  return [pscustomobject]@{
    project=""
    repo=""
    pipeline=@{ stage="validate_ui_pages"; history=@() }
    tests=@{ results=@{}; summary=@{ passed=0; failed=0; last_run="" } }
    pending_actions=@()
    last_updated=""
  }
}

function Save-State {
  param([Parameter(Mandatory=$true)]$State,[string]$Path=$StatePath)
  _Ensure-Prop $State 'last_updated' ""
  _Set-Prop    $State 'last_updated' ((Get-Date).ToString("s"))
  _Ensure-Dir  -Path $Path
  $json = $State | ConvertTo-Json -Depth 20
  [IO.File]::WriteAllText($Path,$json,[Text.UTF8Encoding]::new($false))
}

function Update-TestResult {
  param(
    [Parameter(Mandatory=$true)][string]$Key,
    [ValidateSet("PASSED","FAILED")][string]$Status,
    [hashtable]$Metrics,[hashtable]$Artifacts,
    [string]$StatePathParam = $StatePath
  )
  $st = Get-State -Path $StatePathParam
  _Ensure-Prop $st 'tests' (@{ results=@{}; summary=@{passed=0;failed=0;last_run=""} })
  _Ensure-Prop $st.tests 'results' @{}
  _Ensure-Prop $st.tests 'summary' (@{ passed=0; failed=0; last_run="" })
  if (-not $Metrics)   { $Metrics   = @{} }
  if (-not $Artifacts) { $Artifacts = @{} }

  $entry = @{
    status=$Status; metrics=$Metrics; artifacts=$Artifacts; ts=(Get-Date).ToString("s")
  }
  _Map-Set $st.tests.results $Key $entry

  $passed=0; $failed=0
  foreach($k in (_Map-Keys $st.tests.results)){
    $it = if (_Is-Hashtable $st.tests.results) { $st.tests.results[$k] } else { $st.tests.results.$k }
    if($it.status -eq "PASSED"){$passed++}else{$failed++}
  }
  _Set-Prop $st.tests.summary 'passed'   $passed
  _Set-Prop $st.tests.summary 'failed'   $failed
  _Set-Prop $st.tests.summary 'last_run' ((Get-Date).ToString("s"))

  Save-State -State $st -Path $StatePathParam
}

function Add-PendingAction {
  param(
    [Parameter(Mandatory=$true)][string]$Id,
    [Parameter(Mandatory=$true)][string]$Type,
    [Parameter(Mandatory=$true)][string]$Detail,
    [string]$DueStage="",
    [string]$StatePathParam = $StatePath
  )
  $st = Get-State -Path $StatePathParam
  _Ensure-Prop $st 'pending_actions' @()
  $st.pending_actions += @{ id=$Id; type=$Type; detail=$Detail; due_stage=$DueStage; ts=(Get-Date).ToString("s"); status="open" }
  Save-State -State $st -Path $StatePathParam
}

function Advance-Pipeline {
  param([Parameter(Mandatory=$true)][string]$ToStage,[string]$Hint="",[string]$StatePathParam=$StatePath)
  $st = Get-State -Path $StatePathParam
  _Ensure-Prop $st 'pipeline' (@{ stage="validate_ui_pages"; history=@() })
  _Ensure-Prop $st.pipeline 'stage' "validate_ui_pages"
  _Ensure-Prop $st.pipeline 'history' @()
  $st.pipeline.history += @{ from=$st.pipeline.stage; to=$ToStage; hint=$Hint; ts=(Get-Date).ToString("s") }
  _Set-Prop $st.pipeline 'stage' $ToStage
  Save-State -State $st -Path $StatePathParam
}
### DOSYA BİTİŞ: state_tools.ps1

### DOSYA BAŞLANGIÇ: .\\ops\smoke_links_wrapper.ps1
param(
  [string]$Base,
  [string]$Start,
  [string]$Out,
  [int]   $Depth,
  [int]   $Limit,
  [string]$PathPrefix,
  [int]   $Timeout,
  [string]$OkRedirectTo
)
& "$PSScriptRoot\smoke_links.ps1" `
  -Base $Base `
  -Start $Start `
  -Out $Out `
  -Depth $Depth `
  -Limit $Limit `
  -PathPrefix $PathPrefix `
  -Timeout $Timeout `
  -OkRedirectTo $OkRedirectTo
### DOSYA BİTİŞ: smoke_links_wrapper.ps1

### DOSYA BAŞLANGIÇ: .\\ops\_spawn.ps1
param(
  [Parameter(Mandatory=$true)][string]$File,
  [string[]]$Args = @(),
  [int]$HardTimeoutSec = 300,
  [int]$HeartbeatSec   = 5
)

# Argümanları tek stringe dönüştür (içinde boşluk olanları tırnakla)
function Join-Args([string[]]$arr){
  $arr | ForEach-Object {
    if ($_ -match '\s' -and $_ -notmatch '^".*"$') { '"' + $_ + '"' } else { $_ }
  } | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne '' } | ForEach-Object { $_ } -join ' '
}

$psi = New-Object System.Diagnostics.ProcessStartInfo
$psi.FileName               = $File
$psi.Arguments              = (Join-Args $Args)
$psi.UseShellExecute        = $false
$psi.RedirectStandardOutput = $true
$psi.RedirectStandardError  = $true
$psi.CreateNoWindow         = $true

$p = New-Object System.Diagnostics.Process
$p.StartInfo = $psi
[void]$p.Start()

$sw = [System.Diagnostics.Stopwatch]::StartNew()
$lastBeat = 0

while(-not $p.HasExited){
  while(-not $p.StandardOutput.EndOfStream){
    $line = $p.StandardOutput.ReadLine()
    if($line){ Write-Host $line; [Console]::Out.Flush() }
  }
  while(-not $p.StandardError.EndOfStream){
    $eline = $p.StandardError.ReadLine()
    if($eline){ Write-Host $eline -ForegroundColor DarkYellow; [Console]::Out.Flush() }
  }

  Start-Sleep -Milliseconds 50  # hızlandırıldı (100 -> 50)

  if($sw.Elapsed.TotalSeconds -ge $HardTimeoutSec){
    Write-Host "[spawn] HARD TIMEOUT ($HardTimeoutSec s). Killing..." -ForegroundColor Red
    try { $p.Kill() } catch {}
    break
  }

  if([int]$sw.Elapsed.TotalSeconds -ge ($lastBeat + $HeartbeatSec)){
    Write-Host ("[spawn] heartbeat {0}s" -f [int]$sw.Elapsed.TotalSeconds) -ForegroundColor DarkGray
    [Console]::Out.Flush()
    $lastBeat = [int]$sw.Elapsed.TotalSeconds
  }
}
# kuyrukta kalan
if($p){
  try{
    $restOut = $p.StandardOutput.ReadToEnd()
    if($restOut){ Write-Host $restOut; [Console]::Out.Flush() }
  }catch{}
  try{
    $restErr = $p.StandardError.ReadToEnd()
    if($restErr){ Write-Host $restErr -ForegroundColor DarkYellow; [Console]::Out.Flush() }
  }catch{}
}

exit ($p.ExitCode)











### DOSYA BİTİŞ: _spawn.ps1

### DOSYA BAŞLANGIÇ: .\\ops\apply_ai_files.ps1
param(
  [string]$RepoRoot = ".",
  [string]$InboxDir = "ai_inbox",
  [string]$StateTools = "ops/state_tools.ps1",
  [switch]$DryRun
)

$ErrorActionPreference = "Stop"

function Ensure-Module {
  param([string]$Path)
  if (-not (Test-Path $Path)) { throw "Gerekli script bulunamadı: $Path" }
  . $Path
}
function Normalize-TargetPath {
  param([string]$InboxFile)
  $rel = (Resolve-Path -LiteralPath $InboxFile).Path.Substring((Resolve-Path -LiteralPath $InboxDir).Path.Length).TrimStart('\','/')
  $rel = $rel -replace '^[\\/]+',''
  if ($rel.ToLower().EndsWith(".txt")) { $rel = $rel.Substring(0, $rel.Length-4) }
  $rel = $rel -replace '^(root[\\/])',''
  return $rel
}
function New-Directory {
  param([string]$Path)
  $dir = Split-Path -Parent $Path
  if ($dir -and -not (Test-Path $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }
}

Ensure-Module -Path (Join-Path $RepoRoot $StateTools)

$inboxFull = Join-Path $RepoRoot $InboxDir
if (-not (Test-Path $inboxFull)) {
  Write-Host "[apply] Inbox klasörü yok: $InboxDir (atlandı)" -ForegroundColor Yellow
  exit 0
}

$changed = @(); $deleted = @(); $skipped = @()
$txts = Get-ChildItem $inboxFull -Recurse -File -Filter *.txt
if (-not $txts) { Write-Host "[apply] Inbox boş." -ForegroundColor Yellow; exit 0 }

foreach ($f in $txts) {
  $targetRel = Normalize-TargetPath -InboxFile $f.FullName
  $targetAbs = Join-Path $RepoRoot $targetRel
  $raw = Get-Content -LiteralPath $f.FullName -Raw

  if ($raw -match '^\s*#\s*DELETE\s*$') {
    if (Test-Path $targetAbs) {
      if ($DryRun) { Write-Host "[DRY] DELETE $targetRel" -ForegroundColor Yellow }
      else { Remove-Item -LiteralPath $targetAbs -Force; $deleted += $targetRel }
    } else { $skipped += "$targetRel (zaten yok)" }
    continue
  }

  if ([string]::IsNullOrWhiteSpace($raw)) { $skipped += "$targetRel (boş içerik/no-op)"; continue }

  if ($DryRun) { Write-Host "[DRY] WRITE $targetRel" -ForegroundColor Cyan }
  else {
    if (Test-Path $targetAbs) { Copy-Item -LiteralPath $targetAbs "$targetAbs.bak" -Force -ErrorAction SilentlyContinue }
    New-Directory -Path $targetAbs
    [IO.File]::WriteAllText($targetAbs, $raw, [Text.UTF8Encoding]::new($false))
    $changed += $targetRel
  }
}

if (-not $DryRun) {
  foreach ($p in $changed) { Add-PendingAction -Id ("APPLY-" + [Guid]::NewGuid().ToString("N")) -Type "FILE_WRITE"  -Detail $p -DueStage "" }
  foreach ($p in $deleted) { Add-PendingAction -Id ("APPLY-" + [Guid]::NewGuid().ToString("N")) -Type "FILE_DELETE" -Detail $p -DueStage "" }
}

Write-Host "`n=== APPLY SUMMARY ===" -ForegroundColor Green
"{0,-10} {1}" -f "Changed:", ($changed.Count)
"{0,-10} {1}" -f "Deleted:", ($deleted.Count)
"{0,-10} {1}" -f "Skipped:", ($skipped.Count)
if ($changed) { "`n-- Changed files --"; $changed | ForEach-Object { "  - $_" } }
if ($deleted) { "`n-- Deleted files --"; $deleted | ForEach-Object { "  - $_" } }
if ($skipped) { "`n-- Skipped --"; $skipped | ForEach-Object { "  - $_" } }
### DOSYA BİTİŞ: apply_ai_files.ps1

### DOSYA BAŞLANGIÇ: .\\ops\auto_pr.ps1
param(
  [string]$BaseBranch   = "main",
  [string]$Reviewer     = "ozkanrepo1",
  [string]$FeaturePrefix = "feat/auto-",
  [switch]$WaitForMerge,
  [int]$WaitTimeoutSec  = 600
)

$ErrorActionPreference = "Stop"

function Get-RepoSlug {
  $u = (& git remote get-url origin 2>$null)
  if (-not $u) { throw "origin remote yok" }
  if ($u -match 'github\.com[:/](.+?)(?:\.git)?$') { return $Matches[1] }
  throw "repo slug çözülemedi: $u"
}

# 0) Hazırlık
$slug   = Get-RepoSlug
$owner  = $slug.Split('/')[0]
$ts     = (Get-Date -Format "yyyyMMdd-HHmmss")
$branch = "$FeaturePrefix$ts"

# 1) Yeni feature dalı + küçük fark
git checkout -b $branch | Out-Null
New-Item -ItemType Directory -Force ".github" | Out-Null
"trigger $(Get-Date -Format s)" | Set-Content ".github\pr-bumper.md"
git add ".github\pr-bumper.md"
git commit -m "chore: auto bump for PR ($branch)" | Out-Null

# 2) Pipeline'ı feature dalına çalıştır (main'e push ETMEZ)
powershell -ExecutionPolicy Bypass -File "ops\pipeline_local.ps1" `
  -BaseUrl "http://127.0.0.1:8010" `
  -Branch  $branch `
  -BaseBranch $BaseBranch

# 3) Feature dalını push et
git push -u origin $branch

# 4) PR aç (varsa URL döner)
$title = "[auto] $branch"
$body  = "Auto PR"
$out = & gh pr create --title $title --body $body --base $BaseBranch --head $branch 2>&1
if ($LASTEXITCODE -ne 0) {
  $prUrl = ($out | Select-String -Pattern 'https?://github\.com/.+?/pull/\d+' | Select-Object -First 1).Matches.Value
  if (-not $prUrl) { throw "PR oluşturulamadı: $out" }
} else {
  $prUrl = ($out | Select-String -Pattern 'https?://github\.com/.+?/pull/\d+' | Select-Object -First 1).Matches.Value
}
Write-Host "[pr] $prUrl" -ForegroundColor Cyan

# 5) PR numarası
$pr = gh pr list --state open --head $branch --json number --jq '.[0].number'

# 6) Label + reviewer + auto-merge
gh label create "ui-tests" --color "5319e7" --description "UI pipeline checks" --force 2>$null | Out-Null
gh pr edit $pr --add-label ui-tests 2>$null | Out-Null
if ($Reviewer) { gh pr edit $pr --add-reviewer $Reviewer 2>$null | Out-Null }

# GH_TOKEN (ör. ozkanrepo1 PAT) bu oturumda set ise otomatik approve dene
if ($env:GH_TOKEN) {
  try { gh pr review $pr --approve | Out-Null } catch {}
}

gh pr merge $pr --squash --auto

# 7) Bekle & temizlik
if ($WaitForMerge) {
  $deadline = (Get-Date).AddSeconds($WaitTimeoutSec)
  do {
    Start-Sleep -Seconds 5
    $state = gh pr view $pr --json state --jq .state
    if ($state -eq "MERGED") { break }
  } while ((Get-Date) -lt $deadline)

  if ($state -eq "MERGED") {
    git checkout $BaseBranch | Out-Null
    git pull --rebase origin $BaseBranch | Out-Null
    git branch -D $branch 2>$null | Out-Null
    git push origin --delete $branch 2>$null | Out-Null
    Write-Host "[done] PR merged & branches cleaned." -ForegroundColor Green
  } else {
    Write-Warning "Merge bekleme süresi aşıldı (hala koşullar tamamlanmamış olabilir)."
  }
} else {
  Write-Host "[note] Auto-merge açık. Koşullar sağlanınca PR kendiliğinden birleşecek." -ForegroundColor Yellow
}
### DOSYA BİTİŞ: auto_pr.ps1

### DOSYA BAŞLANGIÇ: .\\core\mw_admin_canonical.py
# -*- coding: utf-8 -*-
from urllib.parse import urlsplit, urlunsplit, parse_qsl, urlencode
from django.http import HttpResponseRedirect

BLOCK_KEYS = ("_changelist_filters", "preserved_filters", "p")

class AdminEquipmentCanonicalRedirectMiddleware:
    """
    /admin/maintenance/equipment/ GET isteklerini, URL resolver'a gitmeden önce
    sterilize query ile /admin/maintenance/equipment/_direct/ adresine 302 yapar.
    """
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        # Sadece kanonik liste yolu ve GET
        if request.method == "GET" and request.path == "/admin/maintenance/equipment/":
            u = urlsplit(request.get_full_path())
            qs = [(k, v) for (k, v) in parse_qsl(u.query, keep_blank_values=True) if k not in BLOCK_KEYS]
            new_qs = urlencode(qs)
            target = urlunsplit((u.scheme, u.netloc, "/admin/maintenance/equipment/_direct/", new_qs, u.fragment))
            return HttpResponseRedirect(target)
        return self.get_response(request)
### DOSYA BİTİŞ: mw_admin_canonical.py

### DOSYA BAŞLANGIÇ: .\\core\mw_no_append_admin.py
# -*- coding: utf-8 -*-
from django.middleware.common import CommonMiddleware

class NoAppendSlashForAdmin(CommonMiddleware):
    """
    Admin altındaki URL'lerde CommonMiddleware'in APPEND_SLASH yönlendirmesini devre dışı bırakır.
    Diğer tüm yollar için standart davranış korunur.
    """
    def process_request(self, request):
        p = request.path
        # admin altına giriyorsa bu middleware append_slash yapmasın
        if p.startswith("/admin/"):
            return None
        # diğer tüm yollar: standart davranış
        return super().process_request(request)
### DOSYA BİTİŞ: mw_no_append_admin.py

