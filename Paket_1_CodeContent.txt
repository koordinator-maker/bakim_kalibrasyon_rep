### DOSYA BAŞLANGIÇ: .\\tests\e104_create_and_delete_equipment.spec.js
import { test, expect } from '@playwright/test';

const BASE = process.env.BASE_URL || 'http://127.0.0.1:8010';
test.use({ storageState: 'storage/user.json' });
test.setTimeout(45000);

async function goToAdd(page) {
  await page.goto(`${BASE}/admin/maintenance/equipment/add/`, { waitUntil: 'domcontentloaded' });
  if (!/\/add\/?$/.test(page.url())) {
    const addLink = page.locator('a.addlink, .object-tools a[href$="/add/"]');
    if (await addLink.count()) {
      await addLink.first().click();
      await page.waitForLoadState('domcontentloaded');
    }
  }
}

async function ensureOnChangePage(page, ts, primaryText) {
  if (/\/change\/?$/.test(page.url())) return true;

  const msgChange = page.locator('ul.messagelist a[href*="/change/"]');
  if (await msgChange.count()) {
    await msgChange.first().click();
    await page.waitForLoadState('domcontentloaded');
    if (/\/change\/?$/.test(page.url())) return true;
  }

  await page.goto(`${BASE}/admin/maintenance/equipment/`, { waitUntil: 'domcontentloaded' });
  let row = page.locator(`#result_list a:has-text("${ts}")`);
  if (!(await row.count()) && primaryText) {
    row = page.locator(`#result_list a:has-text("${primaryText}")`);
  }
  if (await row.count()) {
    await row.first().click();
    await page.waitForLoadState('domcontentloaded');
    return /\/change\/?$/.test(page.url());
  }
  return false;
}

test('E104 - Equipment oluÅŸtur ve sil (temizlik)', async ({ page }) => {
  await goToAdd(page);

  const form = page.locator('form:has(input[name="_save"])').first();
  await expect(form).toBeVisible();

  const ts = Date.now().toString();
  let primaryText = null;

  for (const sel of ['input[required][type="text"]','input[required]:not([type])','textarea[required]']) {
    const inputs = form.locator(sel);
    for (let i = 0; i < await inputs.count(); i++) {
      const el = inputs.nth(i);
      const name = (await el.getAttribute('name')) || `text${i}`;
      const val = name.toLowerCase().includes('serial') ? `SN-${ts}` : `AUTO-${name}-${ts}`;
      await el.fill(val);
      if (!primaryText) primaryText = val;
    }
  }

  const nums = form.locator('input[required][type="number"]');
  for (let i = 0; i < await nums.count(); i++) await nums.nth(i).fill('0');

  const today = new Date().toISOString().slice(0,10);
  const dates = form.locator('input[required][type="date"]');
  for (let i = 0; i < await dates.count(); i++) await dates.nth(i).fill(today);

  const selects = form.locator('select[required]');
  for (let i = 0; i < await selects.count(); i++) {
    await selects.nth(i).selectOption({ index: 1 }).catch(() => {});
  }

  await form.locator('input[name="_save"]').click();

  const onChange = await ensureOnChangePage(page, ts, primaryText);
  expect(onChange, 'KayÄ±t sonrasÄ± change sayfasÄ±na ulaÅŸÄ±lamadÄ±.').toBeTruthy();

  // Silme sayfasÄ±na git
  const deleteURL = page.url().replace(/change\/?$/, 'delete/');
  await page.goto(deleteURL, { waitUntil: 'domcontentloaded' });

  // YALNIZCA silme onay formu (iÃ§inde name="post" bulunur)
  const delForm = page.locator('#content form:has(input[name="post"])').first();
  await expect(delForm).toBeVisible();

  // Form iÃ§indeki submit
  await delForm.locator('input[type="submit"], button[type="submit"]').first().click();

  await expect(page).toHaveURL(/\/admin\/maintenance\/equipment\/$/);
  await expect(page.locator('ul.messagelist li.success, .success')).toBeVisible();
});
### DOSYA BİTİŞ: e104_create_and_delete_equipment.spec.js

### DOSYA BAŞLANGIÇ: .\\tests\admin-dashboard.spec.js
// tests/admin-dashboard.spec.js
import { test, expect } from "@playwright/test";

test.describe("Admin Dashboard Tests", () => {
    test("should access admin panel", async ({ page }) => {
        const BASE = (process.env.BASE_URL || "http://127.0.0.1:8010").replace(/\/$/, "");

        await page.goto(`${BASE}/admin/`, { waitUntil: "domcontentloaded" });

        // Login sayfas�na redirect olmamal�
        await expect(page).not.toHaveURL(/\/admin\/login/);

        // Admin panel i�eri�i g�rmeli
        await expect(page.getByRole('main')).toBeVisible({ timeout: 5000 });

        console.log("[TEST PASSED] Authenticated admin access verified");
    });

    test("should list users in admin", async ({ page }) => {
        const BASE = (process.env.BASE_URL || "http://127.0.0.1:8010").replace(/\/$/, "");

        await page.goto(`${BASE}/admin/accounts/customuser/`, { waitUntil: "domcontentloaded" });

        // User listesi tablosu g�r�nmeli
        await expect(page.getByRole('main')).toBeVisible({ timeout: 5000 });

        console.log("[TEST PASSED] User list accessible");
    });
});







### DOSYA BİTİŞ: admin-dashboard.spec.js

### DOSYA BAŞLANGIÇ: .\\playwright.config.js
import { defineConfig, devices } from '@playwright/test';
export default defineConfig({
  testDir: 'tests',
  reporter: [['html', { open: 'never' }]],
  use: { baseURL: process.env.BASE_URL || 'http://127.0.0.1:8010' },
  projects: [
    { name: 'setup', testMatch: /_setup\.spec\.js/ },
    {
      name: 'chromium',
      testIgnore: /_setup\.spec\.js/,
      use: { ...devices['Desktop Chrome'], storageState: 'storage/user.json' },
      dependencies: ['setup'],
    },
  ],
});
### DOSYA BİTİŞ: playwright.config.js

### DOSYA BAŞLANGIÇ: .\\tests\_setup.spec.js
import { test, expect } from '@playwright/test';
import fs from 'fs';

const base = process.env.BASE_URL || 'http://127.0.0.1:8010';
const user = process.env.E2E_USER || 'admin';
const pass = process.env.E2E_PASS || 'admin';
const storageFile = 'storage/user.json';

test.setTimeout(60_000);

test('login state -> storage/user.json', async ({ page, context }) => {
  // Varsa açık session'ı temizle
  await page.goto(`${base}/admin/logout/`).catch(() => {});
  // Admin login
  await page.goto(`${base}/admin/login/?next=/admin/`, { waitUntil: 'domcontentloaded' });

  const userInput = page.locator('#id_username').or(page.getByLabel(/Username|Kullanıcı adı/i));
  await expect(userInput).toBeVisible({ timeout: 15_000 });
  await userInput.fill(user);

  const passInput = page.locator('#id_password').or(page.getByLabel(/Password|Parola|Şifre/i));
  await expect(passInput).toBeVisible();
  await passInput.fill(pass);

  await Promise.all([
    page.waitForNavigation(),
    page.getByRole('button', { name: /log in|giriş|oturum/i }).or(page.locator('input[type=submit]')).click(),
  ]);

  await expect(page).toHaveURL(new RegExp(`${base.replace(/\//g, '\\/')}/admin/?`));

  fs.mkdirSync('storage', { recursive: true });
  await context.storageState({ path: storageFile });
});
### DOSYA BİTİŞ: _setup.spec.js

### DOSYA BAŞLANGIÇ: .\\tests\e102_add_form.spec.js
import { test, expect } from '@playwright/test';

const BASE = process.env.BASE_URL || 'http://127.0.0.1:8010';
test.use({ storageState: 'storage/user.json' });
test.setTimeout(20000);

test('E102 - Equipment Ekleme Formuna Erişim', async ({ page }) => {
  await page.goto(`${BASE}/admin/maintenance/equipment/add/`, { waitUntil: 'domcontentloaded' });

  // Listeye düşersek "Add" linkiyle gir
  if (!/\/add\/?$/.test(page.url())) {
    const addLink = page.locator('a.addlink, .object-tools a[href$="/add/"]');
    if (await addLink.count()) {
      await addLink.first().click();
      await page.waitForLoadState('domcontentloaded');
    }
  }

  // Doğru form: _save butonu olan form
  const form = page.locator('form:has(input[name="_save"])').first();
  await expect(form, 'Admin add form görünür olmalı').toBeVisible();

  // Birincil kaydet butonu
  await expect(form.locator('input[name="_save"]')).toBeVisible();

  // Başlık (bilgi amaçlı)
  await form.waitFor({ state: 'visible' });
  const h1 = await page.locator('#content h1, main h1, h1').first().textContent().catch(()=>null);
  console.log('H1:', h1?.trim());
});
### DOSYA BİTİŞ: e102_add_form.spec.js

### DOSYA BAŞLANGIÇ: .\\tests\e103_create_equipment.spec.js
import { test, expect } from '@playwright/test';

const BASE = process.env.BASE_URL || 'http://127.0.0.1:8010';
test.use({ storageState: 'storage/user.json' });
test.setTimeout(45000);

test('E103 - Equipment Kaydetme (dinamik doldurma)', async ({ page }) => {
  await page.goto(`${BASE}/admin/maintenance/equipment/add/`, { waitUntil: 'domcontentloaded' });

  // Gerekirse listeden "Add" ile içeri gir
  if (!/\/add\/?$/.test(page.url())) {
    const addLink = page.locator('a.addlink, .object-tools a[href$="/add/"]');
    if (await addLink.count()) {
      await addLink.first().click();
      await page.waitForLoadState('domcontentloaded');
    }
  }

  const form = page.locator('form:has(input[name="_save"])').first();
  await expect(form).toBeVisible();

  const ts = Date.now().toString();

  // Metin alanları (required)
  for (const sel of [
    'input[required][type="text"]',
    'input[required]:not([type])',
    'textarea[required]'
  ]) {
    const inputs = form.locator(sel);
    const n = await inputs.count();
    for (let i = 0; i < n; i++) {
      const el = inputs.nth(i);
      const name = (await el.getAttribute('name')) || `text${i}`;
      const val = name.toLowerCase().includes('serial') ? `SN-${ts}` : `AUTO-${name}-${ts}`;
      await el.fill(val);
    }
  }

  // Number
  const nums = form.locator('input[required][type="number"]');
  for (let i = 0; i < await nums.count(); i++) {
    await nums.nth(i).fill('0');
  }

  // Tarih (HTML5 date)
  const today = new Date().toISOString().slice(0,10);
  const dates = form.locator('input[required][type="date"]');
  for (let i = 0; i < await dates.count(); i++) {
    await dates.nth(i).fill(today);
  }

  // Select (first non-empty option)
  const selects = form.locator('select[required]');
  for (let i = 0; i < await selects.count(); i++) {
    const sel = selects.nth(i);
    // index:1 genelde ilk geçerli seçenek
    await sel.selectOption({ index: 1 }).catch(()=>{});
  }

  // Kaydet
  await form.locator('input[name="_save"]').click();

  // Başarı doğrulama: /change/ URL'i veya başarı mesajı
  const urlOk = page.waitForURL(/\/equipment\/\d+\/change\/$/, { timeout: 8000 }).catch(()=>null);
  const msgOk = page.locator('ul.messagelist li.success, .success').first();
  await Promise.race([
    urlOk,
    msgOk.waitFor({ state: 'visible', timeout: 8000 }).catch(()=>null)
  ]);

  // En az biri doğrulansın
  const inChange = /\/equipment\/\d+\/change\/$/.test(page.url());
  const hasMsg = await msgOk.isVisible().catch(()=>false);
  expect(inChange || hasMsg, 'Kayıt sonrası change sayfası veya başarı mesajı beklenirdi.').toBeTruthy();
});
### DOSYA BİTİŞ: e103_create_equipment.spec.js

### DOSYA BAŞLANGIÇ: .\\tests\e102_add_form_debug.spec.js
import { test, expect } from '@playwright/test';

const BASE = process.env.BASE_URL || 'http://127.0.0.1:8010';
test.use({ storageState: 'storage/user.json' });
test.setTimeout(30000);

test('E102 - Equipment Ekleme Formuna Erişim (debug)', async ({ page }) => {
  const addURL = `${BASE}/admin/maintenance/equipment/add/`;
  const resp = await page.goto(addURL, { waitUntil: 'domcontentloaded' });
  console.log('>>> nav status:', resp?.status(), 'final:', resp?.url());
  console.log('>>> url now:', page.url());

  // Listeye düşersek Add linkinden içeri gir
  if (!/\/add\/?$/.test(page.url())) {
    const addLink = page.locator('a.addlink, .object-tools a[href$="/add/"]');
    if (await addLink.count()) {
      await addLink.first().click();
      await page.waitForLoadState('domcontentloaded');
    }
  }

  // Doğru form: _save butonunu içeren form
  const form = page.locator('form:has(input[name="_save"])').first();
  const count = await form.count();
  console.log('>>> form(has _save) count:', count);
  await expect(form, 'Admin add form görünür olmalı').toBeVisible();

  const saveBtn = form.locator('input[name="_save"]');
  await expect(saveBtn).toBeVisible();

  const h1 = (await page.locator('#content h1, main h1, h1').first().textContent().catch(()=>null))?.trim();
  console.log('>>> h1:', h1);
});
### DOSYA BİTİŞ: e102_add_form_debug.spec.js

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\ensure_admin.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.contrib.auth import get_user_model
U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True
u.set_password("admin123!"); u.save()
print("OK admin user:", u.username, u.is_superuser, u.is_staff)
### DOSYA BİTİŞ: ensure_admin.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\ensure_admin.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.contrib.auth import get_user_model
U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True
u.set_password("admin123!"); u.save()
print("OK admin user:", u.username, u.is_superuser, u.is_staff)
### DOSYA BİTİŞ: ensure_admin.py

### DOSYA BAŞLANGIÇ: .\\maintenance\management\commands\dedupe_serials.py
from django.core.management.base import BaseCommand
from django.db import transaction
from maintenance.models import Equipment

MAX_LEN = 120
SUFFIX_DUP = "__DUP__{id}"
SUFFIX_EMPTY = "__EMPTY__{id}"

def _safe_unique_value(original: str, suffix: str) -> str:
    base = (original or "")
    room = MAX_LEN - len(suffix)
    base = base[:room] if room > 0 else ""
    return (base + suffix)[:MAX_LEN]

class Command(BaseCommand):
    help = "Finds duplicate/empty Equipment.serial_number values and makes them unique by appending a suffix. "\
           "Run with --commit to apply changes."

    def add_arguments(self, parser):
        parser.add_argument("--commit", action="store_true", help="Apply changes (otherwise dry-run).")

    def handle(self, *args, **opts):
        # Grupla (case-insensitive), boşlar tek grupta
        by_norm = {}
        qs = Equipment.objects.all().order_by("id")
        for e in qs:
            s = (e.serial_number or "")
            norm = s.strip().lower()
            key = norm if norm else "__EMPTY__"
            by_norm.setdefault(key, []).append((e.id, s))

        dupe_groups = {k: v for k, v in by_norm.items() if len(v) > 1}
        self.stdout.write(f"Duplicate groups: {len(dupe_groups)}")

        changes = []
        for key, rows in dupe_groups.items():
            # ilki korunur
            keeper_id, keeper_val = rows[0]
            for (pk, val) in rows[1:]:
                if key == "__EMPTY__":
                    new_val = _safe_unique_value("", SUFFIX_EMPTY.format(id=pk))
                else:
                    new_val = _safe_unique_value(val, SUFFIX_DUP.format(id=pk))
                # çakışma kontrolü
                if Equipment.objects.filter(serial_number=new_val).exclude(pk=pk).exists():
                    new_val = _safe_unique_value(val, SUFFIX_DUP.format(id=pk) + "_X")
                changes.append((pk, val, new_val))

        self.stdout.write(f"Rows to change: {len(changes)}")
        if not opts["commit"]:
            for pk, old, new in changes[:20]:
                self.stdout.write(f" [dry-run] id={pk} '{old}' -> '{new}'")
            if len(changes) > 20:
                self.stdout.write(f" ...(+{len(changes)-20} more)")
            self.stdout.write(self.style.WARNING("Dry-run complete. Use --commit to apply."))
            return

        # commit
        with transaction.atomic():
            for pk, old, new in changes:
                Equipment.objects.filter(pk=pk).update(serial_number=new)
        self.stdout.write(self.style.SUCCESS(f"Applied {len(changes)} updates."))
### DOSYA BİTİŞ: dedupe_serials.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\_smoke_for_bak.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib.auth import get_user_model
from django.test import Client
from maintenance.models import Equipment
from django.contrib.admin.templatetags import admin_urls
from django.urls import reverse

U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff=True; u.is_superuser=True; u.set_password("admin123!"); u.save()

c = Client()
# login sayfasına gidip giriş yap
c.get("/admin/")
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

cl  = reverse(admin_urls.admin_urlname(Equipment._meta, "changelist"))
add = reverse(admin_urls.admin_urlname(Equipment._meta, "add"))

ok = (c.get(reverse("admin:index")).status_code == 200
      and c.get(cl).status_code == 200
      and c.get(add).status_code == 200)
print("OK" if ok else "FAIL")
### DOSYA BİTİŞ: _smoke_for_bak.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\_smoke_for_bak.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib.auth import get_user_model
from django.test import Client
from maintenance.models import Equipment
from django.contrib.admin.templatetags import admin_urls
from django.urls import reverse

U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff=True; u.is_superuser=True; u.set_password("admin123!"); u.save()

c = Client()
# login sayfasına gidip giriş yap
c.get("/admin/")
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

cl  = reverse(admin_urls.admin_urlname(Equipment._meta, "changelist"))
add = reverse(admin_urls.admin_urlname(Equipment._meta, "add"))

ok = (c.get(reverse("admin:index")).status_code == 200
      and c.get(cl).status_code == 200
      and c.get(add).status_code == 200)
print("OK" if ok else "FAIL")
### DOSYA BİTİŞ: _smoke_for_bak.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\admin_auth_walk.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.urls import resolve, Resolver404
for p in ["/admin/","/admin/maintenance/equipment/","/admin/maintenance/equipment/add/"]:
    try:
        m = resolve(p)
        print(p, "-> OK:", m.func.__module__)
    except Resolver404:
        print(p, "-> 404 (pattern yok)")
### DOSYA BİTİŞ: admin_auth_walk.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_auth_walk.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.urls import resolve, Resolver404
for p in ["/admin/","/admin/maintenance/equipment/","/admin/maintenance/equipment/add/"]:
    try:
        m = resolve(p)
        print(p, "-> OK:", m.func.__module__)
    except Resolver404:
        print(p, "-> 404 (pattern yok)")
### DOSYA BİTİŞ: admin_auth_walk.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\admin_auth_walk.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.urls import resolve, Resolver404
for p in ["/admin/","/admin/maintenance/equipment/","/admin/maintenance/equipment/add/"]:
    try:
        m = resolve(p)
        print(p, "-> OK:", m.func.__module__)
    except Resolver404:
        print(p, "-> 404 (pattern yok)")
### DOSYA BİTİŞ: admin_auth_walk.py

### DOSYA BAŞLANGIÇ: .\\maintenance\tests\__init__.py
### DOSYA BİTİŞ: __init__.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\maintenance\tests\__init__.py
### DOSYA BİTİŞ: __init__.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\maintenance\tests\__init__.py
### DOSYA BİTİŞ: __init__.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\maintenance\tests\test_admin_smoke.py
from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from django.urls import reverse
from maintenance.models import Equipment

class AdminSmokeTest(TestCase):
    def setUp(self):
        U = get_user_model()
        u, _ = U.objects.get_or_create(
            username="admin",
            defaults={"email": "admin@example.com", "is_staff": True, "is_superuser": True},
        )
        u.is_staff = True
        u.is_superuser = True
        u.set_password("admin123!")
        u.save()
        self.client = Client()
        self.client.force_login(u)

    def test_admin_equipment_pages(self):
        # index
        self.assertEqual(self.client.get(reverse("admin:index")).status_code, 200)

        # model URL'leri
        cl  = reverse(admin_urlname(Equipment._meta, "changelist"))
        add = reverse(admin_urlname(Equipment._meta, "add"))

        self.assertEqual(self.client.get(cl).status_code, 200, cl)
        self.assertEqual(self.client.get(add).status_code, 200, add)
### DOSYA BİTİŞ: test_admin_smoke.py

### DOSYA BAŞLANGIÇ: .\\maintenance\tests\test_admin_smoke.py
from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from django.urls import reverse
from maintenance.models import Equipment

class AdminSmokeTest(TestCase):
    def setUp(self):
        U = get_user_model()
        u, _ = U.objects.get_or_create(
            username="admin",
            defaults={"email": "admin@example.com", "is_staff": True, "is_superuser": True},
        )
        u.is_staff = True
        u.is_superuser = True
        u.set_password("admin123!")
        u.save()
        self.client = Client()
        self.client.force_login(u)

    def test_admin_equipment_pages(self):
        # index
        self.assertEqual(self.client.get(reverse("admin:index")).status_code, 200)

        # model URL'leri
        cl  = reverse(admin_urlname(Equipment._meta, "changelist"))
        add = reverse(admin_urlname(Equipment._meta, "add"))

        self.assertEqual(self.client.get(cl).status_code, 200, cl)
        self.assertEqual(self.client.get(add).status_code, 200, add)
### DOSYA BİTİŞ: test_admin_smoke.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\maintenance\tests\test_admin_smoke.py
from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from django.urls import reverse
from maintenance.models import Equipment

class AdminSmokeTest(TestCase):
    def setUp(self):
        U = get_user_model()
        u, _ = U.objects.get_or_create(
            username="admin",
            defaults={"email": "admin@example.com", "is_staff": True, "is_superuser": True},
        )
        u.is_staff = True
        u.is_superuser = True
        u.set_password("admin123!")
        u.save()
        self.client = Client()
        self.client.force_login(u)

    def test_admin_equipment_pages(self):
        # index
        self.assertEqual(self.client.get(reverse("admin:index")).status_code, 200)

        # model URL'leri
        cl  = reverse(admin_urlname(Equipment._meta, "changelist"))
        add = reverse(admin_urlname(Equipment._meta, "add"))

        self.assertEqual(self.client.get(cl).status_code, 200, cl)
        self.assertEqual(self.client.get(add).status_code, 200, add)
### DOSYA BİTİŞ: test_admin_smoke.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_smoke_authed.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from django.contrib.auth import get_user_model
from django.test import Client
from django.urls import reverse
from maintenance.models import Equipment

# Süper kullanıcı garanti
U = get_user_model()
u, _ = U.objects.get_or_create(
    username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True}
)
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

# Login + kontroller
c = Client()
c.force_login(u)  # login formuna post atmaya gerek yok, direkt oturum aç
print("admin:index ->", c.get(reverse("admin:index")).status_code)

nm_cl  = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
cl_url  = reverse(nm_cl)
add_url = reverse(nm_add)

r1 = c.get(cl_url)
r2 = c.get(add_url)
print("CL  status:", r1.status_code, cl_url)
print("ADD status:", r2.status_code, add_url)

# Basit bir içerik işareti (isteğe bağlı)
print("Has 'Equipment' in CL page?:", "Equipment" in r1.content.decode("utf-8", "ignore"))
### DOSYA BİTİŞ: admin_smoke_authed.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\admin_smoke_authed.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from django.contrib.auth import get_user_model
from django.test import Client
from django.urls import reverse
from maintenance.models import Equipment

# Süper kullanıcı garanti
U = get_user_model()
u, _ = U.objects.get_or_create(
    username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True}
)
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

# Login + kontroller
c = Client()
c.force_login(u)  # login formuna post atmaya gerek yok, direkt oturum aç
print("admin:index ->", c.get(reverse("admin:index")).status_code)

nm_cl  = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
cl_url  = reverse(nm_cl)
add_url = reverse(nm_add)

r1 = c.get(cl_url)
r2 = c.get(add_url)
print("CL  status:", r1.status_code, cl_url)
print("ADD status:", r2.status_code, add_url)

# Basit bir içerik işareti (isteğe bağlı)
print("Has 'Equipment' in CL page?:", "Equipment" in r1.content.decode("utf-8", "ignore"))
### DOSYA BİTİŞ: admin_smoke_authed.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\admin_smoke_authed.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from django.contrib.auth import get_user_model
from django.test import Client
from django.urls import reverse
from maintenance.models import Equipment

# Süper kullanıcı garanti
U = get_user_model()
u, _ = U.objects.get_or_create(
    username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True}
)
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

# Login + kontroller
c = Client()
c.force_login(u)  # login formuna post atmaya gerek yok, direkt oturum aç
print("admin:index ->", c.get(reverse("admin:index")).status_code)

nm_cl  = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
cl_url  = reverse(nm_cl)
add_url = reverse(nm_add)

r1 = c.get(cl_url)
r2 = c.get(add_url)
print("CL  status:", r1.status_code, cl_url)
print("ADD status:", r2.status_code, add_url)

# Basit bir içerik işareti (isteğe bağlı)
print("Has 'Equipment' in CL page?:", "Equipment" in r1.content.decode("utf-8", "ignore"))
### DOSYA BİTİŞ: admin_smoke_authed.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\admin_smoke_autodiscover.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from django.contrib.auth import get_user_model
from django.urls import reverse, NoReverseMatch
from django.test import Client
from maintenance.models import Equipment

print("System check identified no issues (0 silenced).")
print("admin:index ->", reverse("admin:index"))
print("admin:login ->", reverse("admin:login"))
try:
    print("admin:app_list(maintenance) ->", reverse("admin:app_list", kwargs={"app_label":"maintenance"}))
except NoReverseMatch as e:
    print("WARN app_list:", e)

nm_cl  = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
print(admin_urlname(Equipment._meta, "changelist"), "->", reverse(nm_cl))
print(admin_urlname(Equipment._meta, "add"),        "->", reverse(nm_add))

U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

c = Client()
print("CL  status:", c.get(reverse(nm_cl)).status_code, reverse(nm_cl))
print("ADD status:", c.get(reverse(nm_add)).status_code, reverse(nm_add))
### DOSYA BİTİŞ: admin_smoke_autodiscover.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_smoke_autodiscover.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from django.contrib.auth import get_user_model
from django.urls import reverse, NoReverseMatch
from django.test import Client
from maintenance.models import Equipment

print("System check identified no issues (0 silenced).")
print("admin:index ->", reverse("admin:index"))
print("admin:login ->", reverse("admin:login"))
try:
    print("admin:app_list(maintenance) ->", reverse("admin:app_list", kwargs={"app_label":"maintenance"}))
except NoReverseMatch as e:
    print("WARN app_list:", e)

nm_cl  = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
print(admin_urlname(Equipment._meta, "changelist"), "->", reverse(nm_cl))
print(admin_urlname(Equipment._meta, "add"),        "->", reverse(nm_add))

U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

c = Client()
print("CL  status:", c.get(reverse(nm_cl)).status_code, reverse(nm_cl))
print("ADD status:", c.get(reverse(nm_add)).status_code, reverse(nm_add))
### DOSYA BİTİŞ: admin_smoke_autodiscover.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\admin_smoke_autodiscover.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from django.contrib.auth import get_user_model
from django.urls import reverse, NoReverseMatch
from django.test import Client
from maintenance.models import Equipment

print("System check identified no issues (0 silenced).")
print("admin:index ->", reverse("admin:index"))
print("admin:login ->", reverse("admin:login"))
try:
    print("admin:app_list(maintenance) ->", reverse("admin:app_list", kwargs={"app_label":"maintenance"}))
except NoReverseMatch as e:
    print("WARN app_list:", e)

nm_cl  = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
print(admin_urlname(Equipment._meta, "changelist"), "->", reverse(nm_cl))
print(admin_urlname(Equipment._meta, "add"),        "->", reverse(nm_add))

U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

c = Client()
print("CL  status:", c.get(reverse(nm_cl)).status_code, reverse(nm_cl))
print("ADD status:", c.get(reverse(nm_add)).status_code, reverse(nm_add))
### DOSYA BİTİŞ: admin_smoke_autodiscover.py

### DOSYA BAŞLANGIÇ: .\\core\urls.py
from django.contrib import admin
from django.urls import path

# Admin modüllerini (maintenance.admin dahil) kesin olarak yükle
admin.autodiscover()

urlpatterns = [
    path('admin/', admin.site.urls),
]
### DOSYA BİTİŞ: urls.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\core\urls.py
from django.contrib import admin
from django.urls import path

# Admin modüllerini (maintenance.admin dahil) kesin olarak yükle
admin.autodiscover()

urlpatterns = [
    path('admin/', admin.site.urls),
]
### DOSYA BİTİŞ: urls.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-192504\core\urls.py
from django.contrib import admin
from django.urls import path

# Admin modüllerini (maintenance.admin dahil) kesin olarak yükle
admin.autodiscover()

urlpatterns = [
    path('admin/', admin.site.urls),
]
### DOSYA BİTİŞ: urls.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\core\urls.py
from django.contrib import admin
from django.urls import path

# Admin modüllerini (maintenance.admin dahil) kesin olarak yükle
admin.autodiscover()

urlpatterns = [
    path('admin/', admin.site.urls),
]
### DOSYA BİTİŞ: urls.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-192603\core\urls.py
from django.contrib import admin
from django.urls import path

# Admin modüllerini (maintenance.admin dahil) kesin olarak yükle
admin.autodiscover()

urlpatterns = [
    path('admin/', admin.site.urls),
]
### DOSYA BİTİŞ: urls.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\_otokodlama\admin_smoke_final2.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib.auth import get_user_model
from django.test import Client
from maintenance.models import Equipment

# superuser garanti
U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

c = Client()
print("GET /admin/ ->", c.get("/admin/").status_code)
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

cl = f"/admin/{Equipment._meta.app_label}/{Equipment._meta.model_name}/"
ad = f"/admin/{Equipment._meta.app_label}/{Equipment._meta.model_name}/add/"
print("CL:", c.get(cl).status_code, cl)
print("AD:", c.get(ad).status_code, ad)
### DOSYA BİTİŞ: admin_smoke_final2.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_smoke_final2.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib.auth import get_user_model
from django.test import Client
from maintenance.models import Equipment

# superuser garanti
U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

c = Client()
print("GET /admin/ ->", c.get("/admin/").status_code)
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

cl = f"/admin/{Equipment._meta.app_label}/{Equipment._meta.model_name}/"
ad = f"/admin/{Equipment._meta.app_label}/{Equipment._meta.model_name}/add/"
print("CL:", c.get(cl).status_code, cl)
print("AD:", c.get(ad).status_code, ad)
### DOSYA BİTİŞ: admin_smoke_final2.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\_otokodlama\admin_smoke_final2.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib.auth import get_user_model
from django.test import Client
from maintenance.models import Equipment

# superuser garanti
U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

c = Client()
print("GET /admin/ ->", c.get("/admin/").status_code)
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

cl = f"/admin/{Equipment._meta.app_label}/{Equipment._meta.model_name}/"
ad = f"/admin/{Equipment._meta.app_label}/{Equipment._meta.model_name}/add/"
print("CL:", c.get(cl).status_code, cl)
print("AD:", c.get(ad).status_code, ad)
### DOSYA BİTİŞ: admin_smoke_final2.py

### DOSYA BAŞLANGIÇ: .\\maintenance\admin.py
from django.contrib import admin
from .models import Equipment

@admin.register(Equipment)
class EquipmentAdmin(admin.ModelAdmin):
    list_display = ("id", "name", "serial_number")
    search_fields = ("name", "serial_number")
### DOSYA BİTİŞ: admin.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-192603\maintenance\admin.py
from django.contrib import admin
from .models import Equipment

@admin.register(Equipment)
class EquipmentAdmin(admin.ModelAdmin):
    list_display = ("id", "name", "serial_number")
    search_fields = ("name", "serial_number")
### DOSYA BİTİŞ: admin.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-225814\maintenance\admin.py
from django.contrib import admin
from .models import Equipment

@admin.register(Equipment)
class EquipmentAdmin(admin.ModelAdmin):
    list_display = ("id", "name", "serial_number")
    search_fields = ("name", "serial_number")
### DOSYA BİTİŞ: admin.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-193207\maintenance\admin.py
from django.contrib import admin
from .models import Equipment

@admin.register(Equipment)
class EquipmentAdmin(admin.ModelAdmin):
    list_display = ("id", "name", "serial_number")
    search_fields = ("name", "serial_number")
### DOSYA BİTİŞ: admin.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251005-192504\maintenance\admin.py
from django.contrib import admin
from .models import Equipment

@admin.register(Equipment)
class EquipmentAdmin(admin.ModelAdmin):
    list_display = ("id", "name", "serial_number")
    search_fields = ("name", "serial_number")
### DOSYA BİTİŞ: admin.py

