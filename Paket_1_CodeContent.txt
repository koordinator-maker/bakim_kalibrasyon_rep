### DOSYA BAŞLANGIÇ: .\\tests\admin-dashboard.spec.js
// tests/admin-dashboard.spec.js
import { test, expect } from "@playwright/test";

test.describe("Admin Dashboard Tests", () => {
    test("should access admin panel", async ({ page }) => {
        const BASE = (process.env.BASE_URL || "http://127.0.0.1:8010").replace(/\/$/, "");

        await page.goto(`${BASE}/admin/`, { waitUntil: "domcontentloaded" });

        // Login sayfasına redirect olmamalı
        await expect(page).not.toHaveURL(/\/admin\/login/);

        // Admin panel içeriği görmeli
        await expect(page.locator("text=Site administration, text=Django administration")).toBeVisible({ timeout: 5000 });

        console.log("[TEST PASSED] Authenticated admin access verified");
    });

    test("should list users in admin", async ({ page }) => {
        const BASE = (process.env.BASE_URL || "http://127.0.0.1:8010").replace(/\/$/, "");

        await page.goto(`${BASE}/admin/accounts/customuser/`, { waitUntil: "domcontentloaded" });

        // User listesi tablosu görünmeli
        await expect(page.locator("#result_list, .results")).toBeVisible({ timeout: 5000 });

        console.log("[TEST PASSED] User list accessible");
    });
});
### DOSYA BİTİŞ: admin-dashboard.spec.js

### DOSYA BAŞLANGIÇ: .\\tests\tasks.spec.js
// tests/tasks.spec.js
// - Her testte beep
// - job_definition: open:/path | expect:#sel | text:"..." | (design_ref varsa pixelmatch)
// - Metin kontrolü: rakamlar yok sayılır; %90 kapsama
const { test, expect } = require("@playwright/test");
const fs   = require("fs");
const path = require("path");
let PNG, pixelmatch;

const BASE = process.env.BASE_URL || "http://127.0.0.1:8010";

// Tüm testlere auth state uygula (setup ta üretildi)
test.use({ storageState: "storage/user.json" });

// ---------- yardımcılar ----------
function beep(){ try{ process.stdout.write("\x07"); }catch{} }

function loadTasks(){
  const rootJson  = path.resolve("tasks.json");
  const buildJson = path.resolve("build","tasks.json");
  if (fs.existsSync(rootJson))  return JSON.parse(fs.readFileSync(rootJson,"utf8"));
  if (fs.existsSync(buildJson)) return JSON.parse(fs.readFileSync(buildJson,"utf8"));
  throw new Error("tasks.json bulunamadı (kök ya da build/). Önce: npx node scripts/build-tasks.js");
}

function parseSteps(jobDef){
  const steps = [];
  for (const raw of String(jobDef||"").split(";")){
    const part = raw.trim(); if (!part) continue;
    const m = part.match(/^(\w+)\s*:\s*(.+)$/);
    if (!m){ steps.push({cmd:"note", val:part}); continue; }
    steps.push({ cmd:m[1].toLowerCase(), val:m[2].trim().replace(/^"|"$/g,"") });
  }
  return steps;
}

function normalizeWords(s){
  return String(s||"")
    .replace(/\d+/g, " ")          // sayıları yok say
    .replace(/[^\p{L}\s]/gu, " ")  // noktalama/simge at
    .toLowerCase()
    .split(/\s+/).filter(Boolean);
}
function coverage90(actualText, expectedText){
  const A = new Set(normalizeWords(actualText));
  const E = normalizeWords(expectedText);
  if (!E.length) return true;
  let hit = 0; for (const w of E) if (A.has(w)) hit++;
  return (hit/E.length) >= 0.90;
}

async function ensurePixelLibs(){
  if (!PNG || !pixelmatch){
    PNG = require("pngjs").PNG;
    pixelmatch = require("pixelmatch");
  }
}

// >>> DÜZELTİLMİŞ: N/A/boş/eksik referans = SKIP (throw yok)
async function visualCompare(page, designRefPath, threshold = 0.85, id = "task"){
  await ensurePixelLibs();

  const rawRef = (designRefPath ?? "").toString().trim();
  if (!rawRef || rawRef.toUpperCase() === "N/A"){
    console.warn(`[VISUAL] ${id}: design_ref empty/N/A → skip`);
    return;
  }
  const refPath = path.resolve(rawRef);
  if (!fs.existsSync(refPath)){
    console.warn(`[VISUAL] ${id}: reference not found at ${refPath} → skip`);
    return;
  }

  const outDir = path.resolve("targets","actual");
  fs.mkdirSync(outDir, { recursive:true });
  const actPath = path.join(outDir, `${id}.png`);
  await page.screenshot({ path: actPath, fullPage:true });

  const ref = PNG.sync.read(fs.readFileSync(refPath));
  const act = PNG.sync.read(fs.readFileSync(actPath));
  const w = Math.min(ref.width, act.width);
  const h = Math.min(ref.height, act.height);
  const refCrop = new PNG({ width:w, height:h });
  const actCrop = new PNG({ width:w, height:h });
  PNG.bitblt(ref, refCrop, 0,0, 0,0, w,h);
  PNG.bitblt(act, actCrop, 0,0, 0,0, w,h);

  const diff  = new PNG({ width:w, height:h });
  const mismatch = pixelmatch(refCrop.data, actCrop.data, diff.data, w, h, { threshold:0.1 });
  const similarity = 1 - mismatch/(w*h);
  expect(similarity).toBeGreaterThanOrEqual(threshold);
}

// ---------- test üretimi ----------
const tasks = loadTasks();
if (!Array.isArray(tasks) || tasks.length === 0){
  throw new Error("tasks.json boş. CSV → JSON derlemesi yapın (scripts/build-tasks.js).");
}

for (const t of tasks){
  test(`${t.id} — ${t.title}`, async ({ page }) => {
    beep(); // döngü başı bip

    const steps = parseSteps(t.job_definition);

    // 1) open
    const open = steps.find(s => s.cmd === "open");
    if (open){
      const url = open.val.startsWith("http") ? open.val : BASE + open.val;
      await page.goto(url, { waitUntil:"domcontentloaded" });
    }

    // 2) expect:<css>
    for (const s of steps.filter(s => s.cmd === "expect")){
      await expect(page.locator(s.val)).toBeVisible({ timeout:3000 });
    }

    // 3) text:"..."
    const txt = steps.find(s => s.cmd === "text");
    if (txt){
      const body = await page.locator("body").innerText();
      const ok = coverage90(body, txt.val);
      expect(ok, "Metin kapsama <%90 (rakamlar yok sayıldı)").toBeTruthy();
    }

    // 4) design_ref
    if (t.design_ref){
      const thr = t.visual_threshold ?? 0.85;
      await visualCompare(page, t.design_ref, thr, t.id);
    }
  });
}
### DOSYA BİTİŞ: tasks.spec.js

### DOSYA BAŞLANGIÇ: .\\tests\_setup.spec.js
// tests/_setup.spec.js
import { test as setup, expect } from "@playwright/test";
import fs from "fs";
import path from "path";

const authFile = path.join(process.cwd(), "storage", "user.json");

setup("login state -> storage/user.json", async ({ page, context }) => {
  const BASE = (process.env.BASE_URL || "http://127.0.0.1:8010").replace(/\/$/, "");
  const USER = process.env.ADMIN_USER || "hp";
  const PASS = process.env.ADMIN_PASS || "A1234";

  // 1) Önce admin köke git (login veya dashboard'a düşer)
  await page.goto(`${BASE}/admin/`, { waitUntil: "domcontentloaded", timeout: 30000 });

  // 2) Login sayfasında mıyız? Basit ve tema-bağımsız tespit
  const loginMarker = page.locator("form[action*='login'], input[name='username'], #id_username").first();
  const isLogin = await loginMarker.isVisible().catch(() => false);

  if (isLogin) {
    // 3) Giriş yap
    const userInput = page.locator('input[name="username"], #id_username').first();
    const passInput = page.locator('input[name="password"], #id_password').first();
    await userInput.fill(USER, { timeout: 5000 });
    await passInput.fill(PASS, { timeout: 5000 });

    await Promise.all([
      page.waitForNavigation({ waitUntil: "domcontentloaded", timeout: 15000 }),
      page.locator('input[type="submit"], button[type="submit"]').click(),
    ]);
  }

  // 4) Başarı ölçütü: login URL'inde olmamak ve login formunun DOM'da olmaması
  await expect(page).not.toHaveURL(/\/admin\/login\/?/);
  await expect(page.locator("form[action*='login'], input[name='username'], #id_username")).toHaveCount(0, { timeout: 3000 });

  // 5) Session kaydet
  await context.storageState({ path: authFile });
  if (!fs.existsSync(authFile)) throw new Error("storage/user.json yazılamadı");
  console.log(`[SETUP SUCCESS] Saved: ${authFile} — URL: ${page.url()}`);
});
### DOSYA BİTİŞ: _setup.spec.js

### DOSYA BAŞLANGIÇ: .\\tests\EQP-002.spec.js
import { test, expect } from '@playwright/test';

test('test', async ({ page }) => {
  await page.goto('about:blank');
});
### DOSYA BİTİŞ: EQP-002.spec.js

### DOSYA BAŞLANGIÇ: .\\tests\EQP-003.spec.js
// tests/EQP-003.spec.js
import { test, expect } from '@playwright/test';

// Setup testinde kaydedilen kimlik doğrulama durumunu kullan
test.use({ storageState: 'storage/user.json' });

test.describe('EQP-003', () => {

    test('Ekipman Ekleme formunda Üretici Firma alanının varlığı', async ({ page }) => {
        // 1. Ekipman Ekleme sayfasına git (Önceki denemelerden varsayılan URL: /admin/bakim_kalibrasyon/equipment/add/)
        await page.goto('/admin/bakim_kalibrasyon/equipment/add/', { waitUntil: 'networkidle' }); 
        
        // Sayfanın yüklendiğini kontrol et (Örneğin: Ana içerik alanının varlığı)
        await expect(page.locator('#content').first()).toBeVisible({ timeout: 10000 });
        
        // EN GÜVENİLİR DOĞRULAMA: Üretici Firma alanının etrafındaki HTML konteynerini (wrapper) kontrol et.
        // Django Admin'de bu alan genellikle '.field-manufacturer' veya benzeri bir sınıfa sahiptir.
        const fieldWrapper = page.locator(".form-row.field-manufacturer, .field-manufacturer, [data-field-name='manufacturer'], .related-widget-wrapper");
        
        // Alanın görünür olduğunu doğrula (Metin bağımlılığını ortadan kaldırıyoruz)
        await expect(fieldWrapper.first()).toBeVisible({ timeout: 10000 });

        console.log('[TEST SUCCESS] Üretici Firma alanı (CSS konumu ile) başarıyla doğrulandı.');
    });
});
### DOSYA BİTİŞ: EQP-003.spec.js

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\scripts\build-tasks.js
// scripts/build-tasks.js (CSV'den JSON'a dönüştürücü)
const fs = require('fs');
const path = require('path');
const csv = fs.readFileSync(path.join(process.cwd(), 'tasks_template.csv'), 'utf8');

const lines = csv.trim().split('\r\n');
const headers = lines[0].split(',');
const tasks = [];

for (let i = 1; i < lines.length; i++) {
     const values = lines[i].split(',');
     if (values.length === headers.length) {
          let task = {};
          for (let j = 0; j < headers.length; j++) {
               task[headers[j].trim()] = values[j].trim().replace(/^"|"$/g, '');
          }
          tasks.push(task);
     }
}

if (!fs.existsSync('build')) { fs.mkdirSync('build'); }
fs.writeFileSync('build/tasks.json', JSON.stringify(tasks, null, 2));
console.log(`[BUILD] ${tasks.length} görev tasks.json dosyasına başarıyla dönüştürüldü.`);
### DOSYA BİTİŞ: build-tasks.js

### DOSYA BAŞLANGIÇ: .\\scripts\build-tasks.js
// scripts/build-tasks.js (CSV'den JSON'a dönüştürücü)
const fs = require('fs');
const path = require('path');
const csv = fs.readFileSync(path.join(process.cwd(), 'tasks_template.csv'), 'utf8');

const lines = csv.trim().split('\r\n');
const headers = lines[0].split(',');
const tasks = [];

for (let i = 1; i < lines.length; i++) {
     const values = lines[i].split(',');
     if (values.length === headers.length) {
          let task = {};
          for (let j = 0; j < headers.length; j++) {
               task[headers[j].trim()] = values[j].trim().replace(/^"|"$/g, '');
          }
          tasks.push(task);
     }
}

if (!fs.existsSync('build')) { fs.mkdirSync('build'); }
fs.writeFileSync('build/tasks.json', JSON.stringify(tasks, null, 2));
console.log(`[BUILD] ${tasks.length} görev tasks.json dosyasına başarıyla dönüştürüldü.`);
### DOSYA BİTİŞ: build-tasks.js

### DOSYA BAŞLANGIÇ: .\\playwright.config.js
// Playwright yapılandırma
import { defineConfig } from '@playwright/test';

// Oturum durumunun kaydedileceği yer
const storageStatePath = 'storage/user.json'; 

export default defineConfig({
     timeout: 30 * 1000, // Genel Test Zaman Aşımı 30 saniye
     retries: 2,

     use: {
          baseURL: 'http://localhost:8000',
          actionTimeout: 5000,
          navigationTimeout: 30000, // Navigasyon Zaman Aşımı 30 saniye
     },

     reporter: [
          ['list'],
          ['./reporters/quarantine-reporter.js'],
     ],

     // Projeleri tanımlama
     projects: [
          // 1. Kurulum Projesi: Oturum durumunu hazırlar.
          {
               name: 'setup',
               testMatch: 'tests/_setup.spec.js',
               timeout: 30 * 1000, // Kurulum projesi için özel 30 saniye
               use: {
                    baseURL: 'http://localhost:8000',
                    storageState: storageStatePath, 
               },
          },
          // 2. Ana Test Projesi: Kurulumdan gelen oturum durumunu kullanır.
          {
               name: 'chromium',
               testIgnore: 'tests/_setup.spec.js', 
               use: {
                    browserName: 'chromium',
                    storageState: storageStatePath, 
               },
               dependencies: ['setup'], 
          },
     ],
});
### DOSYA BİTİŞ: playwright.config.js

### DOSYA BAŞLANGIÇ: .\\ops\run_suite.ps1
param(
  [string]$BaseUrl      = "http://127.0.0.1:8010",
  [string]$JobsCsv      = "ops/ui_jobs.csv",
  [string]$BaselineDir  = "targets\reference",
  [string]$AlertsDir    = "_otokodlama\alerts",
  [string]$StateTools   = "ops/state_tools.ps1",
  [string]$CsvRunner    = "ops/run_ui_validate_csv.ps1"
)

$ErrorActionPreference = "Stop"
. $StateTools

# Runner
powershell -ExecutionPolicy Bypass -File $CsvRunner -BaseUrl $BaseUrl -JobsCsv $JobsCsv -BaselineDir $BaselineDir -AlertsDir $AlertsDir | Out-Host

# CSV oku
if (-not (Test-Path $JobsCsv)) { throw "Jobs CSV not found: $JobsCsv" }
$rows = Get-Content $JobsCsv | Where-Object { $_ -match '\S' -and -not ($_.Trim().StartsWith('#')) } | ConvertFrom-Csv
if (-not $rows) { throw "CSV boş." }

$allOk = $true
foreach($r in $rows){
  $key = ('' + $r.Key).Trim()
  if ([string]::IsNullOrWhiteSpace($key) -or $key.StartsWith('#')) { continue }

  $outJson = Join-Path "_otokodlama\out" ("{0}_validate.json" -f $key)
  if (-not (Test-Path $outJson)) {
    $cand = Get-ChildItem "_otokodlama\out" -Filter "*$key*validate.json" -ErrorAction SilentlyContinue | Select-Object -First 1
    if ($cand) { $outJson = $cand.FullName }
  }
  if (-not (Test-Path $outJson)) {
    Update-TestResult -Key $key -Status "FAILED" -Metrics @{} -Artifacts @{}
    $allOk = $false
    continue
  }

  $j = Get-Content $outJson -Raw | ConvertFrom-Json
  $status = if ($j.ok) { "PASSED" } else { "FAILED" }

  $lastAuto = $j.results | Where-Object { $_.cmd -eq 'AUTOVALIDATE' } | Select-Object -Last 1
  $recall = if ($lastAuto) { [double]$lastAuto.recall } else { $null }
  $missing = if ($lastAuto) { [int]$lastAuto.missing_count } else { $null }

  $screenshot = Join-Path $BaselineDir ("{0}.png" -f $key)
  $shotPath = ""
  if (Test-Path $screenshot) { $shotPath = $screenshot }

  $art = @{ out_json = $outJson; screenshot = $shotPath }
  $met = @{}
  if ($recall -ne $null) { $met.words_recall = $recall }
  if ($missing -ne $null) { $met.missing_count = $missing }

  Update-TestResult -Key $key -Status $status -Metrics $met -Artifacts $art
  if ($status -ne "PASSED") { $allOk = $false }
}

if ($allOk) {
  Advance-Pipeline -ToStage "open_pr" -Hint "Tüm UI doğrulamaları geçti → PR açılabilir."
  Write-Host "[pipeline] advanced → open_pr" -ForegroundColor Green
} else {
  Advance-Pipeline -ToStage "validate_ui_pages" -Hint "FAILED olan test(ler) var → düzeltmeler uygulayın."
  Write-Host "[pipeline] staying at validate_ui_pages (failures present)" -ForegroundColor Yellow
}
### DOSYA BİTİŞ: run_suite.ps1

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\maintenance\models.py
from django.db import models
import uuid

# Manufacturer modelini ekliyoruz (Equipment modeli için ForeignKey gerektirebiliriz)
# Ancak şimdilik sadece Equipment modelindeki alanı CharField olarak tutalım
# Eğer Manufacturer ayrı bir model olsaydı, şuna benzer olurdu:
# class Manufacturer(models.Model):
#     name = models.CharField(max_length=100)
#     def __str__(self):
#         return self.name

class Equipment(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    
    # admin.py'nin beklediği alanlar
    name = models.CharField(max_length=200, verbose_name="Ekipman Adı")
    serial_number = models.CharField(max_length=100, unique=True, verbose_name="Seri Numarası")
    location = models.CharField(max_length=100, verbose_name="Konum")
    
    # EQP-003 testi için gerekli olan ve admin.py'de eklediğimiz alan
    manufacturer = models.CharField(max_length=100, blank=True, null=True, verbose_name="Üretici Firma")

    # Diğer bakım alanları
    purchase_date = models.DateField(null=True, blank=True, verbose_name="Satın Alma Tarihi")
    last_maintenance_date = models.DateField(null=True, blank=True, verbose_name="Son Bakım Tarihi")
    next_maintenance_date = models.DateField(null=True, blank=True, verbose_name="Sonraki Bakım Tarihi")
    is_active = models.BooleanField(default=True, verbose_name="Aktif")

    class Meta:
        verbose_name = "Ekipman"
        verbose_name_plural = "Ekipmanlar"

    def __str__(self):
        return self.name
### DOSYA BİTİŞ: models.py

### DOSYA BAŞLANGIÇ: .\\maintenance\models.py
from django.db import models
import uuid

# Manufacturer modelini ekliyoruz (Equipment modeli için ForeignKey gerektirebiliriz)
# Ancak şimdilik sadece Equipment modelindeki alanı CharField olarak tutalım
# Eğer Manufacturer ayrı bir model olsaydı, şuna benzer olurdu:
# class Manufacturer(models.Model):
#     name = models.CharField(max_length=100)
#     def __str__(self):
#         return self.name

class Equipment(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    
    # admin.py'nin beklediği alanlar
    name = models.CharField(max_length=200, verbose_name="Ekipman Adı")
    serial_number = models.CharField(max_length=100, unique=True, verbose_name="Seri Numarası")
    location = models.CharField(max_length=100, verbose_name="Konum")
    
    # EQP-003 testi için gerekli olan ve admin.py'de eklediğimiz alan
    manufacturer = models.CharField(max_length=100, blank=True, null=True, verbose_name="Üretici Firma")

    # Diğer bakım alanları
    purchase_date = models.DateField(null=True, blank=True, verbose_name="Satın Alma Tarihi")
    last_maintenance_date = models.DateField(null=True, blank=True, verbose_name="Son Bakım Tarihi")
    next_maintenance_date = models.DateField(null=True, blank=True, verbose_name="Sonraki Bakım Tarihi")
    is_active = models.BooleanField(default=True, verbose_name="Aktif")

    class Meta:
        verbose_name = "Ekipman"
        verbose_name_plural = "Ekipmanlar"

    def __str__(self):
        return self.name
### DOSYA BİTİŞ: models.py

### DOSYA BAŞLANGIÇ: .\\core\settings_maintenance.py
# -*- coding: utf-8 -*-
"""
core/settings_maintenance.py
Base settings'i miras alÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±r, 'maintenance' app'ini tekilleÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€¦Ã‚Â¸tirir ve custom admin urlconf'u tanÃƒÆ’Ã¢â‚¬ÂÃƒâ€šÃ‚Â±mlar.
"""

from .settings import *  # noqa


def _normalize_installed(apps):
    out = []
    seen = set()
    for app in apps:
        # 'maintenance' veya 'maintenance.apps.MaintenanceConfig' geldiÃƒÆ’Ã¢â‚¬ÂÃƒâ€¦Ã‚Â¸inde
        # tek bir canonical entry'ye indiriyoruz:
        if app in ("maintenance", "maintenance.apps.MaintenanceConfig"):
            key = "maintenance.apps.MaintenanceConfig"
        else:
            key = app
        if key not in seen:
            seen.add(key)
            out.append(key)
    return out


# TekilleÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€¦Ã‚Â¸tir
INSTALLED_APPS = _normalize_installed(INSTALLED_APPS)
if "maintenance.apps.MaintenanceConfig" not in INSTALLED_APPS:
    INSTALLED_APPS.insert(0, "maintenance.apps.MaintenanceConfig")

# Custom admin site URL'leri
ROOT_URLCONF = "core.urls"
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'testserver']


MIDDLEWARE = [
    'core.mw_fix_equip_redirect.AdminEquipmentRedirectFixMiddleware','core.mw_no_append_admin.NoAppendSlashForAdmin']

SESSION_COOKIE_SECURE = False

CSRF_COOKIE_SECURE = False

# --- AUTO PATCH (admin redirect loop & required middleware) ---
APPEND_SLASH = False
ALLOWED_HOSTS = ['127.0.0.1','localhost','testserver']

MIDDLEWARE = [
    'core.mw_fix_equip_redirect.AdminEquipmentRedirectFixMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'core.mw_no_append_admin.NoAppendSlashForAdmin',  # CommonMiddleware yerine admin'de append_slash yok
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# --- AUTO PATCH (admin redirect loop & required middleware) ---
APPEND_SLASH = False
ALLOWED_HOSTS = ['127.0.0.1','localhost','testserver']

MIDDLEWARE = [
    'core.mw_fix_equip_redirect.AdminEquipmentRedirectFixMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# --- AUTO PATCH (fix admin redirect loop & required middleware) ---
APPEND_SLASH = False
ALLOWED_HOSTS = ['127.0.0.1','localhost','testserver']

MIDDLEWARE = [
    'core.mw_fix_equip_redirect.AdminEquipmentRedirectFixMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# --- AUTO PATCH (fix admin redirect loop & required middleware) ---
APPEND_SLASH = False
ALLOWED_HOSTS = ['127.0.0.1','localhost','testserver']

MIDDLEWARE = [
    'core.mw_fix_equip_redirect.AdminEquipmentRedirectFixMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# --- AUTO PATCH (canonical redirect middleware) ---
APPEND_SLASH = False
ALLOWED_HOSTS = ['127.0.0.1','localhost','testserver']

MIDDLEWARE = [
    'core.mw_fix_equip_redirect.AdminEquipmentRedirectFixMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # Kanonik admin liste isteklerini erken yakala:
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



### DOSYA BİTİŞ: settings_maintenance.py

### DOSYA BAŞLANGIÇ: .\\core\mw_fix_equip_redirect.py
# -*- coding: utf-8 -*-
# core/mw_fix_equip_redirect.py
from urllib.parse import parse_qsl, urlencode
from django.utils.deprecation import MiddlewareMixin
from django.http import HttpResponseRedirect

CANONICAL = "/admin/maintenance/equipment/"
DIRECT    = "/admin/maintenance/equipment/_direct/"

BLOCK_KEYS = ("_changelist_filters", "preserved_filters", "p")

def _filtered_qs(environ_qs: str) -> str:
    try:
        pairs = parse_qsl(environ_qs or "", keep_blank_values=True)
    except Exception:
        pairs = []
    pairs = [(k, v) for (k, v) in pairs if k not in BLOCK_KEYS]
    qs = urlencode(pairs, doseq=True)
    return ("?" + qs) if qs else ""

class AdminEquipmentRedirectFixMiddleware(MiddlewareMixin):
    """
    /admin/maintenance/equipment/ hedefli TÜM istek/yanıtları güvenli _direct listesine çevirir.
    - process_request: view'e gitmeden önce 302'yle _direct'e yönlendir.
    - process_response: 301/302 Location header'ı kanonik listeyi gösteriyorsa _direct'e çevir.
    """

    def process_request(self, request):
        try:
            path = request.path
        except Exception:
            path = ""
        if path.endswith(CANONICAL):
            qs = _filtered_qs(getattr(request.META, "QUERY_STRING", "") or request.META.get("QUERY_STRING",""))
            return HttpResponseRedirect(DIRECT + qs)

    def process_response(self, request, response):
        # Yanıt 301/302 ise ve hedef kanonik listeyse, _direct'e çevir
        try:
            loc = response["Location"] if hasattr(response, "has_header") and response.has_header("Location") \
                  else (response.headers.get("Location") if hasattr(response, "headers") else None)
        except Exception:
            loc = None

        code = getattr(response, "status_code", 200)
        if code in (301, 302) and loc:
            # Sadece path kısmı ile karşılaştır: çoğu zaman relative Location geliyor
            if str(loc).split("?",1)[0].endswith(CANONICAL):
                qs = ""
                try:
                    # request tarafındaki mevcut QUERY_STRING'i filtreleyip koru
                    qs = _filtered_qs(request.META.get("QUERY_STRING",""))
                except Exception:
                    qs = ""
                try:
                    response["Location"] = DIRECT + qs
                except Exception:
                    pass
        return response
### DOSYA BİTİŞ: mw_fix_equip_redirect.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\maintenance\admin.py
from django.contrib import admin
from .models import Equipment

@admin.register(Equipment)
class EquipmentAdmin(admin.ModelAdmin):
    list_display = ('name', 'serial_number', 'location', 'manufacturer', 'is_active')
    list_filter = ('location', 'is_active')
    search_fields = ('name', 'serial_number')
    
    # EQP-003 testi için 'manufacturer' alanının formda görünür olduğundan emin olunur.
    fieldsets = (
        (None, {
            'fields': ('name', 'serial_number', 'manufacturer', 'purchase_date', 'last_maintenance_date', 'next_maintenance_date', 'location', 'is_active')
        }),
    )
### DOSYA BİTİŞ: admin.py

### DOSYA BAŞLANGIÇ: .\\core\urls.py
from django.contrib import admin
from django.urls import path, include
from django.shortcuts import redirect

urlpatterns = [
    # root URL'ye gidildiğinde /admin/'e yönlendir
    path('', lambda request: redirect('admin/', permanent=False)),
    
    # Standart Django Admin yolu
    path('admin/', admin.site.urls),
    
    # Uygulama URL'leri
    path('maintenance/', include('maintenance.urls')),
]
### DOSYA BİTİŞ: urls.py

### DOSYA BAŞLANGIÇ: .\\maintenance\admin.py
from django.contrib import admin
from .models import Equipment

@admin.register(Equipment)
class EquipmentAdmin(admin.ModelAdmin):
    list_display = ('name', 'serial_number', 'location', 'manufacturer', 'is_active')
    list_filter = ('location', 'is_active')
    search_fields = ('name', 'serial_number')
    
    # EQP-003 testi için 'manufacturer' alanının formda görünür olduğundan emin olunur.
    fieldsets = (
        (None, {
            'fields': ('name', 'serial_number', 'manufacturer', 'purchase_date', 'last_maintenance_date', 'next_maintenance_date', 'location', 'is_active')
        }),
    )
### DOSYA BİTİŞ: admin.py

### DOSYA BAŞLANGIÇ: .\\core\settings.py
# REV: 1.2 | 2025-09-25 | Hash: a7864e49 | ParÃ§a: 1/1
# >>> BLOK: IMPORTS | Temel importlar | ID:PY-IMP-3REMVA2D
# <<< BLOK SONU: ID:PY-IMP-3REMVA2D
# >>> BLOK: SETTINGS | Proje ayarlari | ID:PY-SET-10HDCS31
"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7@x$&z9=&q!e3mgdj)35i2+(629e2e3%c*jp_)n30=(by-qcb3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [    'maintenance.apps.MaintenanceConfig',
    
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# <<< BLOK SONU: ID:PY-SET-10HDCS31





### DOSYA BİTİŞ: settings.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\core\urls.py
from django.contrib import admin
from django.urls import path, include
from django.shortcuts import redirect

urlpatterns = [
    # root URL'ye gidildiğinde /admin/'e yönlendir
    path('', lambda request: redirect('admin/', permanent=False)),
    
    # Standart Django Admin yolu
    path('admin/', admin.site.urls),
    
    # Uygulama URL'leri
    path('maintenance/', include('maintenance.urls')),
]
### DOSYA BİTİŞ: urls.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\ensure_admin.py
from django.contrib.auth import get_user_model
from django.contrib.auth.models import Permission
from django.apps import apps
User = get_user_model()
u, created = User.objects.get_or_create(username='admin', defaults={'email':'admin@example.com','is_superuser':True,'is_staff':True})
if created:
    u.set_password('admin')
    u.save()
Equipment = apps.get_model('maintenance','Equipment')
if Equipment:
    ct = apps.get_model('contenttypes','ContentType').objects.get_for_model(Equipment)
    try:
        p = Permission.objects.get(codename='add_equipment', content_type=ct)
        u.user_permissions.add(p)
    except Permission.DoesNotExist:
        pass
print("OK-user:", u.username)
### DOSYA BİTİŞ: ensure_admin.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\ensure_admin.py
from django.contrib.auth import get_user_model
from django.contrib.auth.models import Permission
from django.apps import apps
User = get_user_model()
u, created = User.objects.get_or_create(username='admin', defaults={'email':'admin@example.com','is_superuser':True,'is_staff':True})
if created:
    u.set_password('admin')
    u.save()
Equipment = apps.get_model('maintenance','Equipment')
if Equipment:
    ct = apps.get_model('contenttypes','ContentType').objects.get_for_model(Equipment)
    try:
        p = Permission.objects.get(codename='add_equipment', content_type=ct)
        u.user_permissions.add(p)
    except Permission.DoesNotExist:
        pass
print("OK-user:", u.username)
### DOSYA BİTİŞ: ensure_admin.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\_smoke_for_bak.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib.auth import get_user_model
from django.test import Client
from maintenance.models import Equipment
from django.contrib.admin.templatetags import admin_urls
from django.urls import reverse

U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff=True; u.is_superuser=True; u.set_password("admin123!"); u.save()

c = Client()
# login sayfasına gidip giriş yap
c.get("/admin/")
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

cl  = reverse(admin_urls.admin_urlname(Equipment._meta, "changelist"))
add = reverse(admin_urls.admin_urlname(Equipment._meta, "add"))

ok = (c.get(reverse("admin:index")).status_code == 200
      and c.get(cl).status_code == 200
      and c.get(add).status_code == 200)
print("OK" if ok else "FAIL")
### DOSYA BİTİŞ: _smoke_for_bak.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\_smoke_for_bak.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib.auth import get_user_model
from django.test import Client
from maintenance.models import Equipment
from django.contrib.admin.templatetags import admin_urls
from django.urls import reverse

U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff=True; u.is_superuser=True; u.set_password("admin123!"); u.save()

c = Client()
# login sayfasına gidip giriş yap
c.get("/admin/")
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

cl  = reverse(admin_urls.admin_urlname(Equipment._meta, "changelist"))
add = reverse(admin_urls.admin_urlname(Equipment._meta, "add"))

ok = (c.get(reverse("admin:index")).status_code == 200
      and c.get(cl).status_code == 200
      and c.get(add).status_code == 200)
print("OK" if ok else "FAIL")
### DOSYA BİTİŞ: _smoke_for_bak.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\admin_auth_walk.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.urls import resolve, Resolver404
for p in ["/admin/","/admin/maintenance/equipment/","/admin/maintenance/equipment/add/"]:
    try:
        m = resolve(p)
        print(p, "-> OK:", m.func.__module__)
    except Resolver404:
        print(p, "-> 404 (pattern yok)")
### DOSYA BİTİŞ: admin_auth_walk.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_auth_walk.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()
from django.urls import resolve, Resolver404
for p in ["/admin/","/admin/maintenance/equipment/","/admin/maintenance/equipment/add/"]:
    try:
        m = resolve(p)
        print(p, "-> OK:", m.func.__module__)
    except Resolver404:
        print(p, "-> 404 (pattern yok)")
### DOSYA BİTİŞ: admin_auth_walk.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\admin_smoke_authed.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from django.contrib.auth import get_user_model
from django.test import Client
from django.urls import reverse
from maintenance.models import Equipment

# Süper kullanıcı garanti
U = get_user_model()
u, _ = U.objects.get_or_create(
    username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True}
)
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

# Login + kontroller
c = Client()
c.force_login(u)  # login formuna post atmaya gerek yok, direkt oturum aç
print("admin:index ->", c.get(reverse("admin:index")).status_code)

nm_cl  = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
cl_url  = reverse(nm_cl)
add_url = reverse(nm_add)

r1 = c.get(cl_url)
r2 = c.get(add_url)
print("CL  status:", r1.status_code, cl_url)
print("ADD status:", r2.status_code, add_url)

# Basit bir içerik işareti (isteğe bağlı)
print("Has 'Equipment' in CL page?:", "Equipment" in r1.content.decode("utf-8", "ignore"))
### DOSYA BİTİŞ: admin_smoke_authed.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_smoke_authed.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from django.contrib.auth import get_user_model
from django.test import Client
from django.urls import reverse
from maintenance.models import Equipment

# Süper kullanıcı garanti
U = get_user_model()
u, _ = U.objects.get_or_create(
    username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True}
)
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

# Login + kontroller
c = Client()
c.force_login(u)  # login formuna post atmaya gerek yok, direkt oturum aç
print("admin:index ->", c.get(reverse("admin:index")).status_code)

nm_cl  = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
cl_url  = reverse(nm_cl)
add_url = reverse(nm_add)

r1 = c.get(cl_url)
r2 = c.get(add_url)
print("CL  status:", r1.status_code, cl_url)
print("ADD status:", r2.status_code, add_url)

# Basit bir içerik işareti (isteğe bağlı)
print("Has 'Equipment' in CL page?:", "Equipment" in r1.content.decode("utf-8", "ignore"))
### DOSYA BİTİŞ: admin_smoke_authed.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_smoke_autodiscover.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from django.contrib.auth import get_user_model
from django.urls import reverse, NoReverseMatch
from django.test import Client
from maintenance.models import Equipment

print("System check identified no issues (0 silenced).")
print("admin:index ->", reverse("admin:index"))
print("admin:login ->", reverse("admin:login"))
try:
    print("admin:app_list(maintenance) ->", reverse("admin:app_list", kwargs={"app_label":"maintenance"}))
except NoReverseMatch as e:
    print("WARN app_list:", e)

nm_cl  = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
print(admin_urlname(Equipment._meta, "changelist"), "->", reverse(nm_cl))
print(admin_urlname(Equipment._meta, "add"),        "->", reverse(nm_add))

U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

c = Client()
print("CL  status:", c.get(reverse(nm_cl)).status_code, reverse(nm_cl))
print("ADD status:", c.get(reverse(nm_add)).status_code, reverse(nm_add))
### DOSYA BİTİŞ: admin_smoke_autodiscover.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\admin_smoke_autodiscover.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from django.contrib.auth import get_user_model
from django.urls import reverse, NoReverseMatch
from django.test import Client
from maintenance.models import Equipment

print("System check identified no issues (0 silenced).")
print("admin:index ->", reverse("admin:index"))
print("admin:login ->", reverse("admin:login"))
try:
    print("admin:app_list(maintenance) ->", reverse("admin:app_list", kwargs={"app_label":"maintenance"}))
except NoReverseMatch as e:
    print("WARN app_list:", e)

nm_cl  = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
print(admin_urlname(Equipment._meta, "changelist"), "->", reverse(nm_cl))
print(admin_urlname(Equipment._meta, "add"),        "->", reverse(nm_add))

U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

c = Client()
print("CL  status:", c.get(reverse(nm_cl)).status_code, reverse(nm_cl))
print("ADD status:", c.get(reverse(nm_add)).status_code, reverse(nm_add))
### DOSYA BİTİŞ: admin_smoke_autodiscover.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\admin_smoke_final2.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib.auth import get_user_model
from django.test import Client
from maintenance.models import Equipment

# superuser garanti
U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

c = Client()
print("GET /admin/ ->", c.get("/admin/").status_code)
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

cl = f"/admin/{Equipment._meta.app_label}/{Equipment._meta.model_name}/"
ad = f"/admin/{Equipment._meta.app_label}/{Equipment._meta.model_name}/add/"
print("CL:", c.get(cl).status_code, cl)
print("AD:", c.get(ad).status_code, ad)
### DOSYA BİTİŞ: admin_smoke_final2.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_smoke_final2.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib.auth import get_user_model
from django.test import Client
from maintenance.models import Equipment

# superuser garanti
U = get_user_model()
u, _ = U.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

c = Client()
print("GET /admin/ ->", c.get("/admin/").status_code)
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

cl = f"/admin/{Equipment._meta.app_label}/{Equipment._meta.model_name}/"
ad = f"/admin/{Equipment._meta.app_label}/{Equipment._meta.model_name}/add/"
print("CL:", c.get(cl).status_code, cl)
print("AD:", c.get(ad).status_code, ad)
### DOSYA BİTİŞ: admin_smoke_final2.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\admin_smoke_final.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.conf import settings
from django.urls import reverse, NoReverseMatch, clear_url_caches, get_resolver
from importlib import import_module, reload
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from maintenance.models import Equipment
from django.contrib.auth import get_user_model
from django.test import Client

# Admin registry'yi yükle ve URL resolver'ı tazeleyip yeniden derle
admin.autodiscover()
clear_url_caches()
reload(import_module(settings.ROOT_URLCONF))

# Çekirdek admin reverse'leri
print("admin:index ->", reverse("admin:index"))
print("admin:login ->", reverse("admin:login"))
try:
    print("admin:app_list(maintenance) ->", reverse("admin:app_list", kwargs={"app_label":"maintenance"}))
except NoReverseMatch as e:
    print("WARN app_list:", e)

# Model bazlı isimleri deneyelim (namespace + app + model + action)
nm_cl  = f"admin:{Equipment._meta.app_label}_{Equipment._meta.model_name}_changelist"
nm_add = f"admin:{Equipment._meta.app_label}_{Equipment._meta.model_name}_add"

# Debug: resolver'daki ilgili isimleri göster
names = sorted(n for n in get_resolver().reverse_dict.keys()
               if isinstance(n, str) and "admin" in n and Equipment._meta.model_name in n)
print("resolver names (sample):", names[:10])

for nm in (nm_cl, nm_add):
    try:
        print(nm, "->", reverse(nm))
    except NoReverseMatch as e:
        print("WARN", nm, "->", e)

# Superuser garanti
User = get_user_model()
u, _ = User.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

# Login + gerçek URL yoluyla duman testi
c = Client()
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

cl_path  = f"/admin/{Equipment._meta.app_label}/{Equipment._meta.model_name}/"
add_path = f"/admin/{Equipment._meta.app_label}/{Equipment._meta.model_name}/add/"

print("CL  status:", c.get(cl_path).status_code, cl_path)
print("ADD status:", c.get(add_path).status_code, add_path)
### DOSYA BİTİŞ: admin_smoke_final.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_smoke_final.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.conf import settings
from django.urls import reverse, NoReverseMatch, clear_url_caches, get_resolver
from importlib import import_module, reload
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from maintenance.models import Equipment
from django.contrib.auth import get_user_model
from django.test import Client

# Admin registry'yi yükle ve URL resolver'ı tazeleyip yeniden derle
admin.autodiscover()
clear_url_caches()
reload(import_module(settings.ROOT_URLCONF))

# Çekirdek admin reverse'leri
print("admin:index ->", reverse("admin:index"))
print("admin:login ->", reverse("admin:login"))
try:
    print("admin:app_list(maintenance) ->", reverse("admin:app_list", kwargs={"app_label":"maintenance"}))
except NoReverseMatch as e:
    print("WARN app_list:", e)

# Model bazlı isimleri deneyelim (namespace + app + model + action)
nm_cl  = f"admin:{Equipment._meta.app_label}_{Equipment._meta.model_name}_changelist"
nm_add = f"admin:{Equipment._meta.app_label}_{Equipment._meta.model_name}_add"

# Debug: resolver'daki ilgili isimleri göster
names = sorted(n for n in get_resolver().reverse_dict.keys()
               if isinstance(n, str) and "admin" in n and Equipment._meta.model_name in n)
print("resolver names (sample):", names[:10])

for nm in (nm_cl, nm_add):
    try:
        print(nm, "->", reverse(nm))
    except NoReverseMatch as e:
        print("WARN", nm, "->", e)

# Superuser garanti
User = get_user_model()
u, _ = User.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

# Login + gerçek URL yoluyla duman testi
c = Client()
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

cl_path  = f"/admin/{Equipment._meta.app_label}/{Equipment._meta.model_name}/"
add_path = f"/admin/{Equipment._meta.app_label}/{Equipment._meta.model_name}/add/"

print("CL  status:", c.get(cl_path).status_code, cl_path)
print("ADD status:", c.get(add_path).status_code, add_path)
### DOSYA BİTİŞ: admin_smoke_final.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\admin_smoke_fixed.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
admin.autodiscover()  # güvenli

from django.contrib.auth import get_user_model
from django.test import Client
from django.urls import reverse, NoReverseMatch
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from maintenance.models import Equipment

# kritik reverse'ler
print("admin:index ->", reverse("admin:index"))
print("admin:login ->", reverse("admin:login"))

# app_list bazı sürümlerde/kurulumlarda isim/ekleme farkı yüzünden reverse edilmeyebilir
try:
    print("admin:app_list(maintenance) ->", reverse("admin:app_list", kwargs={"app_label":"maintenance"}))
except NoReverseMatch as e:
    print("WARN app_list:", e)

# model bazlı reverse (garanti)
nm_cl  = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
print(nm_cl,  "->", reverse(nm_cl))
print(nm_add, "->", reverse(nm_add))

# superuser garanti
User = get_user_model()
u, _ = User.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

# login + sayfa durumları
c = Client()
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

print("CL  status:", c.get("/admin/maintenance/equipment/").status_code)
print("ADD status:", c.get("/admin/maintenance/equipment/add/").status_code)
### DOSYA BİTİŞ: admin_smoke_fixed.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_smoke_fixed.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
admin.autodiscover()  # güvenli

from django.contrib.auth import get_user_model
from django.test import Client
from django.urls import reverse, NoReverseMatch
from django.contrib.admin.templatetags.admin_urls import admin_urlname
from maintenance.models import Equipment

# kritik reverse'ler
print("admin:index ->", reverse("admin:index"))
print("admin:login ->", reverse("admin:login"))

# app_list bazı sürümlerde/kurulumlarda isim/ekleme farkı yüzünden reverse edilmeyebilir
try:
    print("admin:app_list(maintenance) ->", reverse("admin:app_list", kwargs={"app_label":"maintenance"}))
except NoReverseMatch as e:
    print("WARN app_list:", e)

# model bazlı reverse (garanti)
nm_cl  = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
print(nm_cl,  "->", reverse(nm_cl))
print(nm_add, "->", reverse(nm_add))

# superuser garanti
User = get_user_model()
u, _ = User.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

# login + sayfa durumları
c = Client()
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

print("CL  status:", c.get("/admin/maintenance/equipment/").status_code)
print("ADD status:", c.get("/admin/maintenance/equipment/add/").status_code)
### DOSYA BİTİŞ: admin_smoke_fixed.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\admin_smoke.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse
from django.test import Client
from django.contrib.auth import get_user_model

User = get_user_model()
u, _ = User.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

print("admin:index ->", reverse("admin:index"))
print("admin:login ->", reverse("admin:login"))
print("app_list(maintenance) ->", reverse("admin:app_list", kwargs={"app_label":"maintenance"}))

c = Client()
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

print("CL  /admin/maintenance/equipment/     ->", c.get("/admin/maintenance/equipment/").status_code)
print("ADD /admin/maintenance/equipment/add/ ->", c.get("/admin/maintenance/equipment/add/").status_code)
### DOSYA BİTİŞ: admin_smoke.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_smoke.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse
from django.test import Client
from django.contrib.auth import get_user_model

User = get_user_model()
u, _ = User.objects.get_or_create(username="admin",
    defaults={"email":"admin@example.com","is_staff":True,"is_superuser":True})
u.is_staff = True; u.is_superuser = True; u.set_password("admin123!"); u.save()

print("admin:index ->", reverse("admin:index"))
print("admin:login ->", reverse("admin:login"))
print("app_list(maintenance) ->", reverse("admin:app_list", kwargs={"app_label":"maintenance"}))

c = Client()
c.post("/admin/login/?next=/admin/", {
    "username":"admin","password":"admin123!",
    "this_is_the_login_form":1,"next":"/admin/"
}, follow=True)

print("CL  /admin/maintenance/equipment/     ->", c.get("/admin/maintenance/equipment/").status_code)
print("ADD /admin/maintenance/equipment/add/ ->", c.get("/admin/maintenance/equipment/add/").status_code)
### DOSYA BİTİŞ: admin_smoke.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\list_admin_urls.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse, NoReverseMatch

print("site.name:", getattr(admin.site, "name", None))

# kritik üç reverse:
for name, kwargs in [
    ("admin:index", None),
    ("admin:login", None),
    ("admin:app_list", {"app_label":"maintenance"}),
]:
    try:
        print(name, "->", reverse(name, kwargs=kwargs))
    except NoReverseMatch as e:
        print(name, "-> NoReverseMatch:", e)

# model bazlı reverse'lar
from maintenance.models import Equipment
from django.contrib.admin.templatetags.admin_urls import admin_urlname
nm_cl = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
for nm in [nm_cl, nm_add]:
    try:
        print(nm, "->", reverse(nm))
    except NoReverseMatch as e:
        print(nm, "-> NoReverseMatch:", e)
### DOSYA BİTİŞ: list_admin_urls.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\list_admin_urls.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse, NoReverseMatch

print("site.name:", getattr(admin.site, "name", None))

# kritik üç reverse:
for name, kwargs in [
    ("admin:index", None),
    ("admin:login", None),
    ("admin:app_list", {"app_label":"maintenance"}),
]:
    try:
        print(name, "->", reverse(name, kwargs=kwargs))
    except NoReverseMatch as e:
        print(name, "-> NoReverseMatch:", e)

# model bazlı reverse'lar
from maintenance.models import Equipment
from django.contrib.admin.templatetags.admin_urls import admin_urlname
nm_cl = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
for nm in [nm_cl, nm_add]:
    try:
        print(nm, "->", reverse(nm))
    except NoReverseMatch as e:
        print(nm, "-> NoReverseMatch:", e)
### DOSYA BİTİŞ: list_admin_urls.py

### DOSYA BAŞLANGIÇ: .\\_otokodlama\admin_namespace_probe.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse
from maintenance.models import Equipment
from django.contrib.admin.templatetags.admin_urls import admin_urlname

print("site.name =", getattr(admin.site, "name", None))
print("admin:index  ->", reverse("admin:index"))
print("admin:login  ->", reverse("admin:login"))
print("admin:app_list(maintenance) ->", reverse("admin:app_list", kwargs={"app_label":"maintenance"}))

nm_cl = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
print("nm_cl =", nm_cl)
print("nm_add =", nm_add)
print("reverse(changelist) ->", reverse(nm_cl))
print("reverse(add)        ->", reverse(nm_add))
### DOSYA BİTİŞ: admin_namespace_probe.py

### DOSYA BAŞLANGIÇ: .\\_yedek\20251008-093923\_otokodlama\admin_namespace_probe.py
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE","core.settings_maintenance")
django.setup()

from django.contrib import admin
from django.urls import reverse
from maintenance.models import Equipment
from django.contrib.admin.templatetags.admin_urls import admin_urlname

print("site.name =", getattr(admin.site, "name", None))
print("admin:index  ->", reverse("admin:index"))
print("admin:login  ->", reverse("admin:login"))
print("admin:app_list(maintenance) ->", reverse("admin:app_list", kwargs={"app_label":"maintenance"}))

nm_cl = admin_urlname(Equipment._meta, "changelist")
nm_add = admin_urlname(Equipment._meta, "add")
print("nm_cl =", nm_cl)
print("nm_add =", nm_add)
print("reverse(changelist) ->", reverse(nm_cl))
print("reverse(add)        ->", reverse(nm_add))
### DOSYA BİTİŞ: admin_namespace_probe.py

